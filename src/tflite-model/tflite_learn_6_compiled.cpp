/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 04.12.2024 21:29:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 25369, -34300, -36995, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00019545828399714082, 0.00016129849245771766, 0.00015476485714316368, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 60,53,101,-67,-57,9,-16,16,-13,64,27,-18,-29,-76,76,10,-57,63,102,109,-38,-7,50,-61,-112,127,-67,11,82,17,-20,6, 
  /* [1][0][][] */ 59,-45,-68,14,-13,127,-14,-11,120,-63,-4,-107,-63,107,33,-55,91,-44,-29,-95,-115,18,102,63,11,-7,3,-12,-80,-54,0,-55, 
  /* [2][0][][] */ -35,81,-84,81,84,-44,-30,119,94,20,127,-38,-102,-95,84,123,-87,-55,-16,-117,77,115,-50,-106,95,-78,-17,-123,-9,-84,91,-22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0039671659469604492, 0.0032738335430622101, 0.0031412222888320684, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 188, 193, -37, -61, 14, 20, -278, 85, 47, 517, 35, 1238, -306, 135, -535, 109, -85, -318, 1446, -278, -69, -129, -204, 396, 235, 1244, -296, -238, 1256, -24, -84, -155, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0664053813088685e-05, 4.2758132622111589e-05, 4.0978702600114048e-05, 4.624063876690343e-05, 4.2438925447640941e-05, 4.6959652536315843e-05, 4.1746792703634128e-05, 4.266727773938328e-05, 4.5127191697247326e-05, 4.820507820113562e-05, 4.1584924474591389e-05, 5.1447699661366642e-05, 4.2006184230558574e-05, 4.2456773371668532e-05, 4.3387080950196832e-05, 4.2333565943408757e-05, 4.3741365516325459e-05, 4.1014434827957302e-05, 5.3577230573864654e-05, 4.0770966734271497e-05, 4.3266205466352403e-05, 4.4792523112846538e-05, 4.1325678466819227e-05, 4.2079951526829973e-05, 4.5637596485903487e-05, 4.7738856665091589e-05, 4.0474322304362431e-05, 4.0814760723151267e-05, 4.6972683776402846e-05, 4.055031604366377e-05, 3.9968588680494577e-05, 5.04466806887649e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -38,-45,111,10,86,-26,-92,-103,66,-104,-112,5,51,14,-37,61,-52,-34,-68,-68,-71,-108,8,118,-126,17,83,-48,118,-14,-18,-91,95,-64,-105,77,-107,-81,-93,33,83,-89,-103,114,55,-110,118,-18,26,-67,-36,97,-77,-51,-102,118,17,78,117,-110,-76,94,-62,51,-28,20,76,100,45,100,92,-123,111,-107,46,93,-115,19,-62,34,59,25,101,-2,-58,-39,-86,114,34,127,-10,-126,20,64,35,18, 
  /* [1][0][][] */ -75,32,-69,-5,-35,89,43,12,78,-100,-101,106,61,-23,30,62,114,-36,39,125,-43,-1,40,33,31,3,-38,109,15,13,100,-59,61,108,-4,24,56,66,-9,-76,-58,11,-19,-93,-32,38,-29,-50,-23,-80,92,66,13,75,-73,-47,37,78,52,85,-61,117,-60,-76,-51,40,81,30,110,31,23,15,-127,85,-44,50,92,-43,-37,73,-76,66,-48,-122,32,121,-87,-61,85,86,102,31,84,99,31,0, 
  /* [2][0][][] */ 39,42,-61,96,-3,-68,90,95,-106,88,-41,124,66,-22,86,-115,-62,-29,49,50,-111,-17,117,19,3,74,106,14,-75,75,79,95,-68,-24,-101,-110,-87,94,108,-35,-127,-85,9,-9,-88,117,-33,-83,106,38,81,-100,-37,65,19,11,-74,88,-56,5,-29,73,-46,72,97,44,50,83,-100,64,6,-85,30,-69,37,30,-63,-25,2,17,34,-106,-23,-53,-2,-108,-24,-41,86,113,-21,4,-58,-95,-58,-78, 
  /* [3][0][][] */ 64,-3,32,-25,-70,63,-102,36,42,27,61,0,80,93,70,-1,101,94,-66,28,114,-82,-61,-103,-40,-106,-74,97,46,-74,79,13,-49,-33,-12,-18,-84,-19,40,42,-20,-83,-93,1,68,26,-46,-77,64,-74,29,9,84,23,91,-89,-95,-122,-127,-56,-86,30,-23,68,59,-29,-57,-32,-27,-71,6,101,14,-107,61,-48,43,91,91,-71,-80,-118,43,85,29,46,-47,-105,-70,45,2,-97,92,-73,-78,31, 
  /* [4][0][][] */ 33,95,-7,36,-23,-4,36,1,40,99,-10,51,16,-32,-9,-79,-18,-1,-71,31,119,-93,88,33,-39,-13,68,-60,-39,58,-71,-47,73,112,23,-114,-44,-3,-127,35,-47,-57,-92,-89,31,101,32,59,24,-32,-34,-63,-95,30,-76,22,54,-114,10,15,8,-77,-23,-62,-43,59,2,-51,35,-117,-88,-73,-70,6,116,51,80,-20,-6,-78,11,-63,-89,-32,3,77,71,8,-108,-73,43,51,36,116,-100,-27, 
  /* [5][0][][] */ 94,-88,72,79,26,-122,26,53,100,-119,0,-69,31,93,30,33,50,53,-75,76,33,49,15,-25,-108,-50,-14,-84,33,12,17,-110,-35,3,-62,2,-127,-34,43,26,-82,-46,39,85,-34,23,33,-48,-97,80,24,12,27,13,16,-15,80,52,-66,-37,36,-74,23,-64,-50,91,-23,33,61,2,91,-60,-40,66,-43,-65,-6,-48,13,74,98,42,32,103,-75,76,-1,34,66,-90,106,66,-10,11,70,-74, 
  /* [6][0][][] */ 13,-49,115,75,-88,-71,-6,64,-18,-89,3,-92,85,52,115,-123,39,-1,9,100,-85,-125,110,57,-56,-88,-12,-59,-31,-122,45,-83,-95,-127,-50,-110,-11,36,-114,80,84,53,20,-19,-119,104,-95,-50,-89,14,-30,-73,64,-59,93,-32,3,-10,-68,114,-103,1,64,-73,-56,64,101,-54,77,-9,-110,-10,56,-70,-97,-44,-87,-106,-61,-30,30,-31,40,-31,-77,-93,-43,-101,82,93,99,15,-59,-74,74,-32, 
  /* [7][0][][] */ 102,66,-41,-64,-70,126,-17,0,110,9,-96,14,54,-85,50,68,57,20,-18,124,60,36,-5,91,-84,102,43,55,-74,118,-20,42,26,25,72,96,-104,91,-8,-31,99,-74,86,72,52,-2,105,-110,53,-50,-127,-61,-30,82,24,34,127,-115,-8,-58,10,-8,88,-109,-64,-52,69,6,-104,22,71,91,79,16,67,58,-55,56,-98,25,96,-54,-11,-75,91,38,-119,99,88,9,89,71,-52,-32,3,-63, 
  /* [8][0][][] */ 16,27,-44,-83,52,34,-68,-18,8,37,45,88,14,-38,-79,-71,-63,91,-74,26,36,-22,78,108,-127,95,46,71,-61,30,-85,112,89,-30,50,-10,109,6,-16,73,79,101,-102,-112,-11,-25,-20,105,19,-84,-62,4,-67,-11,-25,-97,52,108,-106,99,113,36,47,107,-34,-41,-19,102,-74,52,34,5,73,57,11,21,-37,101,82,65,37,78,-97,-77,26,44,72,-36,42,-33,-81,94,-70,-85,-38,62, 
  /* [9][0][][] */ -3,14,117,52,94,-79,-32,-102,48,58,0,76,-25,-66,-75,-11,21,16,-57,-55,2,101,-84,-83,127,-9,2,39,10,-39,-73,112,65,8,38,-13,-41,23,-29,-36,52,-53,57,-75,87,22,-87,59,60,8,-78,-38,84,-54,-49,91,77,-53,16,8,-86,119,74,-58,-32,15,107,44,-35,98,105,-81,14,92,-73,-73,-53,-91,-26,111,38,26,86,24,-28,-86,41,-8,90,37,-12,119,93,1,53,-25, 
  /* [10][0][][] */ -80,79,91,-81,-15,118,113,28,32,34,25,-74,102,87,-34,5,-34,84,-120,-57,-15,30,58,-69,19,55,-121,-120,-47,92,-100,-82,86,102,127,68,-42,9,-34,33,-35,122,-117,-38,-103,-62,-5,-60,-4,7,21,18,57,11,-61,-35,-96,-36,17,-49,-2,79,122,44,125,-77,-101,-32,27,-24,-94,-64,82,47,-81,109,-7,66,70,1,83,-15,64,105,-103,73,96,-22,42,11,-5,-72,-52,-42,-44,-68, 
  /* [11][0][][] */ 95,53,14,95,123,75,66,39,102,127,-43,117,-20,-51,52,-28,-13,-57,85,60,35,87,53,-67,-50,-63,4,84,102,16,43,10,-41,-34,55,74,-8,89,-11,-42,3,104,-41,40,-10,-27,-52,-52,90,122,100,72,-49,-36,41,28,-42,-31,16,-40,-71,112,103,32,64,96,-22,25,89,71,-43,-56,70,116,-38,70,-25,65,-18,106,-73,8,-60,-31,63,-47,37,-6,-69,17,48,-41,-66,-9,-34,-4, 
  /* [12][0][][] */ 7,66,-63,-8,88,1,-44,29,-86,53,-22,9,-45,5,41,-85,-109,-41,-36,-92,19,-18,11,92,-63,-60,94,-108,87,5,-44,111,-94,-78,-55,14,-9,-84,-25,35,110,33,-122,-47,-29,-92,-48,112,-52,-127,-77,99,39,-3,-93,78,-26,-66,61,62,52,112,-12,49,110,26,-54,111,46,95,38,65,82,110,-23,-12,-44,30,-127,-101,-67,103,39,8,-45,25,48,110,-104,-118,89,38,95,-27,22,70, 
  /* [13][0][][] */ 121,-58,108,102,88,103,87,68,79,-111,17,-25,110,80,68,-45,-119,-69,-80,22,78,-23,123,-45,-80,54,12,24,-92,-102,92,23,49,110,-17,34,-93,-26,26,79,-60,83,-49,12,-43,35,4,-28,44,97,-28,-117,-110,32,94,-70,-62,41,-30,-71,-16,119,-82,22,-70,-62,-89,98,-38,-9,97,5,-85,41,-85,-37,-116,68,89,-64,59,-89,107,31,-79,-94,101,122,-2,-48,-75,45,127,-62,75,-2, 
  /* [14][0][][] */ -57,-108,75,56,71,-40,-28,-121,-89,-47,57,73,-30,-91,-102,-97,-64,-71,3,14,-54,20,-14,49,-121,-83,-46,18,-125,-121,-90,29,92,-34,-45,-3,83,105,27,-122,-16,-123,27,77,56,-118,56,-96,102,29,76,42,84,-24,-27,2,-60,7,44,85,-17,-93,-38,60,-96,-24,64,-115,-100,-95,-100,83,-9,71,38,-85,44,-119,42,25,34,-28,-126,-45,-127,-101,-122,97,97,-3,76,-55,83,90,-24,55, 
  /* [15][0][][] */ 3,-27,-32,68,101,-74,68,-98,50,6,-69,13,102,7,-84,-127,98,17,-93,37,57,22,77,118,72,52,45,94,31,72,66,-92,5,9,-56,-5,-61,121,115,-81,23,120,-50,-18,30,-78,-41,-75,-6,-70,-20,42,-99,-112,-41,-2,82,36,-55,113,-51,-65,13,111,-25,106,-69,-7,-52,8,72,-66,2,-22,70,-109,11,61,111,74,-75,44,-100,-72,-116,-30,-111,47,96,78,-111,-32,59,125,-100,119, 
  /* [16][0][][] */ -56,2,105,-53,35,101,-50,44,54,43,-100,69,5,-40,-56,-53,100,75,64,57,115,82,-39,48,-41,70,-62,67,-104,6,50,4,-96,80,59,55,-41,50,-48,-57,19,-48,76,82,56,108,107,-16,-49,-114,17,100,-48,117,59,56,16,102,69,17,127,104,25,63,44,9,-32,102,41,102,-36,-12,39,96,54,91,-20,92,-101,-12,11,-71,67,23,10,102,109,3,76,15,-14,103,82,-38,-75,29, 
  /* [17][0][][] */ 31,-120,26,79,-40,-122,-76,-109,38,-94,83,47,107,58,-127,45,28,51,112,115,-105,-20,9,-61,35,64,-88,23,106,-60,-40,78,-38,-30,28,3,-57,100,-98,-38,-106,-49,-23,-17,3,7,84,-122,84,107,-20,22,-24,78,100,-85,-127,84,-90,-124,27,-103,73,98,-83,-84,39,-115,-119,-9,108,25,10,-127,-73,63,117,-57,38,-67,5,-23,-88,-104,-125,70,78,-42,15,75,-107,-106,-20,94,7,13, 
  /* [18][0][][] */ -95,119,124,-47,21,-124,-59,12,4,56,-67,1,-43,44,92,-25,44,8,79,-43,75,-8,50,-36,59,-93,9,120,45,4,16,56,44,-10,-88,-60,16,55,1,42,-7,16,-30,32,-48,30,32,23,36,8,62,17,-62,2,30,85,-45,10,24,-72,61,127,-14,29,-45,-64,8,47,53,-63,-65,87,-63,8,-62,-48,33,82,16,-25,-38,14,-37,-64,109,-19,65,57,-91,-41,-13,95,65,-64,23,-24, 
  /* [19][0][][] */ 23,27,80,39,78,-88,99,94,95,-69,29,-15,-99,32,-61,61,74,-112,120,56,-25,82,-60,12,102,-86,29,-70,-98,-127,-71,45,82,-88,37,-6,5,-75,-61,-106,43,-123,-88,8,-93,28,77,-100,-32,36,-43,44,-38,13,3,-14,24,101,-4,-30,56,-58,107,63,-75,-5,-29,0,-11,58,78,-55,-67,-126,-62,-85,-27,-120,14,111,58,-121,-34,80,-93,-9,6,-7,91,28,-4,65,-37,115,70,-47, 
  /* [20][0][][] */ -14,70,66,89,-73,109,18,56,11,24,-87,9,-7,85,43,-74,-39,-32,-54,-15,24,-46,-73,-66,76,-77,-101,48,36,32,-41,127,100,43,-13,66,54,-28,-17,-112,-79,-30,-89,-93,-27,-65,-70,108,60,-103,-100,55,57,109,65,-5,110,68,96,88,107,-48,-49,-24,-10,-62,-52,9,-71,-76,-56,87,-66,-87,46,17,127,82,107,105,90,2,83,-27,62,116,-19,78,25,95,29,79,21,40,-5,3, 
  /* [21][0][][] */ 86,64,62,-103,90,-67,68,11,-9,-63,-73,32,4,35,-52,-96,-102,-33,7,-8,103,-51,63,-82,39,-83,-36,63,12,10,-13,-26,-1,15,-91,-120,101,91,-118,-34,-9,5,24,-18,-100,-84,-81,85,-28,-67,-19,86,23,57,-89,24,-45,43,-67,109,51,-81,17,-18,72,27,-39,-66,-105,-5,54,75,24,-33,69,58,-103,-34,56,88,11,87,35,-73,20,-94,54,-81,-99,72,99,-127,-44,-57,65,-29, 
  /* [22][0][][] */ 30,-64,-84,-102,88,-60,111,53,-102,84,-81,-115,109,-121,-124,-89,36,84,-117,-69,87,-81,28,29,91,-4,-123,99,-65,-87,-74,-121,54,60,13,5,-1,-20,-66,-120,-2,-21,-6,94,51,-127,93,-29,-65,-88,-4,-22,-71,-98,-57,28,-20,-31,-30,-33,109,-85,-83,-126,-72,17,-122,-46,116,100,-32,-11,-70,5,61,-103,44,-59,64,85,108,-104,-84,-127,79,84,102,-36,-64,31,-72,57,18,16,-29,95, 
  /* [23][0][][] */ 81,-75,15,56,92,-124,9,-102,57,-67,96,81,27,-96,19,-38,96,-32,-117,96,112,-75,117,-32,-28,7,95,37,72,32,89,-47,-30,52,19,53,102,-1,-119,18,-103,7,11,-100,-71,-79,124,31,91,-114,-77,-59,80,-58,-59,110,-90,-3,98,57,-95,-88,-53,-1,19,35,-112,-99,63,-16,121,-63,8,-25,-36,-84,38,-14,106,104,-49,-39,40,-89,104,24,125,-26,-79,52,100,-13,127,-64,-22,87, 
  /* [24][0][][] */ -84,-45,-101,-84,-89,-77,-57,-87,49,127,82,42,85,64,-31,-119,-66,47,9,-20,98,-75,-47,-25,28,-32,74,56,109,82,0,-54,20,13,56,26,-39,-72,56,-23,-63,-89,95,9,16,-40,38,72,-71,-40,-45,34,66,52,81,-73,16,59,8,9,86,-4,59,94,-80,96,-40,-95,-90,48,-42,-18,-34,13,108,99,83,-63,-93,-99,-68,-100,-54,-118,7,71,-20,-86,34,-92,13,-73,-17,51,-92,28, 
  /* [25][0][][] */ -84,-11,-30,18,91,-65,-72,68,53,-78,-11,55,56,10,-67,13,-43,73,57,-110,63,107,19,-31,46,-48,-69,64,87,-100,59,122,94,-90,49,93,118,-39,-2,-8,-57,101,-72,36,127,57,81,57,-80,104,-58,2,62,-11,-43,37,-13,35,-46,93,111,82,50,48,10,92,15,-21,-74,11,-8,-104,62,-34,75,53,57,96,33,75,54,68,-43,65,-44,-29,-63,-79,-19,-14,110,62,-109,-13,-27,-76, 
  /* [26][0][][] */ 75,-127,-31,-30,-110,3,-14,-20,-121,-125,110,92,-54,-50,7,-21,119,31,-99,-64,17,71,102,13,37,71,13,46,12,15,-99,-4,-25,-65,-103,-108,-71,89,-60,115,-107,107,56,30,-82,76,-44,104,-23,30,22,106,5,-44,-6,-115,105,94,61,25,11,-106,72,-20,118,-24,-65,70,-96,83,94,103,88,-109,-88,4,51,-117,-105,-6,-31,90,91,-75,82,1,-49,14,-86,120,2,16,-55,122,56,93, 
  /* [27][0][][] */ 10,8,-70,-111,-122,-78,-77,-20,42,102,35,-114,-28,56,83,-32,65,-19,72,-90,-102,8,-33,-28,-90,44,-117,-6,64,26,-37,-12,72,70,-98,-90,-97,-71,-120,89,-102,15,26,15,101,23,69,105,94,69,59,-82,-95,-90,-10,-39,105,-28,-121,-84,-64,-65,-39,59,41,-52,-121,106,50,8,-127,4,60,-53,-10,-95,46,-72,88,107,86,-31,117,-62,-81,-90,-38,29,-54,-8,-40,-53,55,15,88,56, 
  /* [28][0][][] */ 90,34,112,59,-87,-32,-65,-48,-20,-66,76,100,-97,-62,39,115,116,127,-35,58,-20,46,-69,-41,-72,71,-53,-24,-42,-75,17,18,-67,35,90,94,59,-70,-13,37,120,56,-70,81,-64,10,33,69,49,-33,-80,-9,-52,41,87,49,71,-10,115,72,-10,-2,-76,10,92,92,8,78,-68,36,-80,-36,87,69,36,-61,-93,-26,-57,68,-52,-69,89,-21,82,-84,77,-58,-90,-40,3,-27,-39,53,-87,-52, 
  /* [29][0][][] */ 54,64,65,-54,-84,8,-123,8,106,-14,-93,-94,106,-110,-48,-42,-103,110,46,-73,-83,-34,61,6,-15,4,-44,-23,-107,-13,111,-3,59,5,-85,-47,-6,109,-10,99,51,113,-47,89,4,112,-56,-25,23,-7,62,-102,88,-98,117,47,-101,57,-33,118,-127,112,-102,-51,-59,-66,58,90,101,-89,38,-78,120,94,68,31,118,-61,-31,45,-6,-85,-14,-82,68,122,48,81,-43,102,79,85,-112,12,-6,63, 
  /* [30][0][][] */ 27,-74,-69,38,-106,25,-71,-16,121,-19,-3,-46,-108,17,59,11,-6,36,99,-110,44,-110,-122,13,-122,25,-78,124,-13,-116,-101,5,-90,-77,-127,-60,15,-21,-5,25,93,-84,-15,103,108,-48,107,62,-78,80,18,-112,101,-56,-14,107,-87,-59,-87,-60,-113,-6,-79,-30,-116,-96,-103,97,-65,117,50,-38,-96,110,41,-93,-63,-77,-82,-65,29,28,-112,-24,-117,27,-117,115,-40,-127,84,58,-37,-4,7,-75, 
  /* [31][0][][] */ 82,-75,32,127,48,51,-52,-84,-14,-19,-67,-76,90,-106,-41,101,-54,-77,44,39,51,31,-27,89,64,-100,30,35,-64,-67,41,91,19,21,-78,-2,81,-27,-59,-88,51,-60,-18,26,5,-47,-32,21,61,18,80,-28,-96,-43,-71,19,-102,90,5,98,-37,-1,71,-59,60,95,-38,-31,63,-78,-103,7,-77,-30,3,5,-54,-41,42,113,-66,-22,45,62,47,81,-69,13,12,-46,-72,-49,8,86,-5,-5, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017282222397625446, 0.001817220589146018, 0.0017415948677808046, 0.0019652270711958408, 0.001803654246032238, 0.0019957851618528366, 0.0017742386553436518, 0.0018133592093363404, 0.0019179056398570538, 0.0020487157162278891, 0.0017673593247309327, 0.0021865272428840399, 0.0017852627206593752, 0.0018044128082692623, 0.0018439509440213442, 0.0017991764470934868, 0.0018590079853311181, 0.001743113505654037, 0.0022770322393625975, 0.0017327660461887717, 0.0018388136522844434, 0.0019036821322515607, 0.0017563413130119443, 0.0017883979016914964, 0.0019395977724343538, 0.0020289013627916574, 0.0017201586160808802, 0.0017346272943541408, 0.0019963390659540892, 0.0017233883263543248, 0.001698664971627295, 0.0021439839620143175, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2310, 3269, 10382, 2738, -3495, -4231, 19606, 2645, 3041, -1513, 11163, -293, -9436, 2327, 14730, 7768, 13880, 6990, -4603, -6279, 5304, 32717, 21265, 21320, 1686, 890, 6339, 4442, 2703, -4739, 6931, -3699, -316, 6075, 74, 990, 11802, 5253, -2209, 4514, 10568, 6846, 5695, 13080, 4414, 4988, 2432, 10080, 4424, -7075, -7593, 524, -295, -1659, 2291, -34, 231, -1049, -3654, 12071, -1021, 1630, -1372, -2758, -4446, 9180, 24111, 1826, -2952, 878, 1769, 2669, 1990, -1286, 673, 13248, -443, 19364, 18157, -1143, 10342, 1975, -689, 1615, 15391, 9458, 4873, 1779, 6508, 4383, -489, -10780, 674, -1984, -1732, -2352, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00026671739760786295, 0.00047844569780863822, 0.00023075424542184919, 0.0003217878402210772, 0.00030627302476204932, 0.00034715933725237846, 0.00016928283730521798, 0.00026548118330538273, 0.0002012236654991284, 0.00042099735583178699, 0.00017723109340295196, 0.00021761712559964508, 0.00027105535264126956, 0.0012116336729377508, 0.00020966239389963448, 0.0001513978058937937, 0.00013520795619115233, 0.00020765555382240564, 0.00041763603803701699, 0.00026906761922873557, 0.00011715859727701172, 8.3353414083831012e-05, 0.00014431898307520896, 7.8317520092241466e-05, 0.00013362571189645678, 0.00055451726075261831, 0.00046849093632772565, 0.00024543181643821299, 0.00018893624655902386, 0.00041298026917502284, 0.00021306838607415557, 0.00020787359972018749, 0.00019227586744818836, 0.00019170211453456432, 0.00036801607348024845, 0.00025818863650783896, 0.00016226954176090658, 0.00020536068768706173, 0.00027202739147469401, 0.00039058533729985356, 0.0001193533098557964, 0.00038031837902963161, 0.0002681179903447628, 0.00017735526489559561, 0.00043641260708682239, 0.00020209362264722586, 0.0002127216721419245, 0.00021232174185570329, 0.0003055744746234268, 0.00018824666040018201, 0.00021024489251431078, 0.00016551715089008212, 0.00050353596452623606, 0.00018587807426229119, 0.00033916829852387309, 0.00031388251227326691, 0.00045544223394244909, 0.00024547276552766562, 0.00041471715667285025, 0.00015224290837068111, 0.00072165357414633036, 0.00040192771120928228, 0.00019666634034365416, 0.00028998262132517993, 0.00042249771649949253, 0.00020870253501925617, 9.0169960458297282e-05, 0.00022915052250027657, 0.00039684513467364013, 0.0003731271717697382, 0.00022392840764950961, 0.00018643723160494119, 0.0006736394134350121, 0.00032214427483268082, 0.00026689303922466934, 0.00016329550999216735, 0.00029375735903158784, 9.7081421699840575e-05, 0.00010063545778393745, 0.00018278429342899472, 0.00014179358549881727, 0.00016304476594086736, 0.00013909899280406535, 0.00014723229105584323, 0.00011990232451353222, 0.00025209426530636847, 0.00047908109263516963, 0.00016012199921533465, 0.00010936812759609893, 0.00046852193190716207, 0.00021401373669505119, 0.00018520420417189598, 0.00030576123390346766, 0.00051648810040205717, 0.00036994865513406694, 0.00017759909678716213, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -18,100,-3,-127,-48,-37,-25,-59,-13,7,-8,70,24,-45,-7,59, 
  /* [1][0][][] */ -37,10,-57,4,-25,-23,13,-74,57,59,-57,12,-5,-4,32,-127, 
  /* [2][0][][] */ 10,27,-45,28,33,8,-41,-66,127,-47,-6,20,-9,102,-57,34, 
  /* [3][0][][] */ 36,-82,12,-106,13,-20,-15,-1,127,7,90,55,-17,54,12,121, 
  /* [4][0][][] */ -75,70,16,42,16,-15,5,44,8,-3,19,-5,-127,-2,-10,27, 
  /* [5][0][][] */ 10,63,126,-2,20,80,-94,81,-69,91,-41,-46,41,-58,-127,33, 
  /* [6][0][][] */ 48,-53,127,-114,43,7,-57,103,-78,-90,44,-42,-4,83,-29,72, 
  /* [7][0][][] */ 30,121,-30,-52,82,17,4,-41,127,79,-22,26,19,-14,66,40, 
  /* [8][0][][] */ 19,-76,7,-90,22,-60,19,-72,22,52,65,-12,21,127,83,65, 
  /* [9][0][][] */ 14,-31,-1,127,37,-18,31,-48,-68,127,23,-31,-5,-72,-15,0, 
  /* [10][0][][] */ -1,35,-50,-127,2,-12,-6,36,34,-44,11,-20,-8,-35,4,39, 
  /* [11][0][][] */ 9,12,34,-21,87,-34,79,-53,-90,42,-7,25,-1,127,-75,-26, 
  /* [12][0][][] */ 74,-30,-109,-24,25,-53,21,7,14,39,-71,-49,-35,127,6,39, 
  /* [13][0][][] */ -13,9,-18,15,11,-127,-5,21,2,-7,2,-3,9,-16,5,7, 
  /* [14][0][][] */ 15,-33,90,-21,56,14,-127,-102,-11,-35,38,28,7,-55,-18,-45, 
  /* [15][0][][] */ -71,17,-31,-56,0,-9,127,42,-44,34,69,-27,11,65,70,9, 
  /* [16][0][][] */ 26,51,127,77,6,8,68,63,-90,11,-73,-14,9,5,4,-65, 
  /* [17][0][][] */ -35,-109,-12,26,-71,-26,-60,15,-127,-34,9,-49,-1,38,62,-34, 
  /* [18][0][][] */ 6,38,5,65,41,5,17,-2,69,45,-32,-30,14,127,48,20, 
  /* [19][0][][] */ 20,-29,52,9,94,12,-94,-53,-92,-65,-48,-127,-25,-47,-1,-35, 
  /* [20][0][][] */ 102,-17,-37,-41,12,-113,17,40,-46,23,-127,-35,30,2,19,12, 
  /* [21][0][][] */ 72,-8,57,-37,-25,2,26,72,6,-127,103,67,-12,111,72,80, 
  /* [22][0][][] */ -8,52,-35,127,-62,-5,92,81,-8,25,-32,36,6,13,30,10, 
  /* [23][0][][] */ 101,-6,118,-109,51,-23,-7,71,9,24,-26,-42,23,-24,-127,44, 
  /* [24][0][][] */ -127,37,4,-22,-4,109,23,-29,-3,17,108,-15,-87,16,61,-26, 
  /* [25][0][][] */ 31,20,14,19,12,6,68,-47,-7,-127,-18,-22,-8,-31,12,25, 
  /* [26][0][][] */ -40,-3,-5,13,-51,-6,-34,-30,-102,-38,5,-31,17,127,-32,47, 
  /* [27][0][][] */ -1,28,13,66,41,-33,-24,-30,54,11,-30,-5,3,127,-13,16, 
  /* [28][0][][] */ 9,59,56,63,127,-1,31,36,-83,-13,-39,-34,19,86,34,-41, 
  /* [29][0][][] */ 5,-11,18,12,26,-5,0,40,-26,-5,-25,-127,2,-19,-13,9, 
  /* [30][0][][] */ -28,73,-52,79,-40,-12,41,-127,-38,50,-11,2,53,38,77,74, 
  /* [31][0][][] */ -47,-27,-23,-69,-12,5,-55,-115,28,82,-4,-127,-40,-45,12,19, 
  /* [32][0][][] */ -127,-82,0,64,61,35,-25,16,-8,-40,-116,41,73,-2,59,77, 
  /* [33][0][][] */ -4,-37,-34,-13,-92,-18,-89,2,61,12,6,-58,36,-126,127,41, 
  /* [34][0][][] */ 51,-2,60,19,42,12,-42,78,-83,-45,60,16,15,-11,-12,127, 
  /* [35][0][][] */ -35,60,-81,13,-7,-29,35,-127,85,91,-93,-3,10,-11,78,-127, 
  /* [36][0][][] */ -18,64,15,127,57,14,127,11,-23,58,-39,-23,-39,12,-88,-52, 
  /* [37][0][][] */ 7,-23,21,-57,5,8,-53,-41,-78,-1,-5,-17,-6,-127,51,-41, 
  /* [38][0][][] */ 41,76,-3,-46,127,2,27,-40,103,73,-17,-6,10,-32,39,12, 
  /* [39][0][][] */ -28,75,-11,-127,-18,7,-36,35,50,-81,-32,-16,21,70,38,26, 
  /* [40][0][][] */ 6,-34,18,-102,2,8,-5,-25,-117,15,1,-33,-2,-127,90,-78, 
  /* [41][0][][] */ -3,-17,-41,-21,7,-37,21,-5,-34,14,-52,-14,-127,7,23,37, 
  /* [42][0][][] */ 127,83,-38,-27,-87,-62,-15,-64,10,12,87,-46,-58,58,117,-109, 
  /* [43][0][][] */ -31,114,-88,-14,51,-12,127,-52,64,69,-28,12,35,-110,-60,-65, 
  /* [44][0][][] */ -16,-16,3,-43,58,-5,-71,-127,-25,-12,6,-2,2,-39,65,-54, 
  /* [45][0][][] */ -22,35,-127,-43,16,-56,30,-82,17,16,14,-60,22,-14,57,-27, 
  /* [46][0][][] */ 14,8,-23,-98,-16,5,27,-29,-122,-30,2,19,-7,-127,76,-28, 
  /* [47][0][][] */ 22,57,21,-18,127,-21,-22,18,-55,38,0,23,9,2,117,-24, 
  /* [48][0][][] */ -127,-83,-14,40,68,21,0,-12,-6,-10,-107,33,54,4,67,43, 
  /* [49][0][][] */ 9,20,87,85,124,9,56,15,-107,-60,-24,-64,13,127,23,-68, 
  /* [50][0][][] */ 16,-35,-101,11,34,-127,-55,-17,-19,-15,10,-31,21,-20,-13,2, 
  /* [51][0][][] */ 15,45,42,13,26,1,2,35,-127,63,1,-124,10,-114,-25,91, 
  /* [52][0][][] */ -3,51,-2,55,40,8,21,44,74,92,-20,-49,37,127,62,16, 
  /* [53][0][][] */ 1,-43,-11,-17,-87,-14,-88,3,43,20,7,-63,37,-127,115,23, 
  /* [54][0][][] */ 42,-8,-53,16,127,86,-119,-56,-72,-16,-23,-65,6,-37,-20,-49, 
  /* [55][0][][] */ 37,-16,4,9,45,-32,-66,-127,-31,-65,-47,16,-12,-24,15,-15, 
  /* [56][0][][] */ -13,12,31,-24,-3,-30,-102,68,-14,127,-8,-19,28,3,-7,12, 
  /* [57][0][][] */ 6,27,-47,-26,-56,-61,120,85,-27,18,-25,2,26,34,127,2, 
  /* [58][0][][] */ 40,18,-127,28,74,78,-30,39,-100,-23,-8,-4,-32,15,-8,-8, 
  /* [59][0][][] */ -97,64,110,25,-69,-56,110,127,17,12,27,-22,10,6,63,-4, 
  /* [60][0][][] */ 14,2,-42,-7,19,-127,-20,8,-7,-23,-12,-21,32,-8,4,16, 
  /* [61][0][][] */ 18,-6,19,127,74,24,32,8,-94,-5,20,46,-9,26,36,-55, 
  /* [62][0][][] */ -41,127,24,-55,-32,-15,-73,67,-26,-65,-96,-63,-9,-90,-49,-30, 
  /* [63][0][][] */ -40,33,-21,127,-79,14,-72,-24,-62,-27,-30,-40,27,65,38,38, 
  /* [64][0][][] */ 6,9,-5,45,-3,11,-8,67,32,-3,-11,-40,-10,-127,58,-6, 
  /* [65][0][][] */ -28,-46,2,-127,37,-19,68,-37,-1,42,22,-96,-9,6,23,-55, 
  /* [66][0][][] */ 17,-41,66,-14,11,19,-13,97,24,-59,70,58,-11,127,14,56, 
  /* [67][0][][] */ 2,56,-21,-127,-16,-7,-56,35,87,-108,-35,-2,33,80,74,33, 
  /* [68][0][][] */ -38,40,127,17,7,12,1,-9,-35,-25,-12,-29,14,-15,98,-42, 
  /* [69][0][][] */ 127,88,-19,-11,-95,-40,-20,-31,11,9,91,-48,-57,68,78,-89, 
  /* [70][0][][] */ 47,16,-61,-16,-37,20,63,127,-31,86,-43,10,16,72,-18,27, 
  /* [71][0][][] */ 13,-4,-2,12,5,-81,-4,25,-40,23,-87,0,-127,-8,39,46, 
  /* [72][0][][] */ 7,11,-127,22,14,24,33,108,-39,-16,12,-11,19,7,-9,-4, 
  /* [73][0][][] */ -45,27,40,1,48,-39,-76,-127,19,-81,32,-13,17,-45,44,-13, 
  /* [74][0][][] */ 7,28,45,121,20,-13,-94,87,-75,26,-57,36,17,-127,31,-87, 
  /* [75][0][][] */ -3,32,-41,14,23,-9,15,-4,120,41,-22,-14,5,127,-51,6, 
  /* [76][0][][] */ -5,-11,1,21,6,-10,-16,62,12,-25,-18,-127,-8,-7,4,9, 
  /* [77][0][][] */ -1,40,-9,127,-48,10,89,113,2,46,-20,28,-8,-24,-19,-4, 
  /* [78][0][][] */ 20,11,47,-127,56,-46,-54,46,16,-42,-6,-52,19,121,13,60, 
  /* [79][0][][] */ -16,-97,-71,-52,-80,5,16,-87,127,18,38,68,11,51,46,-54, 
  /* [80][0][][] */ -23,15,117,-106,11,-55,33,-83,-59,33,-70,-104,43,127,98,-30, 
  /* [81][0][][] */ -39,47,-126,23,72,-127,-6,53,-7,-41,60,-6,28,0,9,0, 
  /* [82][0][][] */ 127,-4,-12,11,9,-123,-9,16,-13,-17,-96,2,111,11,2,28, 
  /* [83][0][][] */ -35,90,-127,-93,-41,-28,57,-121,75,44,-44,-120,19,62,62,112, 
  /* [84][0][][] */ -47,18,75,-27,9,-19,49,-127,-56,63,-11,-73,26,36,54,-16, 
  /* [85][0][][] */ -75,127,33,-121,-72,-37,-30,6,-60,2,-79,17,4,-13,-97,-20, 
  /* [86][0][][] */ -5,12,-36,-2,-27,-34,127,26,7,-34,-5,16,11,36,83,-17, 
  /* [87][0][][] */ -28,-39,-5,-127,4,-37,61,-21,-3,16,-8,-126,-13,4,15,-41, 
  /* [88][0][][] */ 106,-28,62,-18,32,-97,-15,35,-50,35,-127,-59,30,32,74,14, 
  /* [89][0][][] */ 20,-35,-37,-49,31,-6,-33,-6,-55,14,37,-77,127,-13,25,-52, 
  /* [90][0][][] */ -7,-47,41,-55,62,3,-64,91,64,-78,-30,-18,-13,121,14,-127, 
  /* [91][0][][] */ -53,-13,-30,-41,16,-19,-32,-110,10,60,-6,-127,-36,-10,7,11, 
  /* [92][0][][] */ -22,25,35,14,-3,-127,18,1,4,-27,1,-10,7,-19,21,7, 
  /* [93][0][][] */ 33,-23,127,-11,-46,56,24,-19,-25,29,-70,-26,-24,-3,22,2, 
  /* [94][0][][] */ 24,1,-21,-25,19,-14,-7,-9,-25,-23,18,-50,127,-12,36,-35, 
  /* [95][0][][] */ 127,105,-10,37,-104,-21,-56,-8,-30,-17,80,-53,-37,18,76,-72, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0008028217707760632, 0.0014401257503777742, 0.00069457234349101782, 0.00096858426695689559, 0.00092188449343666434, 0.0010449526598677039, 0.00050954282050952315, 0.00079910072963684797, 0.0006056849961169064, 0.0012672058073803782, 0.00053346715867519379, 0.00065502949291840196, 0.00081587902968749404, 0.0036470280028879642, 0.00063108565518632531, 0.0004557087377179414, 0.00040697716758586466, 0.0006250450387597084, 0.0012570881517603993, 0.00080989592242985964, 0.00035264840698800981, 0.00025089451810345054, 0.00043440141598694026, 0.00023573642829433084, 0.00040221455856226385, 0.0016691018827259541, 0.0014101618435233831, 0.00073875189991667867, 0.0005686997901648283, 0.0012430743081495166, 0.00064133771229535341, 0.00062570138834416866, 0.00057875207858160138, 0.0005770250572822988, 0.0011077316012233496, 0.00077715009683743119, 0.00048843276454135776, 0.00061813747743144631, 0.00081880489597097039, 0.0011756652966141701, 0.00035925451084040105, 0.001144761685281992, 0.00080703751882538199, 0.00053384091006591916, 0.0013136058114469051, 0.00060830358415842056, 0.00064029410714283586, 0.00063909031450748444, 0.00091978185810148716, 0.00056662410497665405, 0.00063283898634836078, 0.00049820810090750456, 0.0015156477456912398, 0.00055949465604498982, 0.0010208996245637536, 0.00094478914979845285, 0.0013708851765841246, 0.0007388752419501543, 0.0012483022874221206, 0.0004582524998113513, 0.0021721837110817432, 0.0012098059523850679, 0.00059196742950007319, 0.00087285024346783757, 0.0012717219069600105, 0.00062819645972922444, 0.00027141236932948232, 0.00068974512396380305, 0.0011945073492825031, 0.0011231161188334227, 0.00067402649438008666, 0.00056117773056030273, 0.002027660608291626, 0.00096965709235519171, 0.00080335041275247931, 0.00049152091378346086, 0.00088421226246282458, 0.00029221593285910785, 0.00030291362782008946, 0.00055018236162140965, 0.00042679996113292873, 0.00049076619325205684, 0.00041868918924592435, 0.00044317051651887596, 0.00036090705543756485, 0.00075880595250055194, 0.001442038337700069, 0.00048196865827776492, 0.00032919904333539307, 0.0014102552086114883, 0.00064418325200676918, 0.00055746629368513823, 0.00092034402769058943, 0.0015546338399872184, 0.0011135487584397197, 0.00053457485046237707, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8692, 25797, -20841, -8767, -18319, 3176, 28568, -48893, -4676, 16118, 23981, 11381, -12225, 13904, -7394, 15395, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00083950301632285118, 0.00039693631697446108, 0.00022515197633765638, 0.00022166874259710312, 0.00044855655869469047, 0.00037628223071806133, 0.00035361791378818452, 0.00029455745243467391, 0.00024743864196352661, 0.00025071619893424213, 0.00065333017846569419, 0.00065183988772332668, 0.00046797370305284858, 0.00022581726079806685, 0.00053630373440682888, 0.00054286833619698882, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -22,-11,5,-37,13,-13,-37,5,15,0,-10,0,-2,-14,-26,10,-1,4,-3,-6,12,-38,1,9,9,15,1,127,36,-32,45,-7,-4,2,11,2,-9,16,-44,-13,-9,11,2,43,5,11,16,3,27,4,-2,11,13,-20,-8,85,-1,10,-34,-32,-8,23,1,-28,-42,-61,-17,39,2,8,16,-17,-1,-33,-2,-24,-29,22,-2,9,-5,-23,21,27,1,-9,-4,-92,5,-11,11,-9,52,-39,-33,-11, 
  /* [1][0][][] */ 20,-79,-72,-72,127,-28,57,52,-45,-100,-65,-29,19,-19,-74,46,-72,-4,51,34,27,30,-22,-52,4,-4,-21,-84,38,-12,-69,34,-30,23,14,-25,-13,-5,-17,6,-27,46,-59,-8,-49,82,20,16,24,-77,27,-51,-30,32,41,27,-74,-27,-54,-48,11,-19,7,-49,-84,104,-13,-30,-12,-21,-33,30,66,-119,-34,1,41,-53,43,9,4,-27,25,10,-51,42,-15,21,43,-36,8,4,41,-5,11,127, 
  /* [2][0][][] */ 11,54,-97,1,95,106,41,64,16,-122,3,0,-24,-1,39,16,8,-9,-52,80,23,13,91,15,45,20,-4,-32,30,-5,48,-72,46,44,-34,59,-127,-92,44,45,1,-52,34,-38,21,-25,-4,80,-20,21,-40,4,91,2,-9,44,51,14,42,-1,32,29,26,-18,24,-8,-36,-3,-45,2,-5,-41,-61,-72,2,61,61,52,30,-11,37,-51,20,-18,-50,30,7,63,-24,17,-4,-26,-16,-20,-52,-9, 
  /* [3][0][][] */ 78,18,97,7,60,-21,23,-20,5,-71,26,-32,-20,49,57,98,24,14,30,19,122,-3,53,6,52,-25,-12,29,28,34,0,91,-105,33,20,17,2,-21,10,60,-78,-36,88,7,30,60,-59,-91,-55,-29,-80,56,13,-118,21,12,-104,85,73,47,26,100,-25,-47,42,69,-21,-52,39,-31,12,-77,36,-30,62,-10,18,-1,61,42,-25,-84,17,-20,-38,14,10,53,16,13,5,39,26,127,70,-55, 
  /* [4][0][][] */ 32,-3,17,-5,127,25,3,-19,-20,-46,-29,-30,-54,24,4,47,28,-65,-38,81,-22,7,28,-22,7,-7,14,-30,13,-7,66,-28,79,21,-25,27,54,17,19,5,-16,-4,-17,-27,2,-34,-17,-3,40,18,-29,18,9,-23,23,-30,35,-7,-26,35,7,51,52,25,39,49,-30,1,-42,-3,41,49,16,-56,-33,-15,17,44,68,-28,-3,-31,-4,-7,-49,3,45,54,-46,33,-4,-42,7,27,40,-32, 
  /* [5][0][][] */ 14,-10,-19,19,29,-26,44,-27,-6,-43,-9,8,-14,26,8,11,-4,4,15,7,27,12,-39,57,13,-10,19,-88,-3,31,21,32,-10,6,1,-45,36,27,7,2,-4,-7,30,-22,3,11,-1,-29,-11,-10,1,-5,4,-15,5,-56,7,21,-17,25,73,13,-6,39,-3,60,-6,74,3,82,20,19,16,21,0,72,-35,-2,10,6,-7,-5,-7,17,-4,6,-1,127,-5,28,-6,-17,3,27,-45,3, 
  /* [6][0][][] */ 24,-69,22,-46,-33,-4,26,39,-8,0,-12,-91,-28,-12,-37,35,21,-14,2,-15,-42,27,4,13,-15,2,-19,-18,-13,17,41,4,63,-1,69,-18,-25,-7,7,-117,-19,92,5,-22,15,-29,-14,16,-13,45,-20,65,-14,-68,-9,-9,-6,-66,-19,5,-20,52,49,-88,28,-21,10,-31,-8,4,127,-1,-29,6,-21,31,-85,-5,16,10,34,45,11,3,-20,-1,53,18,15,16,55,-39,-4,-22,-43,-18, 
  /* [7][0][][] */ 1,127,47,21,116,67,43,-48,-40,-38,36,1,-32,34,24,19,10,-43,7,34,46,-24,47,13,-14,10,13,3,17,-21,-2,13,55,-4,-50,-7,8,1,-4,103,-58,22,14,10,-17,-33,26,-7,-38,-40,34,1,15,-52,-48,44,51,4,-23,-15,-10,-39,-15,2,-41,67,-17,-97,-1,-31,-3,77,-27,-26,5,7,59,53,47,-21,-49,-45,2,-18,-26,60,-20,-9,-24,27,-41,-33,-60,-9,8,16, 
  /* [8][0][][] */ -3,6,51,11,-127,-43,41,-6,28,92,68,-6,-6,11,24,10,-45,13,8,-3,-48,-11,-126,62,23,-35,61,-16,9,18,10,58,69,-16,-1,6,-18,-12,2,18,13,-27,45,19,-39,7,43,-8,-102,22,20,30,-57,-32,-26,41,13,-54,-87,-6,13,-38,-22,-17,-2,92,-4,-59,17,-21,-50,-34,48,48,67,-7,-21,-37,-21,28,-94,16,-29,3,31,9,80,46,30,-35,42,51,8,-10,55,9, 
  /* [9][0][][] */ 21,-104,-25,34,87,113,-39,-46,51,-45,91,100,-32,21,101,-111,19,-24,-5,22,-47,-31,43,-23,-38,7,-6,27,-33,-3,2,-22,23,15,-115,42,0,14,-3,88,34,-71,-7,52,-17,-13,-75,-26,20,35,-25,-93,58,39,-12,-66,11,85,-3,-1,23,-61,-39,127,-91,-19,-5,-24,1,24,-52,-86,28,3,-9,25,55,-71,28,10,-3,-35,20,23,-9,-65,9,-2,1,-39,-64,47,-66,7,12,-50, 
  /* [10][0][][] */ -51,-24,-29,-53,-30,-18,66,-15,43,15,29,29,29,-17,-5,2,-15,24,-28,-22,-2,25,10,23,-8,-9,11,-127,29,-42,64,-35,-5,18,1,2,4,40,3,-19,17,-28,26,-44,16,5,31,10,-2,43,-25,-16,-32,-15,-1,-52,15,17,-13,-32,25,8,-3,5,-44,98,-15,-35,9,-31,5,-23,-21,-5,26,61,-17,45,-27,18,-19,-1,-1,35,16,-18,1,120,-4,-5,19,4,27,-40,58,-49, 
  /* [11][0][][] */ -82,20,-2,-7,24,-76,-23,8,-52,2,-4,11,29,21,-27,-6,55,2,-54,-39,12,-10,-12,-4,82,4,73,2,-17,25,-34,21,-11,26,-10,-2,-6,8,24,-5,-16,-5,3,12,90,29,73,7,52,40,-13,41,20,-63,32,1,-68,-18,-39,-37,-2,-13,8,13,-12,-23,22,-3,15,8,-3,27,-23,9,35,6,-19,80,-121,69,-47,-2,-74,-61,127,12,47,-10,6,44,-30,-62,-24,44,-22,-15, 
  /* [12][0][][] */ -3,0,-38,0,63,30,1,-21,-15,23,27,-2,4,-10,33,-7,-28,-10,4,-12,-13,-12,-30,41,-20,41,-24,90,-12,33,-31,6,-13,24,2,29,-19,-24,9,22,-5,-14,-2,-3,-16,-3,15,15,2,-12,-4,-23,-21,9,-11,-17,-3,-9,21,24,-10,-23,-2,41,41,-71,14,54,-27,-127,-10,46,-1,-1,9,83,11,-18,-5,-4,-10,26,-38,-1,11,-15,-3,-42,-3,19,6,6,-43,32,-13,26, 
  /* [13][0][][] */ -80,67,-4,-15,-57,-13,-12,29,-59,-12,39,9,94,2,-35,9,-23,19,-39,-20,21,-14,42,-49,80,37,-5,-6,20,-29,-49,-89,-98,-41,10,-10,-25,14,27,-34,-33,85,-7,20,50,-1,-17,-1,59,-24,42,73,74,-72,96,-10,-34,48,40,2,7,28,-4,11,-11,-16,6,10,8,21,20,-127,22,-27,-65,7,46,39,-53,-46,86,-15,-6,-18,42,-35,100,0,-25,-2,-15,33,37,-56,-37,8, 
  /* [14][0][][] */ -27,29,-10,-57,29,-10,-7,39,-97,6,16,5,-16,-66,-80,-21,-89,-19,63,1,32,-12,8,-95,-34,22,-53,-25,18,-19,-13,-22,-67,-34,29,1,-30,-4,0,1,9,79,-73,-3,-51,15,16,7,127,-26,37,-17,26,51,-100,21,-32,26,-101,8,2,25,48,22,2,33,6,9,-54,21,53,31,42,-15,-17,15,54,-73,-32,-90,14,-25,5,44,37,-68,-33,4,-38,29,39,58,21,25,7,-5, 
  /* [15][0][][] */ -43,-79,-9,-37,12,18,-9,-64,-39,17,-13,-21,42,-11,37,-20,-90,-13,-12,14,-9,9,-64,-37,-13,3,-4,17,-23,-13,50,-92,-4,26,24,-6,-19,17,-91,-3,16,-68,-5,23,-24,-55,52,39,41,3,-1,-127,-4,34,-10,43,26,-8,-22,32,2,4,44,-1,7,-12,-2,-12,-21,27,9,43,-41,3,-6,-41,-30,-10,7,12,-2,37,0,63,-20,-35,-39,-32,-37,50,31,74,-42,-5,-15,-1, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.035678878426551819, 0.016869792714715004, 0.009568958543241024, 0.0094209210947155952, 0.01906365342438221, 0.015991995111107826, 0.015028760768473148, 0.012518690899014473, 0.010516141541302204, 0.010655438527464867, 0.027766531333327293, 0.027703195810317993, 0.019888881593942642, 0.0095972334966063499, 0.022792909294366837, 0.023071903735399246, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 25960, 60973, -1457, 58, 14816, -5149, 131, -382, 6455, 10954, -5136, -408, 169, 3813, 4835, -9680, -4339, -629, -480, 14816, -11776, 16812, -2181, 8844, 27999, 87, -6851, 18516, 14773, -19737, 2138, 21278, 24557, -11375, 1959, 273, -123, -775, 3918, -6181, -5991, -668, -8369, -207, 29591, -1824, 12781, -372, -14831, 1682, 106, 636, -2279, 22737, -3406, 15316, 17544, 197, 34818, -33, -9446, -846, 1384, -264, -1296, 14328, -1781, -3978, -3905, 3228, 844, -3393, 1101, 92, -1677, -6117, -754, -2250, 41166, -10123, -6194, -11933, -585, 10, 61202, -12736, -10460, -27205, -8166, 9258, -2093, 36262, -158, -2545, -2766, 437, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 8.5384686826728284e-05, 9.334505011793226e-05, 0.0001143474510172382, 0.00020649912767112255, 0.0002368240529904142, 0.00014767322863917798, 5.0799320888472721e-05, 9.315432544099167e-05, 0.00025686054141260684, 0.00022033751884009689, 0.00021754563204012811, 0.00011171861115144566, 0.0002641919709276408, 0.00019341992447152734, 0.00036496858228929341, 0.00014730489056091756, 0.00019789842190220952, 0.00016827664512675256, 0.0001605945872142911, 7.4441704782657325e-05, 6.617219332838431e-05, 4.4083626562496647e-05, 0.00013358186697587371, 8.5892635979689658e-05, 8.8450768089387566e-05, 8.5491898062173277e-05, 0.00014892210310790688, 0.00016383471665903926, 7.3035953391809016e-05, 0.00046754378126934171, 0.00037174212047830224, 0.00025829701917245984, 0.00012470735237002373, 0.00013488164404407144, 0.00022591516608372331, 0.00044099873048253357, 0.00041323152254335582, 0.00017550522170495242, 0.00024071798543445766, 0.0001378329616272822, 0.00019752648950088769, 0.00021917479170951992, 0.00036289964918978512, 9.7015203209593892e-05, 0.00040048136725090444, 8.3465733041521162e-05, 0.00010858481982722878, 0.00029899532091803849, 0.00064830761402845383, 0.00010744832252385095, 0.00043863055179826915, 0.0001685573224676773, 0.00022335830726660788, 0.00012199902994325384, 0.0002520535490475595, 0.0001200184560730122, 0.00015370076289400458, 0.0004216061788611114, 4.7779412852833048e-05, 0.00015125799109227955, 0.00027938114362768829, 0.00026288669323548675, 0.00010503712837817147, 0.00015229279233608395, 0.00014163610467221588, 0.00012169132241979241, 0.00024877084069885314, 0.00056983577087521553, 0.0001808986853575334, 0.00013083565863780677, 0.00018262129742652178, 0.0001000783231575042, 0.00029675036785192788, 0.00012396741658449173, 0.00044297371641732752, 0.00030083439196459949, 0.00013018983008805662, 9.302137914346531e-05, 6.2407067161984742e-05, 0.00011790859571192414, 0.00023116265947464854, 0.00021161763288546354, 0.00014490344619844109, 0.00026730383979156613, 5.8448622439755127e-05, 0.00011897879448952153, 7.9233854194171727e-05, 0.00048499100375920534, 0.00022057771275285631, 0.00011637225543381646, 0.00035697768907994032, 3.0601459002355114e-05, 0.00016003561904653907, 0.00010318587737856433, 0.00032762048067525029, 0.0003039906732738018, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-10,127,22,70,75,-58,-15,-17,-15,-4,-28,2,37,1,-7,-43,26,21,17,-127,127,5,-79,4,48,-28,-127,-127,37,25,12,27,60,-19,-28,-11,31,-7,-13,28,-106,67,25,-70,37,44,-18,53,-23,18,3,-6,15,49,-90,-50,-58,-19,-10,-1,9,39,67,-25,76,13,-8,15,19,127,23,24,25,-2,-10,18,127,-7,-13,14,-27,20,124,20,-74,-17,-1,-31,-15,-38,2,-24,-15,28, 127,-127,77,108,-43,127,39,-118,68,5,-17,127,127,-98,-13,15,12,127,127,-113,127,-77,82,67,-127,-121,-66,-34,-56,46,-60,-20,-88,53,-127,-85,-41,-15,-51,63,-1,127,127,76,-51,-115,-114,-51,-15,-127,44,83,64,-30,44,81,-48,42,-78,-112,-43,-41,-62,67,73,-60,27,29,-81,32,-18,92,118,127,13,18,1,59,-34,52,65,127,127,-22,-8,74,-108,127,-124,-98,5,-127,-90,-127,-38,109, -74,-12,31,-83,15,-20,61,-7,77,-34,-29,19,-17,-3,-8,-11,-8,-16,7,-5,-24,-100,31,0,-124,96,7,-55,118,50,-15,11,1,15,13,-30,-7,33,20,13,24,12,-116,61,18,-18,36,12,-14,12,-15,5,-9,2,-3,21,-66,7,-33,53,3,40,32,0,-7,-39,-31,22,9,1,-4,37,10,-26,-5,3,-11,-6,-87,1,-20,-24,-17,3,-108,9,-31,-23,-51,25,-25,-30,29,-25,-15,2, 
  /* [0][1][][] */ -63,-74,72,-38,-49,88,16,127,-52,-20,-2,-119,27,-115,78,31,-2,-59,-16,89,52,-72,48,49,-100,-17,127,-23,-24,64,120,-103,-127,91,-85,-58,-34,31,-29,97,-48,-25,-5,46,-47,127,-22,65,16,97,18,-3,16,-54,27,32,127,121,-70,-86,127,-34,-36,127,71,-38,-14,-2,127,38,127,96,-40,101,-6,12,15,13,-30,9,-42,124,-78,111,1,34,-53,30,79,-127,-32,-6,127,-68,-23,2, 68,127,57,-116,127,81,87,38,-127,127,127,-39,-64,-127,-127,127,127,-63,-124,-51,105,91,-122,127,-114,-95,-42,127,-127,109,-127,-127,-88,127,107,127,127,-127,-105,127,-65,-96,109,-127,-127,-37,-127,-127,127,-112,84,42,127,127,127,-127,99,-127,-127,127,20,-78,-127,-99,-127,127,-127,127,-126,-127,-108,-82,-127,-80,127,127,-127,127,-79,127,127,31,-42,-127,58,127,93,46,127,13,127,0,-67,37,127,-127, -53,-13,-50,38,-57,-90,34,-27,16,-33,-30,95,3,95,14,11,-4,64,-6,127,0,-87,-41,6,-79,110,-69,-20,-69,-17,16,-61,-70,37,4,-19,-26,44,-67,45,127,-4,-38,30,-39,-61,17,44,8,120,-11,6,-37,-71,4,19,96,3,0,22,-34,127,92,-50,-43,12,37,-11,-79,120,-19,-84,-1,-55,-17,-20,27,15,77,-37,-69,-43,57,15,-46,-16,70,22,16,62,-43,24,-43,98,-27,-4, 
  /* [0][2][][] */ -67,2,-4,-22,13,-48,66,26,55,-29,-37,-3,19,20,-26,1,-5,65,7,2,-56,-84,2,-7,-22,-57,36,-69,89,39,24,27,16,-9,-9,-48,-7,35,-3,0,-16,-6,-67,103,5,31,13,36,-16,-33,8,-21,21,-1,8,15,-68,24,-14,12,16,0,-22,-6,-1,-46,-46,14,-34,13,25,28,14,-20,26,4,18,6,-78,-12,-8,-8,17,15,-127,5,12,-44,-58,-51,-28,-51,9,59,-19,-8, 122,34,-127,-36,-73,-28,37,30,-65,-28,-21,-109,-75,114,-13,37,5,-51,-9,-125,93,-50,-39,1,-117,127,-50,20,-36,-21,-9,-3,-62,15,29,4,-22,-28,127,51,11,-15,68,-36,-38,76,-66,-43,-34,-7,-127,-127,-48,-27,1,37,-62,-7,10,38,-6,-19,9,-47,-55,33,65,-22,116,108,-25,-71,12,-57,2,4,100,4,52,22,12,-96,-51,1,1,8,127,40,-62,37,-20,-115,42,80,-10,26, -53,13,-17,27,15,-63,-127,2,-11,-7,-17,5,16,-25,20,-1,-6,-17,5,17,-51,-72,14,2,16,-95,22,4,-49,-39,-5,18,42,-20,-5,-26,-35,3,42,-41,23,-3,-48,-33,4,65,24,16,-9,-4,8,-10,17,6,-4,-7,-59,-12,1,-39,-10,11,85,-10,34,-1,-2,27,0,6,-5,20,-17,16,-1,14,37,1,76,-12,4,-9,-7,-17,72,0,42,-39,61,38,-17,-53,-7,2,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0036288490518927574, 0.0039671645499765873, 0.0048597664572298527, 0.0087762130424380302, 0.010065021924674511, 0.0062761120498180389, 0.0021589710377156734, 0.0039590587839484215, 0.010916572995483875, 0.0093643441796302795, 0.0092456890270113945, 0.0047480408102273941, 0.011228159070014954, 0.0082203466445207596, 0.01551116444170475, 0.0062604579143226147, 0.0084106829017400742, 0.0071517573669552803, 0.0068252701312303543, 0.003163772402331233, 0.0028123180381953716, 0.0018735540797933936, 0.0056772292591631413, 0.0036504371091723442, 0.0037591576110571623, 0.0036334055475890636, 0.0063291890546679497, 0.0069629750214517117, 0.0031040278263390064, 0.019870610907673836, 0.015799039974808693, 0.010977623052895069, 0.0053000622428953648, 0.0057324697263538837, 0.0096013946458697319, 0.018742445856332779, 0.017562339082360268, 0.0074589718133211136, 0.010230514220893383, 0.0058579007163643837, 0.0083948755636811256, 0.0093149282038211823, 0.015423234552145004, 0.0041231461800634861, 0.017020458355545998, 0.0035472935996949673, 0.0046148546971380711, 0.012707301415503025, 0.027553072199225426, 0.0045665535144507885, 0.018641797825694084, 0.0071636862121522427, 0.0094927279278635979, 0.0051849586889147758, 0.010712276212871075, 0.005100784357637167, 0.0065322821028530598, 0.017918262630701065, 0.002030625008046627, 0.0064284643158316612, 0.01187369879335165, 0.011172684840857983, 0.0044640777632594109, 0.0064724436961114407, 0.0060195340774953365, 0.0051718810573220253, 0.010572760365903378, 0.024218019098043442, 0.0076881940476596355, 0.0055605154484510422, 0.007761404849588871, 0.0042533287778496742, 0.012611890211701393, 0.0052686152048408985, 0.018826382234692574, 0.012785461731255054, 0.0055330679751932621, 0.0039534084498882294, 0.002652300288900733, 0.0050111152231693268, 0.0098244128748774529, 0.0089937495067715645, 0.0061583966016769409, 0.011360412463545799, 0.0024840664118528366, 0.0050565986894071102, 0.0033674386795610189, 0.020612116903066635, 0.0093745524063706398, 0.0049458206631243229, 0.015171552076935768, 0.0013005619402974844, 0.0068015139549970627, 0.0043853996321558952, 0.013923870399594307, 0.012919602915644646, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1869, 8918, 17486, 27730, 18623, -3632, -1735, 5720, 28735, -4513, 12680, 4621, 10988, 11032, 31452, 2027, 2471, 10908, 18503, 6326, -159, 544, 14069, -1261, 5967, 37, 12836, 6766, 7438, 40329, 47061, 19255, 10417, -641, 12028, 2834, 1645, 3491, 20254, -836, 14754, 10328, 30704, -4257, 26642, 9667, 7199, 16518, 70820, 13916, -518, 9844, -3859, -125, -3082, 7062, -652, 15068, 6287, 10491, 6705, 18603, 8244, 5875, 13305, 10170, 5862, -9023, 7995, -3319, 6083, 11794, 22281, 6444, -5659, -5275, 6582, 346, 2688, -1792, 18344, 15733, 5755, 21922, 3735, 493, 11530, 67980, 12254, 10399, 7813, -319, 6800, 8774, 4290, 11139, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00022080670169088989, 0.00016563790268264711, 0.00010820561146829277, 8.2384955021552742e-05, 0.00016175203199964017, 0.00028373196255415678, 0.00047265877947211266, 0.00028118310729041696, 8.0479454481974244e-05, 0.00029948228620924056, 0.00021378931705839932, 0.00019275074009783566, 0.0001134329431806691, 0.00020745924848597497, 7.5392803410068154e-05, 0.00028864786145277321, 0.00017682927136775106, 0.00011359932250343263, 0.0001210275586345233, 0.00018623743380885571, 0.00033202971098944545, 0.00043643356184475124, 0.00014187308261170983, 0.00049350957851856947, 0.00043833479867316782, 0.00021924666361883283, 0.00017309655959252268, 0.00021089805522933602, 0.00022126236581243575, 8.7555315985810012e-05, 5.9701040299842134e-05, 0.0001282210141653195, 0.00015818674000911415, 0.00033773947507143021, 0.00016585513367317617, 0.00020438828505575657, 0.00030716074979864061, 0.00042383820982649922, 0.00013377645518630743, 0.00072184298187494278, 0.00012925006740260869, 0.00015381912817247212, 8.7484593677800149e-05, 0.00025064824149012566, 0.00012113017874071375, 0.00016113188758026809, 0.00024262478109449148, 0.00016237069212365896, 5.8562811318552122e-05, 0.00014987270697019994, 0.0002212809631600976, 0.00017572213255334646, 0.0002712405112106353, 0.0002630494418554008, 0.00033589696977287531, 0.00015605489898007363, 0.00018019530398305506, 0.0001246546016773209, 0.00032446099794469774, 0.00014053788618184626, 0.00023128613247536123, 7.662911229999736e-05, 0.00017604122695047408, 0.00016913577564992011, 0.00018676402396522462, 0.0001897163747344166, 0.00021836835367139429, 0.00014807403204031289, 0.00021088877110742033, 0.00022026695660315454, 0.00018715120677370578, 0.00013293577649164945, 9.3359354650601745e-05, 0.00015994257410056889, 0.00027642483473755419, 0.00026093501946888864, 0.00025152866146527231, 0.0003152908175252378, 0.00028976370231248438, 0.00022012181580066681, 0.00011024044943042099, 0.00010555624612607062, 0.00015185422671493143, 8.815312321530655e-05, 0.0003025120822712779, 0.00021540786838158965, 0.00020206054614391178, 5.6712618970777839e-05, 0.00011612795060500503, 0.00021999025193508714, 0.00016167316061910242, 0.00024068354105111212, 0.00021338379883673042, 0.0001793427363736555, 0.00026411653379909694, 0.00014909805031493306, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 10,81,-27,70,8,17,0,2,24,13,-64,107,5,-127,55,-112, 
  /* [1][0][][] */ 17,68,-19,-35,19,-28,127,-105,9,75,-7,-9,-1,-42,44,22, 
  /* [2][0][][] */ -127,26,-23,-7,13,3,55,107,-56,76,101,-11,-90,15,20,-75, 
  /* [3][0][][] */ -96,42,41,60,-35,51,90,107,0,95,-127,-4,54,-95,-104,-85, 
  /* [4][0][][] */ 16,0,27,73,-20,76,-8,40,10,-22,-2,-5,14,-7,-127,-32, 
  /* [5][0][][] */ 0,-46,83,-12,22,-30,-19,31,-69,87,-51,-127,5,19,-59,-36, 
  /* [6][0][][] */ 6,9,20,-22,31,58,-58,-73,-3,8,58,-14,127,-28,-8,-28, 
  /* [7][0][][] */ 28,-2,127,1,-23,-36,13,-15,-92,41,-81,-58,7,-9,29,-38, 
  /* [8][0][][] */ 21,-2,60,61,-44,88,25,25,49,35,2,-97,-44,-8,-127,-86, 
  /* [9][0][][] */ 20,-127,74,54,7,-27,0,37,103,19,75,2,-12,-11,-118,-33, 
  /* [10][0][][] */ -44,-65,-24,-36,-127,-14,8,41,71,100,60,-27,-35,33,104,-7, 
  /* [11][0][][] */ 30,-39,16,-82,20,-18,-112,-127,-64,46,-7,-46,21,-11,49,-76, 
  /* [12][0][][] */ 5,38,-21,-73,-52,-43,-111,0,-48,-90,-26,36,52,126,127,81, 
  /* [13][0][][] */ -31,-105,-75,43,-5,-66,8,-17,71,16,-2,4,15,34,127,38, 
  /* [14][0][][] */ 0,-68,52,25,34,26,11,127,28,48,9,-35,23,48,-58,118, 
  /* [15][0][][] */ 17,-33,4,71,19,3,99,2,10,-127,20,-30,-1,-16,-15,-43, 
  /* [16][0][][] */ 41,-87,-48,27,11,20,39,-83,127,56,112,6,2,114,79,126, 
  /* [17][0][][] */ -70,-59,35,113,114,81,13,-37,127,-30,-12,-23,24,62,-98,28, 
  /* [18][0][][] */ -2,35,10,3,-108,-13,-23,56,-73,-47,-23,-46,12,-127,71,20, 
  /* [19][0][][] */ 73,-111,48,-65,119,46,-110,112,117,-92,55,9,-23,73,41,127, 
  /* [20][0][][] */ 42,-29,73,-70,-6,13,-31,53,-20,-43,110,-15,15,11,-28,127, 
  /* [21][0][][] */ -59,-23,1,-33,23,9,-88,-57,-30,53,2,18,-127,-7,30,-10, 
  /* [22][0][][] */ 17,-35,26,-23,23,-71,11,-22,-127,39,-8,-51,-6,-23,70,-31, 
  /* [23][0][][] */ 16,11,18,-7,4,14,-20,9,-8,-3,48,-11,127,-5,5,-36, 
  /* [24][0][][] */ -24,-2,18,-59,-13,22,52,2,-45,-3,14,-127,2,-109,42,-10, 
  /* [25][0][][] */ -127,21,-38,-22,44,-20,-33,-93,0,33,-4,-50,-103,-51,32,-33, 
  /* [26][0][][] */ 37,-6,59,-97,110,-16,4,8,127,-52,36,-20,-14,93,-6,59, 
  /* [27][0][][] */ 99,-35,17,-29,-35,-43,6,-28,-16,31,-127,23,12,-20,4,32, 
  /* [28][0][][] */ -104,-16,-127,-78,52,-12,83,-36,8,68,-60,13,39,-6,-36,53, 
  /* [29][0][][] */ -53,-27,-7,127,-16,17,3,-31,-8,-4,-80,56,21,-64,23,-34, 
  /* [30][0][][] */ 75,-12,127,-14,43,41,-28,58,-5,-68,49,-37,-25,22,-79,70, 
  /* [31][0][][] */ 8,-96,7,-48,1,-56,24,-48,1,43,122,24,-16,108,79,127, 
  /* [32][0][][] */ -12,74,-32,43,-127,25,-82,-49,-55,-41,-3,51,9,59,28,59, 
  /* [33][0][][] */ 39,-19,20,127,13,-7,22,-50,-117,55,63,-27,2,4,20,125, 
  /* [34][0][][] */ 23,-30,43,8,89,-53,-127,-22,-76,110,-44,15,-30,0,18,-7, 
  /* [35][0][][] */ 86,19,-8,-27,40,-127,-20,-14,-32,12,-85,4,55,14,12,32, 
  /* [36][0][][] */ 23,0,-127,14,51,6,-37,19,-36,-21,-8,-18,-1,14,-28,13, 
  /* [37][0][][] */ 9,10,127,-9,-58,23,17,-47,-3,25,-42,36,18,-2,28,2, 
  /* [38][0][][] */ -127,25,-12,10,17,77,19,-20,16,-15,121,-41,-17,1,-6,-15, 
  /* [39][0][][] */ -12,-8,20,35,31,-18,-127,42,12,40,-12,-46,-3,-27,2,-3, 
  /* [40][0][][] */ 0,73,-22,127,20,49,72,43,-63,-23,-14,67,22,43,-58,-40, 
  /* [41][0][][] */ 26,29,-42,-32,-47,-10,127,103,-39,68,-25,-4,8,67,38,7, 
  /* [42][0][][] */ -7,-10,-43,-35,3,12,-47,68,82,-112,127,31,-4,39,-42,58, 
  /* [43][0][][] */ -63,1,43,-19,39,9,-92,-82,-35,25,-9,-20,-127,-3,30,-5, 
  /* [44][0][][] */ 7,2,0,2,0,-15,1,-35,127,-7,14,47,21,79,2,35, 
  /* [45][0][][] */ -85,-118,5,-114,50,-9,-23,55,10,-56,-36,-49,46,106,-62,127, 
  /* [46][0][][] */ -55,20,-31,84,-87,-16,6,-84,-127,51,-36,-9,7,32,13,-28, 
  /* [47][0][][] */ -47,1,-99,127,-6,61,-13,-30,-9,50,69,55,-37,-22,28,-25, 
  /* [48][0][][] */ -7,10,45,-127,39,-23,-33,-20,-87,16,10,-21,-20,54,91,52, 
  /* [49][0][][] */ 24,30,58,127,20,23,-66,-6,27,-60,-89,5,-19,-17,-101,-105, 
  /* [50][0][][] */ 21,47,14,-127,51,5,-29,55,101,-29,-41,-4,11,-47,3,0, 
  /* [51][0][][] */ 14,-28,21,4,41,-12,-57,-127,22,-80,9,14,-23,-4,1,-5, 
  /* [52][0][][] */ 33,22,13,17,42,-22,-83,105,-99,127,-62,-62,86,112,-2,-52, 
  /* [53][0][][] */ 1,75,10,-72,-31,6,27,-29,-59,-37,-51,47,16,-127,-80,-25, 
  /* [54][0][][] */ -4,6,13,32,41,-25,9,-29,0,29,-12,-21,-10,127,-38,-7, 
  /* [55][0][][] */ -98,127,80,-29,42,-15,-28,12,-47,6,80,-17,-10,-17,91,3, 
  /* [56][0][][] */ 50,-1,13,-127,93,4,-9,29,47,-54,39,123,-33,8,96,61, 
  /* [57][0][][] */ -12,3,27,62,-20,7,33,127,-6,6,4,-35,-2,42,1,21, 
  /* [58][0][][] */ 10,127,3,-106,16,43,-9,16,106,-7,3,92,-4,-76,27,47, 
  /* [59][0][][] */ 41,69,55,-114,-48,-13,16,-17,19,36,33,-64,-22,-127,-81,31, 
  /* [60][0][][] */ 46,12,114,-71,-61,127,56,-38,-8,45,-26,-18,33,-8,48,11, 
  /* [61][0][][] */ -19,39,-35,-35,-45,20,112,127,-16,79,5,0,11,69,17,-41, 
  /* [62][0][][] */ -31,-13,-12,4,-69,38,-61,6,-34,-17,-12,-42,4,-127,72,4, 
  /* [63][0][][] */ 6,-47,8,-78,50,-8,-108,-127,-63,112,-16,6,58,3,24,-46, 
  /* [64][0][][] */ -20,-9,42,53,75,-5,-31,-127,20,-115,-4,-57,-1,-25,-13,-1, 
  /* [65][0][][] */ -127,25,36,-73,21,61,44,-41,-96,16,48,-10,16,10,-20,-24, 
  /* [66][0][][] */ 58,2,88,14,-56,8,-21,65,-67,-23,50,-107,-8,56,-127,-15, 
  /* [67][0][][] */ 41,-44,-36,74,56,-40,-71,-100,49,-127,-85,-38,-94,14,-90,16, 
  /* [68][0][][] */ 19,-35,-69,47,-70,-99,-3,-59,-38,-10,35,-80,-22,45,127,-28, 
  /* [69][0][][] */ -26,37,-49,50,-4,-102,33,80,43,19,62,-27,127,46,-12,-3, 
  /* [70][0][][] */ 14,16,-36,-45,-52,6,127,97,-31,66,-29,2,11,46,10,-3, 
  /* [71][0][][] */ 15,-4,-13,-57,43,1,1,62,-44,-60,-13,-16,18,-127,62,11, 
  /* [72][0][][] */ 22,41,-12,31,31,-49,-38,-127,19,54,-43,23,39,73,53,67, 
  /* [73][0][][] */ -43,-127,-18,-45,-72,-18,34,-27,-26,21,-44,-20,15,-43,60,-10, 
  /* [74][0][][] */ -34,41,63,109,-4,-6,-127,108,40,-30,-33,-33,5,10,-12,6, 
  /* [75][0][][] */ -55,57,-49,-15,-40,71,78,127,-17,23,-1,-42,-113,71,28,38, 
  /* [76][0][][] */ 22,-13,-47,-1,37,-86,-127,-101,-7,-24,11,8,44,9,71,-15, 
  /* [77][0][][] */ -43,5,-40,-19,-58,-2,-19,-53,127,15,-61,10,-12,48,33,-93, 
  /* [78][0][][] */ -80,-127,-10,89,74,53,-21,45,1,-72,-113,59,66,-13,74,67, 
  /* [79][0][][] */ 33,-7,37,-52,127,13,52,21,88,28,7,37,-10,-19,18,-34, 
  /* [80][0][][] */ 12,-24,63,-117,-13,-58,5,29,-68,-48,-21,-48,12,127,-42,22, 
  /* [81][0][][] */ 23,-1,33,50,5,55,-4,-10,15,1,4,-35,-7,37,-127,1, 
  /* [82][0][][] */ -70,-23,20,-127,-12,-36,3,-40,-13,-43,-42,-107,0,-99,-83,40, 
  /* [83][0][][] */ -8,30,-52,-82,-62,25,-14,40,-88,-4,21,-88,5,-127,3,43, 
  /* [84][0][][] */ 127,21,33,61,-49,1,-52,34,-5,-23,108,6,-65,25,85,-80, 
  /* [85][0][][] */ -8,-28,23,-25,51,0,-41,125,-92,-105,-71,-38,-29,88,81,-127, 
  /* [86][0][][] */ 21,11,3,-17,-57,61,-38,48,-88,-70,35,-49,1,-127,-20,43, 
  /* [87][0][][] */ 127,-21,13,-23,-51,-46,9,3,2,23,-101,11,43,-13,11,47, 
  /* [88][0][][] */ 42,86,-10,-19,-15,-21,-27,-12,116,25,40,38,-40,-37,127,-101, 
  /* [89][0][][] */ 64,85,-78,-21,-28,-33,13,-49,42,31,19,-31,-35,12,-33,-127, 
  /* [90][0][][] */ -5,-61,12,-76,-87,26,127,-78,107,-93,-12,-120,66,-33,-78,-30, 
  /* [91][0][][] */ -2,-12,-13,-100,-60,14,49,-71,-71,45,90,60,8,-35,55,127, 
  /* [92][0][][] */ 7,6,-2,10,49,-17,-61,-127,36,-49,-9,-35,-43,-25,-17,-32, 
  /* [93][0][][] */ 89,1,33,-118,-46,-10,-37,49,57,-82,77,-17,-31,127,-18,41, 
  /* [94][0][][] */ -68,41,-72,22,59,-127,-23,4,-10,-44,64,-22,8,-3,-26,-13, 
  /* [95][0][][] */ -3,80,25,-127,8,-2,-26,25,22,-62,-50,-44,13,14,-51,8, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00079199543688446283, 0.00059411447728052735, 0.00038811480044387281, 0.00029550056206062436, 0.00058017653645947576, 0.0010176973883062601, 0.0016953452723100781, 0.0010085551766678691, 0.00028866587672382593, 0.0010741910664364696, 0.00076682528015226126, 0.0006913635297678411, 0.00040686433203518391, 0.00074412039248272777, 0.00027042094734497368, 0.0010353298857808113, 0.00063425599364563823, 0.00040746110607869923, 0.00043410490616224706, 0.00066800141939893365, 0.0011909330496564507, 0.0015654116868972778, 0.00050887418910861015, 0.0017701335018500686, 0.001572231063619256, 0.00078639981802552938, 0.00062086741672828794, 0.00075645482866093516, 0.00079362979158759117, 0.00031404575565829873, 0.00021413729700725526, 0.0004599065869115293, 0.00056738842977210879, 0.0012114130659028888, 0.00059489364502951503, 0.00073310540756210685, 0.001101732486858964, 0.0015202342765405774, 0.00047983296099118888, 0.0025891258846968412, 0.00046359762200154364, 0.00055172259453684092, 0.00031379208667203784, 0.00089903181651607156, 0.00043447298230603337, 0.00057795218890532851, 0.00087025307584553957, 0.00058239558711647987, 0.00021005466987844557, 0.00053756748093292117, 0.000793696497566998, 0.00063028489239513874, 0.00097289279801771045, 0.00094351283041760325, 0.0012048042844980955, 0.00055974192218855023, 0.00064632936846464872, 0.00044711446389555931, 0.0011637854622676969, 0.00050408509559929371, 0.00082958332495763898, 0.00027485535247251391, 0.00063142942963168025, 0.00060666073113679886, 0.00066989019978791475, 0.00068047980312258005, 0.0007832495030015707, 0.00053111591842025518, 0.00075642153387889266, 0.00079005945008248091, 0.00067127897636964917, 0.00047681762953288853, 0.00033486384199932218, 0.00057368632405996323, 0.00099148799199610949, 0.00093592877965420485, 0.00090218975674360991, 0.0011308935936540365, 0.0010393322445452213, 0.00078953884076327085, 0.00039541340083815157, 0.00037861199234612286, 0.00054467481095343828, 0.00031618998036719859, 0.0010850584367290139, 0.00077263073762878776, 0.00072475621709600091, 0.000203418341698125, 0.00041653084917925298, 0.00078906695125624537, 0.0005798936472274363, 0.00086329021723940969, 0.00076537072891369462, 0.0006432713707908988, 0.0009473402751609683, 0.00053478888003155589, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -2969, -3620, -10700, 30794, 22022, 3917, -4769, -4757, 21875, 2854, 24133, 22433, -13207, 11174, 34138, -27755, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00048949156189337373, 0.00023901920940261334, 0.0002648809168022126, 0.0002312535943929106, 0.000391523411963135, 0.00037094132858328521, 0.00033045865711756051, 0.00044493679888546467, 0.00022130600700620562, 0.00023667495406698436, 0.00036296609323471785, 0.00075703702168539166, 0.00046457201824523509, 0.00042072561336681247, 0.00048497490934096277, 0.00035875500179827213, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 3,14,-13,19,41,65,-27,-19,39,2,7,7,-5,14,28,57,9,-3,-1,-3,86,-47,10,-14,-26,-33,-36,-86,-2,-11,42,44,116,-3,8,-11,3,-14,-13,9,-35,13,15,-33,7,-24,-8,25,-18,15,0,-12,-33,-4,8,-1,37,22,-15,-25,-60,20,-13,-9,8,6,45,9,12,10,1,-28,-67,1,0,7,-4,-77,8,-13,46,-12,-53,-52,29,-16,13,26,-6,8,20,-39,32,13,-8,127, 
  /* [1][0][][] */ 96,-114,46,90,-27,-59,-14,-42,-21,-106,-19,34,34,-73,-32,-52,-87,-6,50,31,-34,-112,-41,10,127,-77,-83,31,-21,115,-15,57,6,4,-57,15,-29,4,39,-57,-2,-81,63,-57,-69,12,79,-3,41,32,-26,-73,82,-80,33,-24,14,31,-8,-121,26,-81,9,-59,-3,-103,19,66,36,56,-35,18,-125,46,-20,80,30,118,5,-17,53,1,-82,30,-78,73,7,41,-57,-2,24,19,16,-42,34,18, 
  /* [2][0][][] */ 18,26,17,-28,10,6,-9,24,60,-8,15,74,-13,8,41,-1,-7,-19,3,-13,-11,-67,9,-55,4,-11,-29,18,-20,17,127,-60,17,-76,-20,62,21,116,-56,-21,13,-26,0,45,-50,-56,-64,28,24,20,-23,-28,28,2,-2,-41,-31,7,-12,30,4,7,84,91,8,-72,23,-86,-19,-10,-15,-4,-10,4,-24,9,14,47,10,14,9,83,27,-4,-13,14,13,6,22,12,-8,-49,-48,8,-13,57, 
  /* [3][0][][] */ -18,-18,-32,34,25,-21,-2,-18,-10,23,10,10,0,-17,43,-7,34,-46,8,2,-14,-16,-4,18,-8,12,10,-15,30,-42,54,-22,25,-4,-19,49,-7,-19,-9,24,14,-68,30,-18,-7,-2,-11,4,-127,34,-1,24,-115,-50,-14,-35,28,15,-15,49,8,27,19,21,-15,-86,-29,13,54,20,-7,17,-29,5,-13,-42,-38,-58,28,-44,12,-23,17,75,34,50,23,20,34,-5,-7,0,-36,2,-18,-44, 
  /* [4][0][][] */ -1,-25,23,-64,3,-21,-49,2,-27,-35,-20,-7,-2,72,3,2,38,-8,-3,4,-8,26,55,14,2,1,19,17,3,-14,-11,-5,-33,16,-1,29,33,-25,9,-1,12,12,-88,-21,36,-6,-16,-8,3,78,-2,-23,-29,-13,6,-4,1,-37,26,30,20,12,7,-1,37,-104,29,-29,-35,21,-19,-9,-5,20,-15,21,-15,57,58,7,7,8,127,-34,30,-16,-20,4,68,17,0,19,-41,27,2,-54, 
  /* [5][0][][] */ -16,-3,3,1,-16,-20,1,94,59,-6,-7,-28,-22,26,28,22,-27,-8,-6,-30,-46,-14,-2,-34,8,10,24,83,64,18,50,40,-45,22,-12,1,-50,-59,-16,-9,-39,-18,1,-2,65,11,0,21,14,2,-5,16,-23,-13,-1,-6,-15,-24,-4,26,-32,35,-22,-33,20,17,-21,0,6,18,13,-8,32,6,19,-12,1,20,13,103,-4,-33,29,36,-2,-3,12,-12,7,-11,21,-111,-46,-18,-4,-127, 
  /* [6][0][][] */ -25,-8,-21,-55,-9,-31,-20,19,0,21,-21,-7,38,-64,12,-14,-11,-65,40,17,-4,4,-23,21,65,-16,4,13,26,-4,9,-13,-25,-5,-24,-3,15,-2,28,25,-17,-33,-57,-33,-3,-16,31,-127,22,41,13,7,12,0,-2,-40,42,-16,1,2,14,17,-5,5,45,68,25,-13,-18,-14,34,-19,7,9,54,5,-28,35,2,7,-13,6,51,-38,3,40,14,-17,26,-3,-37,-4,-20,2,-1,23, 
  /* [7][0][][] */ 16,13,30,-27,-2,9,-11,-30,-2,-18,-13,-15,-10,-80,19,9,0,-32,-14,-12,16,-16,-40,-13,-15,-9,-4,-21,1,7,11,4,-16,0,-5,-18,8,-3,-38,15,13,-15,-25,32,-5,9,-10,65,2,18,-22,-20,-21,2,0,-53,34,3,-5,5,-16,4,-7,-10,-19,40,13,-32,-18,-13,1,34,-3,-7,-18,4,45,1,-2,-19,-1,-37,29,3,-28,127,0,-8,-38,-27,-7,24,-14,0,-8,9, 
  /* [8][0][][] */ -56,44,-53,3,42,-18,-8,34,19,72,-50,6,11,43,70,-4,-11,30,-76,17,11,28,-37,6,-49,-24,29,23,57,-89,-8,-7,23,15,17,-1,-23,28,-28,36,-3,23,5,-127,-27,0,56,-13,-54,28,6,64,-105,80,7,0,14,-33,-15,-21,1,-39,-4,23,-29,31,29,-10,5,3,35,94,-33,42,51,21,-6,-81,4,-36,-8,-2,26,-2,-65,-1,9,-31,5,43,-19,-2,38,-25,-12,-1, 
  /* [9][0][][] */ 16,-56,-30,-31,16,34,-22,14,23,-6,2,21,-43,-33,5,16,-1,-3,32,-28,-16,5,-25,-34,42,15,23,-25,-41,-43,-27,-8,-9,10,16,33,8,42,-53,28,28,5,-10,-82,-4,-22,20,-127,-44,-13,1,37,-20,12,-4,-6,-52,39,-16,15,22,21,23,30,26,124,39,31,6,-2,-4,-34,-3,-12,-40,9,69,-10,15,4,-8,-8,22,-34,-5,31,-2,-7,-58,42,-46,4,3,18,0,-29, 
  /* [10][0][][] */ 32,43,-6,39,56,-127,-4,-27,10,60,28,1,-14,11,12,-76,6,47,-19,45,-87,-6,-13,-15,-69,-22,-53,61,18,14,-6,32,-22,-13,18,-6,78,-21,1,-7,-26,70,52,-28,-47,-8,-40,21,-6,-16,-24,-5,-11,-13,-7,-8,17,18,-10,-22,-2,4,-26,27,15,39,46,33,29,1,36,52,-58,-11,-45,-25,3,34,-19,13,32,2,-54,-36,60,-43,92,3,-11,8,30,-12,68,33,-13,-127, 
  /* [11][0][][] */ 55,33,-31,19,-6,8,54,17,5,-17,-20,-18,-1,3,37,11,-8,-8,-99,-6,-4,10,-7,-2,-45,-20,-9,8,10,24,2,-6,-2,10,7,26,5,15,3,27,-4,31,59,-106,33,-34,-10,-7,-127,18,11,-54,25,14,-15,21,-10,-19,8,0,25,-17,-14,12,-41,50,-23,22,25,2,36,18,-55,-16,23,22,-1,-28,-46,6,17,4,89,41,2,-16,-18,-3,7,21,-13,-9,0,4,-16,11, 
  /* [12][0][][] */ -38,-3,10,-1,-22,30,7,-8,127,9,-12,4,-8,12,-39,-37,22,28,8,72,49,24,-7,-18,8,13,22,-28,-103,1,28,-38,8,-2,2,-16,13,-10,43,-2,-47,-23,-8,15,5,29,13,1,12,6,-37,16,4,0,12,-6,73,-22,8,20,19,-6,17,-12,-1,37,-35,3,2,11,-22,-38,20,4,-60,3,31,-14,16,-58,-9,12,37,37,-23,-13,-31,-17,11,22,-8,53,-15,-16,18,9, 
  /* [13][0][][] */ 35,-9,-26,26,33,-7,9,-3,-10,-3,6,-5,7,-11,7,-16,15,-63,-30,13,-11,-15,10,-4,9,8,3,0,-18,-34,-3,18,-3,6,8,45,20,-1,5,9,-6,14,17,32,19,21,-9,-127,26,1,4,1,-19,-6,13,2,-5,9,27,11,-1,11,-8,2,-12,-17,-16,-46,3,8,-7,-26,-15,37,-9,12,-29,3,15,1,22,-6,-12,13,9,29,11,21,-5,-6,22,-7,8,9,-8,-3, 
  /* [14][0][][] */ -107,-54,31,57,27,-35,-25,18,-20,6,-13,10,69,14,-124,-1,75,-13,-9,38,-16,-1,32,13,-113,7,32,-6,-39,-73,-37,1,-14,5,20,-66,30,46,7,10,10,41,-1,-41,13,127,76,59,-117,59,5,29,-59,-9,33,2,14,1,68,58,26,48,3,47,-4,-19,-39,57,6,82,-59,-69,-86,7,-6,46,-17,50,86,5,62,20,40,21,46,6,51,37,27,37,71,-8,7,22,26,-14, 
  /* [15][0][][] */ 96,-18,35,7,3,69,32,-11,-11,33,-1,-3,-75,-10,-10,32,18,35,51,-10,16,29,-89,46,12,10,49,7,20,36,-43,-60,0,-40,47,-4,46,-19,-50,-100,-15,28,-5,27,5,48,-7,-42,101,-37,-58,23,41,-102,50,-96,1,-66,14,27,-127,-10,6,13,69,-15,-51,53,-25,59,-16,20,32,38,13,-4,10,-40,63,-13,-12,3,39,64,-19,5,2,-58,-4,-11,66,-1,-43,47,20,9, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.020803390070796013, 0.010158316232264042, 0.01125743892043829, 0.0098282778635621071, 0.016639744862914085, 0.015765005722641945, 0.01404449250549078, 0.018909813836216927, 0.0094055049121379852, 0.010058685205876827, 0.015426058322191238, 0.032174073159694672, 0.019744310528039932, 0.017880838364362717, 0.020611433312296867, 0.015247086994349957, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10328, -8949, 2799, 48755, -2101, -4601, -10477, 3806, -2769, 659, 2755, -1440, 1924, -4897, 6775, -5463, -1659, 17066, 22868, 2267, 2966, -3754, 894, 457, 19573, -595, -1286, -3136, -5937, -7983, 6336, -8950, -725, -1291, -586, 13848, 1646, -3406, 20820, 882, -5, 1534, -9800, -7707, -7818, 67500, -525, 18346, 30916, -12417, -49, 6779, 7455, -144, -6119, 2398, -12984, 1618, 2162, -6674, -1197, -843, -12647, -640, 1357, 16597, 29971, 19460, -12069, 803, -7776, -1057, 42251, 10731, -106, 297, 18610, 32369, -691, -7064, -1181, -3684, 390, -2982, 562, 1545, 1736, 1, 2086, -3244, 256, -1050, 719, 293, 79, 49418, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018886550969909877, 0.00012511482054833323, 0.00020530633628368378, 4.281619840185158e-05, 0.00013698787370231003, 0.00016381598834414035, 0.00032554101198911667, 7.6263524533715099e-05, 0.00014077106607146561, 0.00039773451862856746, 0.00014215460396371782, 0.00035574898356571794, 0.00010133811883861199, 0.00043144976370967925, 0.00015139176684897393, 0.00016821827739477158, 8.575125684728846e-05, 0.00030272133881226182, 7.1562310040462762e-05, 0.00024630065308883786, 4.5930155465612188e-05, 0.00016680806584190577, 0.00013118634524289519, 0.00035018956987187266, 0.00017086221487261355, 0.00022854101553093642, 0.00011305644875392318, 0.00018519464356359094, 0.00011114154767710716, 8.8066284661181271e-05, 0.00013431539991870522, 0.00017006769485305995, 0.00011691721738316119, 0.00011634529801085591, 0.00020021425734739751, 0.00017116813978645951, 0.00034242033143527806, 0.00011408579302951694, 5.6710232456680387e-05, 0.00013606349239125848, 0.00023432310263160616, 0.00031712790951132774, 0.00037831644294783473, 0.00016224732098635286, 0.0001733999524731189, 5.2881336159771308e-05, 0.0002214041305705905, 0.00017857365310192108, 8.3691971667576581e-05, 0.00019056777819059789, 0.00021700351499021053, 0.00019595447520259768, 0.00022623821860179305, 0.00028322931029833853, 0.00025969490525312722, 0.00049540499458089471, 0.00028825353365391493, 0.00018318231741432101, 9.8092699772678316e-05, 7.300277502508834e-05, 0.00028686091536656022, 0.00013812327233608812, 0.00026877230266109109, 0.0001209015172207728, 0.00016668178432155401, 0.00017446033598389477, 7.8300734458025545e-05, 8.969799819169566e-05, 0.00031255910289473832, 0.00020080599642824382, 0.0002045762084890157, 0.0001166116344393231, 0.00013808936637360603, 0.00015050887304823846, 0.00014738948084414005, 0.0002190125233028084, 0.00050381012260913849, 5.0813767302315682e-05, 0.00024347352155018598, 0.00028221463435329497, 0.00014493714843410999, 0.00058570143301039934, 0.00013359665172174573, 0.00013018854951951653, 0.00012563522614073008, 9.56885633058846e-05, 0.00011847975838463753, 0.00014989337068982422, 0.00021472957450896502, 0.00010035328887170181, 0.00016701867571100593, 0.00010463120997883379, 0.00013535913603845984, 0.00043688286677934229, 0.015677735209465027, 7.740074215689674e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-19,106,-17,24,-62,-54,16,-5,102,-9,3,-8,-5,56,6,16,-33,4,73,2,31,-35,3,17,44,48,23,14,23,48,-6,28,10,-15,4,47,-62,-26,22,10,28,18,-84,-56,26,-4,-10,-19,-8,-6,49,5,-8,1,-2,-36,26,-31,27,-1,127,27,-13,-10,10,-56,66,35,1,-8,77,-33,70,3,17,-127,30,66,0,15,127,-14,37,28,-30,-18,34,-7,-15,82,-1,19,-3,14, -49,13,-7,12,51,-8,-10,-127,38,15,-127,-4,-16,-12,4,97,18,-31,-13,-15,76,-97,127,25,-61,-32,-104,-16,30,38,-50,18,118,12,-12,-1,-25,127,-66,-127,10,-18,-29,13,48,-127,127,-43,-75,50,49,7,39,-65,32,56,38,42,-103,85,127,34,3,-21,42,-37,-97,-4,36,-31,-20,46,-49,-48,106,-5,-29,-59,-31,64,-68,61,-16,8,-12,47,55,-40,-28,55,-14,73,-127,-32,23,-127, -1,-5,-22,-75,7,19,37,21,-4,-1,4,62,-1,-13,-11,7,-11,16,-15,18,7,25,25,-34,1,-31,10,11,-5,6,45,-80,46,16,11,-23,12,5,-32,-21,9,4,-16,9,24,-32,22,1,7,-7,6,-5,5,5,-5,8,-6,46,6,-1,9,-17,2,-17,-27,-17,31,-53,-107,-8,39,-18,-127,-23,-11,15,10,-10,5,12,-14,23,-37,-4,-41,21,25,37,-25,-16,24,-11,17,6,-2,-45, 
  /* [0][1][][] */ -41,58,-17,38,-86,-15,-11,-45,25,96,-44,-22,-31,-25,-8,63,127,-24,-90,-12,60,-127,-30,15,-35,-49,-127,-5,37,37,-50,27,-127,-74,-57,3,66,-3,-47,45,-19,87,1,-2,34,-52,-11,-31,127,43,-4,21,44,9,-36,-17,32,9,-126,127,-38,-88,20,127,-60,-36,-84,126,-37,127,-19,52,-34,-54,37,7,-35,-69,127,49,127,35,6,-1,127,29,-98,48,-38,-36,-103,41,94,102,28,-57, 127,127,127,127,-47,-127,127,22,127,-127,16,-127,-107,127,127,127,-15,-127,-62,-127,127,24,-68,127,127,127,-55,-127,127,127,-127,127,-8,-127,-123,127,-127,-45,95,109,-127,-127,127,127,127,-117,-105,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-108,-27,-72,-67,127,127,-72,127,127,-107,-127,127,-42,127,-127,-127,-127,126,-74,127,-43,127,80,127,-38,-127,-26,-110,-127,-126,-23,-127,-23,-127,-127,117, -25,65,-37,3,127,71,-22,47,6,25,-14,-4,-27,-31,-14,-6,-103,-22,-127,39,33,79,-12,-118,-33,-41,124,69,9,36,72,8,127,-47,127,-3,56,5,-88,13,35,24,-22,1,-22,-52,-11,-42,81,15,-12,40,-6,-5,-75,-13,26,22,127,-88,1,127,-1,-36,-112,-28,-76,101,15,-17,111,24,-18,-57,11,46,-29,-6,-44,-2,-48,9,47,24,-90,34,127,-49,31,-23,127,-9,-111,34,32,18, 
  /* [0][2][][] */ -5,-39,-20,-62,-4,15,40,29,-3,10,-20,53,24,-34,-7,4,43,2,13,22,-9,31,-18,-27,2,-25,8,5,-10,-7,48,-76,-38,66,-27,-26,31,-35,-65,16,9,10,-34,22,12,-79,-10,-1,-10,4,16,-7,8,1,-21,6,0,45,-50,33,-4,-12,4,16,-6,-10,23,-56,-56,10,-21,-13,-117,-32,1,18,15,-14,57,19,21,21,-41,15,13,25,-22,9,6,25,22,-5,18,39,-7,-32, -28,-9,-26,22,-45,74,-25,64,4,-6,54,-11,127,-7,-18,-20,0,-40,-60,25,-26,80,-46,-114,-47,-48,100,70,12,43,54,-3,-120,62,-14,-24,-28,-28,-127,-4,44,-13,-14,38,-27,-45,-16,-47,-60,27,67,26,-10,-80,29,53,17,26,75,-54,19,-57,-10,1,19,-25,-127,-59,-10,-27,-63,23,36,-46,-30,-6,-45,24,-56,3,49,35,20,10,7,62,-95,127,16,127,-31,-17,111,-22,46,82, -10,-34,-26,29,12,66,-43,11,3,-6,1,15,12,-51,-10,-14,-44,-6,17,20,-20,7,-21,3,-4,20,-4,52,-4,-5,33,28,15,43,20,-23,-7,-26,-27,7,10,-11,22,11,-73,-33,-11,4,-1,-14,-1,-3,-9,8,-17,-4,1,-48,12,-30,-21,50,8,-28,-11,-2,35,-56,46,7,55,-23,30,-56,-18,23,11,11,-6,23,-31,32,89,-14,-18,54,38,-10,108,11,2,-17,10,-23,-7,-53, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.008026784285902977, 0.0053173797205090523, 0.0087255192920565605, 0.0018196883611381054, 0.0058219847269356251, 0.00696217967197299, 0.013835492543876171, 0.0032411997672170401, 0.0059827701188623905, 0.016903717070817947, 0.0060415705665946007, 0.015119330957531929, 0.0043068700470030308, 0.018336614593863487, 0.0064341500401496887, 0.007149276789277792, 0.0036444282159209251, 0.012865656986832619, 0.0030413982458412647, 0.010467777028679848, 0.0019520316272974014, 0.0070893429219722748, 0.005575419869273901, 0.014883056282997131, 0.0072616441175341606, 0.0097129931673407555, 0.0048048989847302437, 0.0078707719221711159, 0.0047235158272087574, 0.0037428170908242464, 0.0057084043510258198, 0.0072278771549463272, 0.0049689817242324352, 0.0049446751363575459, 0.0085091060027480125, 0.00727464584633708, 0.01455286331474781, 0.0048486460000276566, 0.0024101848248392344, 0.005782698281109333, 0.0099587319418787956, 0.013477935455739498, 0.016078447923064232, 0.006895510945469141, 0.0073694977909326553, 0.002247456694021821, 0.0094096753746271133, 0.007589380256831646, 0.0035569085739552975, 0.008099130354821682, 0.0092226490378379822, 0.0083280652761459351, 0.0096151242032647133, 0.012037245556712151, 0.011037033051252365, 0.021054711192846298, 0.012250774540007114, 0.0077852481044828892, 0.0041689397767186165, 0.0031026178039610386, 0.012191588059067726, 0.0058702388778328896, 0.011422823183238506, 0.0051383143290877342, 0.0070839757099747658, 0.007414564024657011, 0.0033277811016887426, 0.0038121647667139769, 0.013283762149512768, 0.0085342545062303543, 0.0086944885551929474, 0.0049559944309294224, 0.0058687976561486721, 0.0063966270536184311, 0.0062640528194606304, 0.0093080317601561546, 0.021411929279565811, 0.0021595850121229887, 0.010347624309360981, 0.011994121596217155, 0.0061598285101354122, 0.024892309680581093, 0.0056778574362397194, 0.0055330134928226471, 0.005339497234672308, 0.004066763911396265, 0.0050353896804153919, 0.0063704680651426315, 0.0091260066255927086, 0.0042650145478546619, 0.0070982938632369041, 0.004446826409548521, 0.005752763245254755, 0.018567521125078201, 0.66630375385284424, 0.0032895314507186413, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 24122, 1727, 6994, -782, 6064, 6297, 22959, 7447, -1535, 26332, 6864, 2119, 8016, 48640, -329, -2627, 14335, 13621, 2072, -183, -706, 18346, 6216, 4704, 9062, 6229, 4976, 4895, 40, 48, 8304, 12904, 16221, 2253, 9355, -694, 26571, 8619, 892, 6555, 1086, 13720, 17269, 4334, 3361, 15435, 17665, 6023, 5374, 4612, 396, -962, 20018, 9404, 8926, 19258, -360, 8872, 3317, 4192, 14416, 11109, 3673, 9310, 8188, 4548, 8649, -933, 17234, 8196, 10470, -1418, -1992, 4325, 1900, 3796, 33115, 24741, 21480, -2846, 6183, -6598, -2452, 822, 8231, 7623, 9347, 5920, 11496, 3546, 8275, 4719, 17899, 25453, -13636, 15436, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00010701652354327962, 0.00019416961004026234, 0.00019200301903765649, 0.0007126469281502068, 0.00026738044107332826, 0.00014183919120114297, 0.00013744206808041781, 0.00047575993812642992, 0.00027924610185436904, 6.8769149947911501e-05, 0.00020439995569176972, 0.00038813753053545952, 0.00034427872742526233, 9.9491007858887315e-05, 0.00023775301815476269, 0.00024706547264941037, 0.00015462268493138254, 0.00017187307821586728, 0.00021803661365993321, 0.00061373587232083082, 0.00040239453664980829, 0.00013653421774506569, 0.00024697542539797723, 0.00016973241872619838, 0.00019578756473492831, 0.00033467751927673817, 0.00028666216530837119, 0.00018722019740380347, 0.00059675396187230945, 0.00030649139080196619, 0.00017276742437388748, 0.00014601252041757107, 0.00012078320287400857, 0.00048448229790665209, 0.00017933512572199106, 0.0003869631327688694, 8.5379673691932112e-05, 0.00030520459404215217, 0.0005093325162306428, 0.0001459032209822908, 0.00047110673040151596, 0.00013787818897981197, 0.00012403853179421276, 0.00017313657735940069, 0.000330043287249282, 0.00021236327302176505, 0.00015924737090244889, 0.0002423325931886211, 0.00029325287323445082, 0.00019116592011414468, 0.00034189847065135837, 0.00067494437098503113, 0.00013286474859341979, 0.00017002776439767331, 0.0002616931451484561, 9.6858631877694279e-05, 0.00030212118872441351, 0.00019826675998046994, 0.0002331436553504318, 0.00038274723920039833, 0.00011516415543155745, 0.00012707228597719222, 0.00028619248769246042, 0.0002971226058434695, 0.00013076637696940452, 0.00024291273439303041, 0.00022641100804321468, 0.00037183111999183893, 0.00015427984180860221, 0.00014203046157490462, 0.00018966238712891936, 0.00033523977617733181, 0.00018696040206123143, 0.00030017475364729762, 0.00023344914370682091, 0.00033406438888050616, 7.1588045102544129e-05, 0.00018035421089734882, 7.8772929555270821e-05, 0.00041557473014108837, 0.00017934465722646564, 0.00031303011928685009, 0.00015870250354055315, 0.00034480326576158404, 0.00019674241775646806, 0.00020783484796993434, 0.00017309555551037192, 0.00023602288274560124, 0.00014887793804518878, 0.00044850428821519017, 0.00017000891966745257, 0.00035902406671084464, 0.00011815773177659139, 0.00010933799057966098, 0.00021587610535789281, 0.00021155519061721861, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 29,-12,123,127,80,-15,27,-48,122,-13,-57,-87,18,73,-36,-107, 
  /* [1][0][][] */ 28,76,-11,-2,90,-1,11,32,58,69,-33,127,2,-15,93,-93, 
  /* [2][0][][] */ 4,-33,6,8,-39,59,-58,64,-56,-78,28,77,-26,-127,65,-101, 
  /* [3][0][][] */ 127,112,-7,34,-120,-28,-52,-20,2,-4,97,-75,-42,88,-51,-33, 
  /* [4][0][][] */ 2,6,15,7,-35,39,-8,48,-58,-32,4,-8,-7,-127,35,10, 
  /* [5][0][][] */ 116,-70,-12,3,-22,-114,-19,25,-12,12,-127,11,28,-14,9,42, 
  /* [6][0][][] */ -127,-90,-13,112,-47,3,-52,23,-122,-59,-73,-39,27,49,-5,103, 
  /* [7][0][][] */ -9,25,-79,37,45,-127,-17,37,14,-36,23,-13,7,5,-33,1, 
  /* [8][0][][] */ 33,-46,-11,-6,8,28,-53,-67,-21,20,-71,8,-127,-9,-3,22, 
  /* [9][0][][] */ 23,-43,67,120,11,24,-9,-70,127,-96,2,-7,-8,53,-55,19, 
  /* [10][0][][] */ -95,-60,-11,-18,71,48,53,88,127,-58,-61,18,88,-65,-93,54, 
  /* [11][0][][] */ 39,-22,-127,17,46,17,-25,35,-14,-31,-14,-6,3,28,-41,9, 
  /* [12][0][][] */ 94,-73,-8,13,-2,-59,-63,-43,25,8,-127,-32,-54,-29,6,34, 
  /* [13][0][][] */ 89,-101,12,-113,96,-22,-126,-127,15,-100,9,3,8,-54,-1,35, 
  /* [14][0][][] */ -57,30,-92,-40,86,-127,49,-68,57,51,-7,-97,16,107,-7,22, 
  /* [15][0][][] */ 50,-1,79,52,62,-54,-49,-1,14,-74,-93,-11,-127,-67,-38,57, 
  /* [16][0][][] */ -115,56,-1,20,-9,112,69,91,-3,53,127,15,25,-18,10,-32, 
  /* [17][0][][] */ 0,-11,-34,-27,-29,9,36,84,-27,127,-28,17,5,77,54,-10, 
  /* [18][0][][] */ -3,127,-57,0,0,-11,43,-62,-4,109,-58,103,-17,-38,14,-78, 
  /* [19][0][][] */ 5,-18,36,17,8,40,-3,16,12,6,-42,-13,-127,0,-1,28, 
  /* [20][0][][] */ 73,-59,-3,-75,-31,38,20,-90,-39,12,-127,-46,21,8,39,-3, 
  /* [21][0][][] */ 37,0,127,31,-18,61,26,0,7,27,-9,-17,-23,78,-5,-17, 
  /* [22][0][][] */ 24,-10,22,26,-19,18,35,127,6,24,21,15,-5,27,8,1, 
  /* [23][0][][] */ -30,16,-94,25,30,-127,6,30,11,-13,-16,-1,-80,5,-9,33, 
  /* [24][0][][] */ 35,-47,-5,-66,62,5,-37,-19,31,29,68,86,-55,76,127,30, 
  /* [25][0][][] */ -127,-63,-45,-7,9,15,6,-36,-55,2,-56,13,4,27,18,37, 
  /* [26][0][][] */ -6,14,44,-14,-5,10,-22,48,-63,-65,3,11,-6,-127,48,-18, 
  /* [27][0][][] */ -86,42,-44,28,23,-6,11,28,36,-22,127,15,-6,1,-1,-15, 
  /* [28][0][][] */ -22,-8,9,31,-8,3,12,76,22,18,-20,-12,-127,-15,-15,41, 
  /* [29][0][][] */ -5,59,30,-43,32,-20,16,-24,-127,25,-32,-2,7,27,-76,14, 
  /* [30][0][][] */ -5,2,-127,-39,18,-53,7,20,-11,-10,1,-26,-28,-25,13,13, 
  /* [31][0][][] */ 127,-28,-121,15,29,-9,-37,64,-12,-10,-67,-58,18,0,-77,36, 
  /* [32][0][][] */ -127,52,3,27,3,66,18,30,17,-1,117,10,-41,0,-1,-5, 
  /* [33][0][][] */ 9,-12,127,-33,-62,28,1,-45,-4,14,-8,11,-10,19,51,19, 
  /* [34][0][][] */ -11,-2,-62,-127,14,1,8,-25,-14,-36,-38,-113,-4,-12,51,32, 
  /* [35][0][][] */ 4,-36,31,40,55,-27,10,-24,-120,21,-14,16,-26,127,-35,-46, 
  /* [36][0][][] */ -124,75,-41,-6,-11,37,45,95,-11,39,127,-10,-2,13,18,-24, 
  /* [37][0][][] */ -29,22,127,-39,-61,-57,19,-25,15,7,-2,10,2,-64,53,4, 
  /* [38][0][][] */ 8,-16,-6,40,32,-41,-55,0,-9,-14,65,-5,127,25,-8,5, 
  /* [39][0][][] */ -7,-20,13,-67,-38,-127,62,127,-42,-1,-4,-45,25,42,50,83, 
  /* [40][0][][] */ 70,-12,-20,-5,-11,63,-14,5,7,5,4,7,127,2,-33,-9, 
  /* [41][0][][] */ -11,11,-38,-127,22,-4,-14,-62,10,-34,21,-34,-15,-21,-12,32, 
  /* [42][0][][] */ 39,53,-5,104,-118,-12,-79,-1,-80,-58,81,-79,-32,127,-57,7, 
  /* [43][0][][] */ 28,107,-5,127,27,22,37,-79,-36,73,-11,26,25,-44,36,25, 
  /* [44][0][][] */ -2,-37,-127,28,47,61,-45,49,-22,-14,28,-21,9,-29,-69,8, 
  /* [45][0][][] */ 6,19,-18,-127,-24,-13,43,-1,-10,21,-27,6,10,-74,27,-17, 
  /* [46][0][][] */ 22,50,47,-40,5,-7,-51,53,19,-59,-27,19,9,127,74,-3, 
  /* [47][0][][] */ 14,-18,19,-40,-39,28,-64,62,-14,-30,21,37,-1,-127,43,10, 
  /* [48][0][][] */ -2,-15,0,-127,-5,-10,-1,2,10,-24,19,-22,-3,38,5,55, 
  /* [49][0][][] */ 38,-36,1,127,86,15,1,54,-57,17,35,40,-5,53,125,-5, 
  /* [50][0][][] */ -17,-15,65,-36,14,127,-24,-72,36,-39,121,25,93,-8,3,-49, 
  /* [51][0][][] */ 31,38,9,9,19,-3,-49,18,37,-3,-7,127,15,31,32,-47, 
  /* [52][0][][] */ -18,74,127,-10,16,-49,15,-45,-43,-2,14,41,-12,98,-109,-11, 
  /* [53][0][][] */ 7,-19,-41,-127,-43,-6,11,-38,-22,47,10,5,16,-24,49,22, 
  /* [54][0][][] */ 14,12,-30,-47,32,6,-9,14,71,-18,-3,-23,-5,127,6,25, 
  /* [55][0][][] */ -28,-6,-59,-24,15,-14,-2,-127,33,-102,-2,-22,-57,-71,-33,-30, 
  /* [56][0][][] */ 35,39,29,64,4,-14,13,127,27,-21,8,-34,77,-9,-56,31, 
  /* [57][0][][] */ 93,-6,127,-37,-73,-59,2,-56,8,13,-111,13,62,-61,56,9, 
  /* [58][0][][] */ 102,89,19,127,-123,-28,-9,30,-23,9,83,-29,-63,-71,-40,-84, 
  /* [59][0][][] */ 127,-54,-4,10,-33,-17,11,16,-18,41,-98,-11,8,-16,24,26, 
  /* [60][0][][] */ -127,36,-15,8,10,21,13,28,1,2,83,-13,-40,0,6,-29, 
  /* [61][0][][] */ -77,59,53,48,51,10,-109,-58,127,-109,65,5,45,-26,-127,-103, 
  /* [62][0][][] */ -20,-60,-127,70,46,93,2,118,49,-37,46,-38,-51,8,-123,-9, 
  /* [63][0][][] */ -32,14,127,-30,-57,-51,37,-32,9,26,4,6,-3,-59,79,12, 
  /* [64][0][][] */ 36,73,-15,14,55,-2,90,-127,-21,99,9,-27,-10,-123,-15,59, 
  /* [65][0][][] */ 6,25,6,-17,62,15,10,-127,-19,-41,-23,-57,-5,-52,36,16, 
  /* [66][0][][] */ -127,-6,-16,14,-47,14,6,-46,-90,-33,-92,56,55,21,46,82, 
  /* [67][0][][] */ 6,-46,1,127,-12,-21,-24,34,36,26,1,-14,11,-32,-98,-1, 
  /* [68][0][][] */ 3,-16,-29,127,-49,-36,3,-21,-55,29,15,-33,-14,-57,-14,-33, 
  /* [69][0][][] */ 76,113,1,102,54,-10,67,-127,16,104,34,49,-9,-40,32,-27, 
  /* [70][0][][] */ -2,-32,11,-89,93,-5,9,3,59,-65,72,-43,33,116,65,127, 
  /* [71][0][][] */ 18,45,3,79,49,-127,-40,81,32,-78,11,14,9,-58,-50,26, 
  /* [72][0][][] */ -127,-67,-33,39,21,23,-33,32,-58,-47,-114,36,62,29,-1,108, 
  /* [73][0][][] */ -23,-37,-16,72,20,-14,-5,-29,60,19,-6,6,16,127,-88,-56, 
  /* [74][0][][] */ 56,-20,0,-34,-49,-18,36,-5,-33,-8,-97,29,-127,4,39,53, 
  /* [75][0][][] */ -16,-10,-34,127,-33,2,-12,-25,-79,10,-23,-32,-9,-54,-7,-28, 
  /* [76][0][][] */ -11,-28,2,68,40,17,-23,-127,19,-122,17,38,-38,-24,24,-61, 
  /* [77][0][][] */ 127,-45,50,68,-44,13,-59,6,49,-25,-57,70,21,27,-47,31, 
  /* [78][0][][] */ -2,-7,58,12,27,-11,-74,37,51,-25,-51,-32,34,127,32,-44, 
  /* [79][0][][] */ -1,20,43,15,48,56,-48,-52,11,-42,77,-20,127,-23,-33,-43, 
  /* [80][0][][] */ -127,-70,-80,89,17,48,29,-22,-83,14,-69,4,23,-78,-24,21, 
  /* [81][0][][] */ 76,8,-66,40,127,93,-27,-29,-5,-105,-22,-80,-25,-11,-113,24, 
  /* [82][0][][] */ 119,119,-5,47,-127,-18,-79,-20,-81,9,107,-52,-62,88,-4,-40, 
  /* [83][0][][] */ 127,45,12,-22,6,-16,-7,28,30,20,81,-35,-57,-32,-30,-79, 
  /* [84][0][][] */ 11,-58,-52,-25,32,10,-10,-127,-32,-44,12,7,-8,-21,-3,-4, 
  /* [85][0][][] */ -17,-17,-55,-60,-17,-24,71,102,-28,127,-23,-52,46,66,63,-15, 
  /* [86][0][][] */ 112,-24,11,1,7,-25,7,-13,12,-7,-127,10,23,35,0,22, 
  /* [87][0][][] */ -32,38,2,-25,-4,83,-45,53,-15,-28,36,18,1,-127,2,0, 
  /* [88][0][][] */ -1,2,-73,-55,68,19,-19,-127,23,-35,7,-23,-17,-6,32,-22, 
  /* [89][0][][] */ 13,-18,14,-127,44,13,-57,82,75,-52,40,18,-23,19,19,39, 
  /* [90][0][][] */ -14,24,-38,37,53,-9,114,-87,58,127,-31,32,18,-16,2,-2, 
  /* [91][0][][] */ 63,-14,-27,-27,10,-127,-6,6,2,-20,-41,-7,50,-16,17,22, 
  /* [92][0][][] */ 16,-7,127,57,53,18,-4,28,-40,32,-52,22,9,67,-10,-25, 
  /* [93][0][][] */ 127,-27,-46,-18,-24,-46,13,44,-27,46,-116,0,-5,21,-17,55, 
  /* [94][0][][] */ 9,-33,29,88,103,-27,-14,60,17,-14,4,43,-7,127,-18,-82, 
  /* [95][0][][] */ -109,27,31,51,26,45,29,0,16,16,127,-6,-18,40,-21,-33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00042027959716506302, 0.00076255074236541986, 0.00075404200470075011, 0.0027987358625978231, 0.0010500672506168485, 0.00055703660473227501, 0.00053976802155375481, 0.0018684236565604806, 0.0010966665577143431, 0.00027007298194803298, 0.00080272776540368795, 0.0015243093948811293, 0.0013520653592422605, 0.0003907250938937068, 0.00093371322145685554, 0.00097028544405475259, 0.00060724042123183608, 0.00067498686257749796, 0.00085628218948841095, 0.0024102882016450167, 0.0015803000424057245, 0.0005362026859074831, 0.00096993189072236419, 0.00066657998831942677, 0.00076890480704605579, 0.0013143590185791254, 0.0011257912265136838, 0.00073525874176993966, 0.0023435961920768023, 0.0012036653934046626, 0.00067849922925233841, 0.00057342625223100185, 0.00047434467705897987, 0.0019026783993467689, 0.00070429214974865317, 0.0015196972526609898, 0.0003353065112605691, 0.0011986118042841554, 0.0020002711098641157, 0.00057299702893942595, 0.0018501493614166975, 0.00054148078197613358, 0.00048712914576753974, 0.00067994894925504923, 0.0012961593456566334, 0.00083400163566693664, 0.00062540272483602166, 0.00095169834094122052, 0.0011516745435073972, 0.00075075449422001839, 0.0013427174417302012, 0.0026506688445806503, 0.00052179180784150958, 0.00066773989237844944, 0.0010277319233864546, 0.00038038712227717042, 0.0011865025153383613, 0.00077864120248705149, 0.00091561116278171539, 0.0015031404327601194, 0.00045227730879560113, 0.00049904343904927373, 0.0011239467421546578, 0.0011668718652799726, 0.00051355100004002452, 0.00095397670520469546, 0.00088917044922709465, 0.0014602701412513852, 0.00060589401982724667, 0.00055778777459636331, 0.00074484979268163443, 0.0013165671844035387, 0.00073423841968178749, 0.0011788584524765611, 0.00091681088088080287, 0.0013119512004777789, 0.00028114346787333488, 0.00070829433389008045, 0.0003093602426815778, 0.0016320619033649564, 0.00070432957727462053, 0.0012293445179238915, 0.00062326289480552077, 0.0013541253283619881, 0.00077265477739274502, 0.00081621739082038403, 0.00067978783044964075, 0.00092691858299076557, 0.00058467942290008068, 0.0017613841919228435, 0.00066766591044142842, 0.0014099738327786326, 0.00046403380110859871, 0.00042939657578244805, 0.00084779737517237663, 0.00083082809578627348, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -41965, 3182, 4438, -6400, 2768, -7431, -12258, -42613, -191, 27635, 33582, -11598, -3118, -22337, 38880, -42864, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00072506366996094584, 0.0008663935586810112, 0.0012347971787676215, 0.00099703215528279543, 0.00098209700081497431, 0.0011206706985831261, 0.00089282187400385737, 0.00068406731588765979, 0.00059266405878588557, 0.00051160488510504365, 0.00079367839498445392, 0.00061916682170704007, 0.0010352899553254247, 0.0012940405867993832, 0.00053470226703211665, 0.00055000494467094541, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -23,0,-20,8,25,4,3,112,-53,24,51,-2,18,-10,-17,10,8,-15,-7,-3,72,-2,18,126,-20,97,0,-9,32,-10,27,-22,-13,49,18,-54,15,48,25,-12,-119,-29,18,38,34,29,-127,-54, 
  /* [1][0][][] */ -33,-14,23,17,-31,7,2,59,-63,-30,2,-48,-18,-15,-5,-6,-28,127,-9,21,10,15,-29,-12,24,-45,18,28,-28,-88,-40,13,-24,-1,29,-2,-3,-44,4,19,-14,-36,126,9,12,-2,24,-13, 
  /* [2][0][][] */ -20,-9,-16,-39,-4,-66,7,-24,-1,11,13,22,15,11,-9,9,0,-20,-25,-16,-4,-3,-2,-127,-11,73,-18,2,1,-23,-3,-10,-5,52,11,-1,22,14,24,1,-43,5,-16,-4,1,-14,13,9, 
  /* [3][0][][] */ -7,28,0,-28,-2,-1,3,-5,-19,-5,-2,39,-127,7,-3,-3,3,3,-18,-1,-28,5,5,17,-5,-12,1,22,-9,17,7,20,1,6,18,20,-9,23,37,4,10,2,23,-26,10,-5,2,17, 
  /* [4][0][][] */ 31,-31,7,5,16,29,24,-19,-26,1,-11,-16,-1,10,6,18,23,-9,-73,-2,-1,4,18,65,3,-24,7,44,9,-70,18,11,13,-35,31,-127,7,33,-3,16,-23,18,10,-22,-10,-17,9,3, 
  /* [5][0][][] */ 27,2,-20,62,5,-7,9,24,6,-8,36,10,2,49,3,2,-21,20,31,1,10,-2,5,-24,5,-52,7,-22,-8,-7,7,13,59,-127,4,35,-12,-15,10,1,-90,59,22,0,-7,7,-101,-10, 
  /* [6][0][][] */ 21,-5,4,7,-10,-3,3,-10,-2,8,1,7,-14,7,1,7,2,-9,127,13,6,8,15,-35,2,2,27,-10,-9,-3,-5,9,1,-13,27,-38,-1,-46,69,15,1,-4,-10,6,-12,3,9,-13, 
  /* [7][0][][] */ -40,-13,-15,34,-14,76,-6,51,-3,26,-9,127,77,-5,-3,-2,-6,-25,-11,-26,-30,-5,-23,72,2,-33,-54,-33,-11,-16,-18,-18,3,4,-20,2,8,-60,97,1,26,25,-61,-59,20,-18,0,4, 
  /* [8][0][][] */ -51,-43,2,8,-5,5,-2,32,0,-70,8,44,45,5,6,7,-13,54,-29,6,-53,19,-10,-15,5,-2,10,45,-8,119,-12,28,0,-1,-12,-127,-107,64,34,25,20,1,111,-25,5,32,22,31, 
  /* [9][0][][] */ -22,-2,-6,33,19,-39,-2,-4,55,-43,3,52,-50,3,17,5,-2,24,-30,-18,52,4,-8,-10,4,9,41,-29,9,4,14,1,-12,27,74,-96,-12,-127,-96,6,-25,17,59,12,2,11,-18,-46, 
  /* [10][0][][] */ -19,-10,-27,-127,50,88,14,-12,-2,34,26,12,54,-44,-38,20,33,-41,59,-33,34,-27,43,57,-46,-106,9,-35,43,36,53,-39,-33,-80,23,-4,16,-48,3,-35,-33,-71,-13,5,11,24,17,-40, 
  /* [11][0][][] */ -3,53,-5,63,37,-60,-80,-22,1,61,-13,5,-10,48,2,-73,20,39,4,-9,-51,-103,11,1,13,-49,19,-14,47,-37,26,-83,48,-20,-35,-84,96,22,7,-127,0,69,87,-60,-4,-55,32,30, 
  /* [12][0][][] */ 122,-2,-17,10,2,21,1,101,19,-10,-53,-22,-1,20,-12,-3,-7,6,-9,-10,2,-3,1,14,-6,19,-3,9,-1,17,-9,8,5,-69,-9,4,-17,-15,-28,-3,-21,-74,6,-127,-58,-12,79,-3, 
  /* [13][0][][] */ 12,4,1,4,5,-12,0,1,-3,8,3,18,-5,7,4,-1,5,-1,9,4,10,-11,7,-2,0,3,17,127,11,-4,5,-4,2,1,-37,19,10,-3,7,-13,-11,-5,-1,3,1,-4,-10,-11, 
  /* [14][0][][] */ 58,-22,45,-71,52,31,35,-96,-64,-49,2,114,-63,-1,55,13,55,29,-50,70,17,20,67,-20,22,58,-28,-109,25,-36,54,36,0,64,-127,-52,-41,45,90,15,-36,10,49,-2,-1,-2,16,-25, 
  /* [15][0][][] */ -1,-54,-74,-34,48,23,75,-50,-8,22,-17,-35,87,17,-92,68,55,56,85,-82,-98,-16,60,-12,-93,47,24,52,63,48,43,-52,24,59,90,127,-24,-100,-11,-27,96,59,107,-49,-7,-37,-15,58, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.030815204605460167, 0.036821726709604263, 0.052478879690170288, 0.042373865842819214, 0.041739121079444885, 0.047628503292798996, 0.03794492781162262, 0.02907286025583744, 0.025188222527503967, 0.021743206307291985, 0.033731330186128616, 0.026314588263630867, 0.043999824672937393, 0.054996725171804428, 0.022724846377968788, 0.023375209420919418, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 1591, 34654, -1266, 47663, 4207, 135289, -1710, 44731, 3842, 29219, 25302, 6075, 2382, 30493, -955, -2897, -688, -76, 2995, -1835, 468, -3192, -374, -18601, -5209, 40180, 126926, 94511, 3436, 1798, -1991, 687, 23708, 567, 32715, -5918, 38091, 429, 51817, 2322, 81, 55767, -1300, 2458, 37808, 242, 2492, 44113, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.0513636930845678e-05, 3.4479089663363993e-05, 0.00016485151718370616, 4.91683604195714e-05, 0.00013948029663879424, 5.5142641940619797e-05, 0.00014966703020036221, 0.00013302576553542167, 7.9205499787349254e-05, 4.4765736674889922e-05, 4.6755500079598278e-05, 8.0188794527202845e-05, 4.1553437768016011e-05, 4.1176874219672754e-05, 0.000159487608470954, 0.00018090664525516331, 0.00015063416503835469, 7.9535333497915417e-05, 0.00010665383888408542, 0.00018314096087124199, 7.5553405622486025e-05, 0.00020866870181635022, 8.8556531409267336e-05, 0.00012184349179733545, 0.00011650721717160195, 0.00011224097397644073, 3.1744744774186984e-05, 7.8725177445448935e-05, 0.0001097838394343853, 0.0001213701325468719, 9.8438838904257864e-05, 0.00014287681551650167, 4.7498600906692445e-05, 0.00012757144577335566, 3.0552349926438183e-05, 6.2352926761377603e-05, 0.00015283362881746143, 9.3520597147289664e-05, 0.00011164139868924394, 0.00010283657320542261, 0.00011601773439906538, 0.00010596652282401919, 9.8383505246601999e-05, 8.9460903836879879e-05, 2.7421443519415334e-05, 0.00014704291243106127, 0.00010093647142639384, 2.5441311663598754e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-94,98,71,52,-34,106,-64,60,-86,-80,47,52,-41,-70,-89,102,80,49,79,67,-74,-83,51,-32,-41,-64,-65,-66,62,-62,-115,-13,41,69,63,-66,54,-49,-23,51,-73,58,62,-93,11,74,-35, 80,-96,127,86,-77,-68,-57,-85,96,-102,-63,73,80,-109,-93,92,-38,97,84,127,86,-116,52,72,-50,-77,-69,-81,56,80,-30,-127,-86,78,81,83,-82,84,-82,-15,77,-94,83,90,-72,-127,92,-104, 34,-46,70,37,18,-42,-48,-39,43,-31,5,33,30,-79,-55,-2,-53,39,34,71,34,-54,31,25,-28,-46,-44,-22,32,32,88,-90,-84,44,36,34,-30,39,-38,-11,41,-40,35,43,-5,-9,36,-74, 
  /* [0][1][][] */ 92,-111,-40,93,54,-83,127,-88,86,-111,-71,82,84,-112,-13,-127,127,108,74,-38,82,109,-127,72,73,-76,-92,-100,-127,86,-68,-9,-86,70,106,96,-85,79,-80,89,85,-100,87,93,-87,106,92,-90, 127,-127,-65,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-21,97,-65,127,127,-52,127,127,68,127,127,-127,-127,-127,53,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-79,-34,66,37,-63,-48,-62,55,-42,-62,58,49,-53,-17,10,-63,52,57,-31,57,65,49,64,64,-64,-62,-44,37,55,127,14,-62,69,48,49,-49,60,-59,55,61,-58,54,62,-62,-67,58,-58, 
  /* [0][2][][] */ 45,-50,-46,50,26,-54,62,-42,41,-73,-4,40,55,-75,82,-79,72,49,35,-31,24,-10,-76,29,-24,-45,-47,-49,-75,31,-42,91,-71,36,48,43,-26,37,-42,-86,47,-49,39,47,-23,16,40,-72, 73,-74,-49,80,-57,-65,-73,-66,50,-77,-66,62,74,-50,127,31,-47,58,61,-45,53,-18,41,65,-49,-67,-76,-62,32,60,-25,118,-54,64,57,59,-49,61,-67,-105,69,-67,59,64,-84,49,62,-51, 41,-41,-27,46,28,-21,-17,-33,14,-26,-53,28,32,5,65,23,-37,21,28,-33,28,0,38,41,-26,-29,-48,-23,33,33,61,66,-1,34,15,22,-22,30,-28,-55,29,-32,26,29,-64,9,30,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034218295477330685, 0.0014653613325208426, 0.0070061893202364445, 0.0020896552596241236, 0.005927912425249815, 0.0023435621988028288, 0.0063608484342694283, 0.0056535946205258369, 0.0033662335481494665, 0.0019025438232347369, 0.0019871087279170752, 0.0034080236218869686, 0.0017660210141912103, 0.0017500170506536961, 0.0067782234400510788, 0.007688532117754221, 0.0064019518904387951, 0.003380251582711935, 0.004532787948846817, 0.0077834906987845898, 0.0032110197935253382, 0.0088684195652604103, 0.0037636526394635439, 0.0051783481612801552, 0.0049515566788613796, 0.0047702412120997906, 0.0013491516001522541, 0.0033458198886364698, 0.0046658129431307316, 0.0051582306623458862, 0.0041836504824459553, 0.0060722646303474903, 0.002018690574914217, 0.0054217861033976078, 0.0012984748464077711, 0.0026499992236495018, 0.006495429202914238, 0.0039746253751218319, 0.0047447592951357365, 0.0043705543503165245, 0.0049307537265121937, 0.0045035770162940025, 0.0041812988929450512, 0.0038020883221179247, 0.0011654113186523318, 0.0062493239529430866, 0.0042897998355329037, 0.0010812557302415371, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 618, 893, 2243, 503, 8219, 17182, 2436, -79, -682, -620, 1257, 877, 3081, 1171, 23537, 3018, 2091, -1212, -362, 3471, -1554, 11418, 11661, 9479, 5262, 186, 3044, 3765, 8780, -526, 7499, 5884, 541, -137, 4755, 3164, -1838, 442, -506, 5570, 1209, -634, -909, 68, 1028, 3181, 725, 887, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039443254354409873, 0.00075760926119983196, 0.0002561681903898716, 0.00033184228232130408, 0.0002680269826669246, 0.00023656825942452997, 0.00045666040387004614, 0.00025073520373553038, 0.00044822736526839435, 0.00072213460225611925, 0.00079426850425079465, 0.00030461137066595256, 0.00040285181603394449, 0.00064523401670157909, 0.00015400598931591958, 0.00041892300941981375, 0.00024652408319525421, 0.00033520327997393906, 0.00021753946202807128, 0.00026164084556512535, 0.00038688309723511338, 0.00022444245405495167, 0.00031712351483292878, 0.00016423939086962491, 0.00030565159977413714, 0.00028486966039054096, 0.0022745686583220959, 0.00049503782065585256, 0.0001959338114829734, 0.00040032566175796092, 0.00034398646675981581, 0.00020230628433637321, 0.00069904822157695889, 0.00024698919150978327, 0.00077261129627004266, 0.0005815252079628408, 0.00075459870276972651, 0.00028779337299056351, 0.00026499346131458879, 0.0003314598579891026, 0.00014856518828310072, 0.00022512899886351079, 0.000301417923765257, 0.00025948300026357174, 0.0018991954857483506, 0.00044042436638846993, 0.00030902112484909594, 0.0013028960675001144, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,0,68,-31,38,22,-28, 
  /* [1][0][][] */ 36,70,46,17,19,-43,102,127, 
  /* [2][0][][] */ -30,1,3,6,-127,-23,14,5, 
  /* [3][0][][] */ 91,-2,-13,-127,-126,21,32,-24, 
  /* [4][0][][] */ -127,44,-18,-16,62,-12,41,25, 
  /* [5][0][][] */ -109,-31,16,-12,-127,11,8,91, 
  /* [6][0][][] */ -10,-127,22,-23,15,1,-2,37, 
  /* [7][0][][] */ -69,-3,3,106,127,-39,-31,9, 
  /* [8][0][][] */ 65,-1,-6,-127,3,-16,-35,-34, 
  /* [9][0][][] */ 2,-127,-9,-8,-1,91,-57,84, 
  /* [10][0][][] */ -103,-4,1,25,-127,83,81,-19, 
  /* [11][0][][] */ 126,6,39,19,-69,-54,-33,-127, 
  /* [12][0][][] */ -1,13,45,-6,10,-72,127,55, 
  /* [13][0][][] */ 65,-25,-14,-14,116,127,110,-49, 
  /* [14][0][][] */ 108,54,6,19,-127,-8,-36,-17, 
  /* [15][0][][] */ -13,-127,11,-13,8,1,8,41, 
  /* [16][0][][] */ -54,-11,8,-7,-127,3,17,0, 
  /* [17][0][][] */ -28,103,-126,0,13,-127,127,-88, 
  /* [18][0][][] */ 127,-22,-39,12,-59,21,17,106, 
  /* [19][0][][] */ 127,-42,-18,4,49,-9,43,14, 
  /* [20][0][][] */ 127,25,-12,116,5,36,10,-50, 
  /* [21][0][][] */ 3,31,-69,-1,-13,97,-127,-88, 
  /* [22][0][][] */ -127,21,32,3,-27,5,-64,-38, 
  /* [23][0][][] */ -36,-53,3,23,-127,59,71,-17, 
  /* [24][0][][] */ 127,0,-13,1,-101,-16,-3,9, 
  /* [25][0][][] */ 27,-14,-3,-27,127,59,55,-37, 
  /* [26][0][][] */ 2,-108,12,-36,21,-127,77,-49, 
  /* [27][0][][] */ -14,-127,22,-13,-2,-58,35,-6, 
  /* [28][0][][] */ -92,25,-40,26,-24,-43,127,117, 
  /* [29][0][][] */ -8,40,13,4,-5,44,-109,-127, 
  /* [30][0][][] */ 127,-31,-8,16,-70,9,-35,-8, 
  /* [31][0][][] */ -31,-40,73,-8,1,-115,127,84, 
  /* [32][0][][] */ -66,25,13,5,-127,-91,-87,40, 
  /* [33][0][][] */ -32,16,3,21,-127,-60,-48,16, 
  /* [34][0][][] */ 16,-127,43,-4,-6,81,-69,67, 
  /* [35][0][][] */ -26,-48,-127,-8,-5,-70,47,-55, 
  /* [36][0][][] */ 8,127,60,7,-11,12,-23,-38, 
  /* [37][0][][] */ -127,32,34,-23,64,-24,-16,-120, 
  /* [38][0][][] */ -127,-18,-52,-11,39,22,26,104, 
  /* [39][0][][] */ 2,-38,76,-13,16,-92,127,104, 
  /* [40][0][][] */ -38,-16,-7,-36,-127,114,123,-35, 
  /* [41][0][][] */ -127,57,19,-82,-96,-98,-98,45, 
  /* [42][0][][] */ -41,-123,-100,-6,-12,74,-127,-95, 
  /* [43][0][][] */ -64,10,-20,-127,102,62,74,3, 
  /* [44][0][][] */ 127,-10,25,-93,34,-33,-15,42, 
  /* [45][0][][] */ -32,-127,-4,-21,6,-74,90,4, 
  /* [46][0][][] */ 99,-7,-1,-28,127,-32,-34,-1, 
  /* [47][0][][] */ 127,4,-3,96,-4,26,21,-38, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00074731768108904362, 0.0014354160521179438, 0.0004853529972024262, 0.0006287300493568182, 0.00050782144535332918, 0.00044821767369285226, 0.00086521863704547286, 0.00047505932161584496, 0.00084924086695536971, 0.0013682034332305193, 0.0015048730419948697, 0.00057713658316060901, 0.00076326937414705753, 0.0012225025566294789, 0.00029178979457356036, 0.00079371890751644969, 0.0004670806520152837, 0.00063509802566841245, 0.00041216448880732059, 0.00049572181887924671, 0.00073301396332681179, 0.00042524334276095033, 0.0006008429336361587, 0.00031117867911234498, 0.00057910749455913901, 0.00053973268950358033, 0.0043095462024211884, 0.00093793094856664538, 0.00037122899084351957, 0.00075848313281312585, 0.0006517392466776073, 0.00038330271490849555, 0.0013244624715298414, 0.00046796185779385269, 0.0014638397842645645, 0.001101795700378716, 0.0014297120505943894, 0.00054527213796973228, 0.00050207390449941158, 0.00062800548039376736, 0.00028148130513727665, 0.00042654410935938358, 0.00057108607143163681, 0.00049163342919200659, 0.003598339855670929, 0.00083445676136761904, 0.00058549159439280629, 0.0024685519747436047, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -38885, 26064, -13394, -11474, 19500, -3971, 32459, 45819, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048383625107817352, 0.00069623277522623539, 0.0014499716926366091, 0.0017354418523609638, 0.00083329918561503291, 0.00061663222732022405, 0.00076389726018533111, 0.0010054177837446332, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-8,-32,22,10,-19,-6,5,-118,127,-34,110,119,13,70,-21,-15,-30,7,10,-7,1,-17,-39,30,-101,7,64,-13,4,25,-39,-6,-79,109,20,-6,-8,-11,-24,118,-6,43,-16,-26,27,-10,-15, 
  /* [1][0][][] */ -5,31,127,6,-6,-28,4,-84,34,4,23,7,-27,3,-7,-121,9,-61,6,2,-30,37,18,-29,-21,-10,13,2,4,-1,10,-3,-4,14,20,13,-18,-33,75,-56,9,40,-14,26,-18,9,24,-3, 
  /* [2][0][][] */ 8,-47,15,-46,33,28,-4,-32,5,-1,-5,17,-7,62,8,-3,-44,127,-24,-32,-12,19,-38,-9,126,-1,3,-5,-28,-6,3,-38,-6,-13,-3,6,-10,-5,-10,11,12,-21,-16,-2,5,31,-22,-41, 
  /* [3][0][][] */ -2,-86,-1,7,4,-9,-10,-4,-2,-18,17,19,16,-7,51,1,-10,-19,4,19,-2,24,-21,3,5,50,5,9,-11,9,127,1,8,6,-4,4,-18,-14,-2,7,-10,7,-6,27,-9,3,4,37, 
  /* [4][0][][] */ -96,9,-2,-1,-1,-29,2,7,36,-34,16,-15,-29,-2,-10,-12,-4,3,-4,26,12,-32,18,4,-8,40,6,106,2,2,-4,-23,2,-127,-35,12,-3,-9,5,5,-53,-4,-4,18,-55,-1,11,4, 
  /* [5][0][][] */ -22,26,21,5,-49,15,0,41,16,4,12,12,-2,-39,9,34,-9,-84,21,10,39,-42,9,40,14,1,-71,-37,-39,-28,21,3,-8,-65,-8,-67,58,9,-40,20,17,-43,7,4,127,-7,-35,-7, 
  /* [6][0][][] */ -31,-33,-15,0,42,-35,0,-16,-13,0,35,-25,-14,37,-1,-57,5,3,-6,-27,-42,55,-9,-80,-1,-7,-59,-73,25,42,-15,-1,-1,-66,-11,74,-64,-47,4,-63,-10,15,14,45,127,-40,34,17, 
  /* [7][0][][] */ 10,38,-71,23,-20,11,5,61,-1,-9,66,-36,8,-28,-14,-7,-15,-127,37,-48,60,43,19,-62,21,-16,20,6,-18,29,-10,0,5,35,-8,-23,-12,-49,-38,-72,-13,-27,36,63,-37,-20,-4,0, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020563039928674698, 0.02958989143371582, 0.061623796820640564, 0.073756277561187744, 0.03541521355509758, 0.026206869632005692, 0.032465633004903793, 0.042730256915092468, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52627, 6, 10324, -12, 5679, -5531, 920, 20654, 1546, 23664, -1962, 14240, -6235, -793, 19975, 2353, 167, 19852, 29510, 10927, 206, -158, -334, 9857, -7992, 28663, 45632, 35510, 3076, 106, 130, 1011, 578, 16950, -6559, 15564, -11694, 21225, -22109, 107460, 19934, 20063, 12452, -1408, 16608, 3483, 1539, -102, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030825927387923002, 0.00031997053883969784, 0.00016767290071584284, 0.0003089409729000181, 0.00013889385445509106, 9.7324809757992625e-05, 0.0013562359381467104, 0.00016844423953443766, 0.00014298995665740222, 0.00020350680279079825, 9.5981122285593301e-05, 0.00030067056650295854, 0.00026515123317949474, 0.00024034189118538052, 0.00012382275599520653, 0.00065348332282155752, 0.00017969681357499212, 0.0001969445584109053, 8.3046841609757394e-05, 0.00015795086801517755, 0.0002824513940140605, 0.00019486460951156914, 0.00017380036297254264, 0.00020198944548610598, 0.00016262930876109749, 0.000126714410725981, 0.00058402551803737879, 9.5497249276377261e-05, 0.00021989863307680935, 0.0072655845433473587, 8.4818428149446845e-05, 0.00017831787408795208, 0.0014813781017437577, 0.00017100620607379824, 0.00020549539476633072, 0.00015767001605127007, 0.00036020824336446822, 0.00012470153160393238, 0.00027996150311082602, 2.2291818822850473e-05, 0.00016224214050453156, 5.8912592066917568e-05, 0.00012892912491224706, 0.00015694140165578574, 0.00014434731565415859, 0.00013738132838625461, 0.00018209085101261735, 0.00013453754945658147, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,82,-1,28,15,8,9,7,-8,-8,-45,8,-1,8,-23,-114,-7,-23,127,-9,-3,6,-5,8,-4,4,16,98,20,28,37,-27,2,33,-2,3,18,-69,-8,-9,16,2,-6,-10, 127,10,15,-127,28,88,10,10,122,127,6,43,-49,-23,5,8,127,-56,-60,-56,-102,26,-108,15,17,70,-31,-83,23,20,10,-122,5,-61,127,10,-39,-47,-6,118,-78,-99,-29,2,-34,-9,-127,23, -32,-3,8,15,-1,66,4,17,27,8,-14,31,-14,-3,16,4,-102,29,-3,78,-33,-12,-17,-6,-5,-58,-2,29,-16,4,4,-21,7,-23,16,-18,0,46,41,-11,50,37,-15,11,-44,2,-1,-6, 
  /* [0][1][][] */ 127,7,1,-97,14,-27,35,-16,8,9,-13,53,-7,-1,18,-33,0,-50,-60,-85,9,-74,-123,-18,5,98,-15,-127,-8,32,12,-107,17,-53,-3,127,-2,58,-41,42,-61,-127,39,-89,-44,-14,-12,-4, 27,-127,-127,113,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-82,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-80,127,127,127,-122,101,107, 54,5,49,-13,5,-61,44,18,-24,14,-106,-8,0,-40,127,4,63,-66,-71,87,13,-47,12,-33,1,6,-38,68,20,39,0,4,33,-44,8,67,-5,64,67,-9,-81,8,-83,-31,27,-17,-11,5, 
  /* [0][2][][] */ -53,-7,25,-16,7,35,-37,23,7,-24,12,32,6,-5,-38,18,5,22,-14,107,5,-33,-15,-12,-4,22,0,50,-10,3,47,-32,-18,-44,-32,-39,0,30,9,-23,9,-4,42,-37,-36,18,-11,18, 69,124,75,20,16,-20,123,36,17,-3,43,26,-4,0,-91,25,-57,-57,-37,124,-38,48,12,19,32,-64,-40,29,76,1,127,22,86,-26,7,-36,-25,-17,-12,118,-27,-12,-40,45,21,-33,6,-127, -42,-4,7,-3,5,-5,-61,8,-19,-11,-41,-40,19,-9,-10,12,33,23,-8,-127,23,-11,5,-9,-7,10,-11,-55,-15,8,5,9,-20,87,-37,-22,-4,36,25,-61,4,9,-36,7,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013101018965244293, 0.013598747551441193, 0.0071260980330407619, 0.013129990547895432, 0.0059029888361692429, 0.0041363043710589409, 0.05764002725481987, 0.0071588801220059395, 0.00607707304880023, 0.0086490390822291374, 0.004079197533428669, 0.012778499163687229, 0.011268927715718746, 0.010214529931545258, 0.0052624670788645744, 0.027773041278123856, 0.007637114729732275, 0.008370143361389637, 0.0035294906701892614, 0.0067129116505384445, 0.012004183605313301, 0.0082817459478974342, 0.0073865153826773167, 0.0085845515131950378, 0.006911745760589838, 0.0053853620775043964, 0.02482108399271965, 0.0040586329996585846, 0.0093456916511058807, 0.30878734588623047, 0.0036047832109034061, 0.0075785093940794468, 0.062958568334579468, 0.0072677633725106716, 0.0087335538119077682, 0.0067009753547608852, 0.015308850444853306, 0.0052998149767518044, 0.011898363940417767, 0.00094740226631984115, 0.0068952906876802444, 0.0025037850718945265, 0.0054794875904917717, 0.0066700093448162079, 0.006134761031717062, 0.005838706623762846, 0.0077388612553477287, 0.0057178456336259842, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 58709, 6976, 5621, 7494, 1431, 10832, -2024, -251, 662, 2163, 3575, 305, 1373, -910, 836, -1923, 4647, 10287, -275, 24056, 3267, 3026, 6544, -550, 3279, 4152, 25213, 10075, -68, -2471, 101, 2332, -2013, 9186, 3110, 7179, 6883, 4165, 20565, 1738, -684, 2677, 1146, 2858, 4311, 1927, -1137, 2593, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.3562339821364731e-05, 0.00032476213527843356, 0.00027527505881153047, 0.00042787202983163297, 0.0015661697834730148, 0.00046574571751989424, 0.00094829581212252378, 0.0011907020816579461, 0.00083025608910247684, 0.0006367017631419003, 0.00064147892408072948, 0.0005226061912253499, 0.0007008894463069737, 0.0005236767465248704, 0.00055689405417069793, 0.0018898440757766366, 0.000345133914379403, 0.00041497542406432331, 0.0018256542971357703, 0.00011200005246791989, 0.0003690032463055104, 0.00033562089083716273, 0.00060801440849900246, 0.00094822765095159411, 0.00036339406506158412, 0.00027984852204099298, 0.00016060211055446416, 0.00036091904621571302, 0.00089929200476035476, 0.0010619283420965075, 0.00057650858070701361, 0.00035886568366549909, 0.00099522387608885765, 0.00023675615375395864, 0.00033784849802032113, 0.00025846200878731906, 0.00053397496230900288, 0.00032790930708870292, 0.00011296836601104587, 0.0026100827381014824, 0.00083602534141391516, 0.0010333862155675888, 0.00043436684063635767, 0.00053190201288089156, 0.00027632614364847541, 0.00057543168077245355, 0.0010295442771166563, 0.0010129135334864259, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 97,33,-1,1,127,13,-66,-26, 
  /* [1][0][][] */ -6,0,1,127,13,-4,6,12, 
  /* [2][0][][] */ 26,-127,-21,36,-4,-58,75,10, 
  /* [3][0][][] */ 127,-30,-10,14,-1,-30,28,6, 
  /* [4][0][][] */ 7,-41,127,-17,-17,-54,15,-101, 
  /* [5][0][][] */ 75,-8,8,-2,127,29,-25,-6, 
  /* [6][0][][] */ -15,101,-16,127,28,53,-79,-59, 
  /* [7][0][][] */ -5,127,1,4,1,-10,9,-2, 
  /* [8][0][][] */ 127,46,-9,3,-44,-15,-11,-45, 
  /* [9][0][][] */ -127,14,12,22,51,6,-13,7, 
  /* [10][0][][] */ -82,-10,16,127,33,26,-16,1, 
  /* [11][0][][] */ -127,11,11,-71,35,8,-27,-56, 
  /* [12][0][][] */ 127,36,2,19,-45,-13,12,-42, 
  /* [13][0][][] */ -7,68,-127,-4,14,98,-69,69, 
  /* [14][0][][] */ -49,-21,-24,127,22,20,-6,-41, 
  /* [15][0][][] */ -5,127,2,-6,2,-15,10,-47, 
  /* [16][0][][] */ 5,-123,-8,8,5,-126,127,-23, 
  /* [17][0][][] */ 19,127,-4,-15,2,72,-81,-19, 
  /* [18][0][][] */ -9,49,-127,5,14,64,-38,58, 
  /* [19][0][][] */ -61,6,8,7,-127,0,18,33, 
  /* [20][0][][] */ -127,-7,-3,-3,57,-36,48,-1, 
  /* [21][0][][] */ -71,3,-2,0,-127,-2,9,6, 
  /* [22][0][][] */ -127,-34,-4,-9,95,-15,31,54, 
  /* [23][0][][] */ -27,-21,-8,-6,-7,88,-127,-99, 
  /* [24][0][][] */ -3,36,-127,4,11,45,-19,73, 
  /* [25][0][][] */ 108,-37,-9,127,-93,-4,26,-57, 
  /* [26][0][][] */ -1,-16,-5,-1,-6,126,127,-34, 
  /* [27][0][][] */ 69,-3,8,19,127,28,38,-19, 
  /* [28][0][][] */ 13,127,-65,9,2,91,-29,113, 
  /* [29][0][][] */ -8,12,-5,-9,0,82,-127,-83, 
  /* [30][0][][] */ 6,-7,5,-127,-8,-2,-4,-11, 
  /* [31][0][][] */ -77,7,-6,0,-127,16,10,-9, 
  /* [32][0][][] */ -10,35,15,-127,-9,40,-90,-111, 
  /* [33][0][][] */ -74,-11,-1,-2,-127,49,42,-2, 
  /* [34][0][][] */ -127,81,18,32,38,-32,25,21, 
  /* [35][0][][] */ -37,127,-3,-4,10,-105,85,-20, 
  /* [36][0][][] */ 2,45,12,-30,0,108,-127,-29, 
  /* [37][0][][] */ 35,-77,-5,35,9,-127,96,-15, 
  /* [38][0][][] */ -5,-127,-6,-18,5,67,-55,81, 
  /* [39][0][][] */ 5,-127,-18,-7,0,-8,-50,-106, 
  /* [40][0][][] */ 96,56,0,-7,-48,65,-127,-93, 
  /* [41][0][][] */ 18,-123,21,-1,-2,84,-63,127, 
  /* [42][0][][] */ 49,-10,-6,-127,-41,5,9,-30, 
  /* [43][0][][] */ -92,-35,20,-127,38,6,-25,1, 
  /* [44][0][][] */ -2,-24,-8,10,-33,101,127,-14, 
  /* [45][0][][] */ -127,-29,5,8,10,-2,21,-7, 
  /* [46][0][][] */ 18,66,127,-6,6,17,3,22, 
  /* [47][0][][] */ -1,14,15,127,6,4,9,-5, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00016850820975378156, 0.00074392801616340876, 0.00063056865474209189, 0.00098012038506567478, 0.0035876028705388308, 0.0010668770410120487, 0.0021722477395087481, 0.0027275243774056435, 0.0019018558086827397, 0.0014584836317226291, 0.0014694266719743609, 0.0011971265776082873, 0.0016055174637585878, 0.0011995788663625717, 0.0012756693176925182, 0.0043290387839078903, 0.00079059333074837923, 0.00095057830912992358, 0.0041820001788437366, 0.00025655693025328219, 0.00084527046419680119, 0.00076880201231688261, 0.0013927699765190482, 0.0021720915101468563, 0.00083242158871144056, 0.00064104498596861959, 0.00036788894794881344, 0.00082675210433080792, 0.0020599954295903444, 0.0024325440172106028, 0.0013206000439822674, 0.00082204851787537336, 0.0022797451820224524, 0.00054233393166214228, 0.00077390472870320082, 0.00059205526486039162, 0.0012231688015162945, 0.00075113715138286352, 0.00025877502048388124, 0.0059788795188069344, 0.0019150712760165334, 0.0023671630769968033, 0.00099499791394919157, 0.0012184203369542956, 0.00063297635642811656, 0.0013181332033127546, 0.0023583623114973307, 0.0023202665615826845, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -2558, -25809, 26009, 20875, 3868, 259, 37617, 10504, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0014050027821213007, 0.00067944196052849293, 0.0014616746921092272, 0.0011920855613425374, 0.0010965561959892511, 0.0012744038831442595, 0.00089116889284923673, 0.00071196147473528981, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,-5,12,-93,9,27,6,4,4,4,2,-1,99,0,0,6,0,-12,-4,0,77,-4,-3,3,29,34,10,8,8,6,4,-127,11,5,-1,-1,-28,2,-18,37,10,-27,-10,3,2,-3,4,1, 
  /* [1][0][][] */ -39,-7,-2,-3,45,26,-28,82,18,7,-36,-21,15,0,20,37,0,45,16,-52,0,22,127,23,-26,-1,52,6,27,2,17,-8,10,-8,-12,-21,6,-56,12,7,-4,-9,-85,-6,-38,10,-49,-103, 
  /* [2][0][][] */ -61,13,-3,8,48,-8,30,25,-11,57,10,-7,9,0,11,57,0,13,-127,29,1,13,4,-13,-32,2,39,4,8,29,23,6,2,-11,-10,-9,12,1,5,5,42,-6,-28,5,26,-62,27,18, 
  /* [3][0][][] */ 1,3,1,11,-4,27,3,-1,61,17,0,-2,24,0,-30,-6,0,-2,-8,0,-3,0,9,-15,-10,-7,-6,-2,-7,-4,2,-9,-46,41,-55,-4,4,2,2,-127,-4,6,0,-50,-1,0,-2,4, 
  /* [4][0][][] */ -1,-7,83,32,1,-19,-1,-5,4,-1,-5,-5,-78,0,-8,2,0,11,5,3,66,4,-1,-7,-14,33,-8,44,-6,0,2,99,2,8,-2,1,16,-15,-11,-16,-1,-127,6,0,2,-4,1,3, 
  /* [5][0][][] */ -5,42,3,-9,2,48,23,12,-20,31,6,52,27,0,-127,-2,0,14,-37,20,-8,10,-11,43,-19,-2,29,-2,-15,21,22,-16,50,31,-38,-4,5,17,-49,18,26,-11,-11,30,19,60,21,23, 
  /* [6][0][][] */ -24,-57,5,10,39,-47,-22,10,27,-24,-15,89,-7,0,-127,40,0,-7,48,-16,-8,2,26,-33,29,-2,-7,-10,49,-14,-11,-6,92,-32,27,1,-5,-9,-67,-21,-15,-16,-3,-26,-17,-82,-18,-26, 
  /* [7][0][][] */ -111,-25,-14,3,127,14,69,29,15,2,29,-38,-25,0,84,101,0,9,3,62,-9,-1,-30,42,14,9,47,4,43,60,59,-7,-8,-20,-21,-23,4,25,29,32,68,1,-22,-13,64,0,63,81, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.059712614864110947, 0.028876282274723053, 0.062121171504259109, 0.05066363513469696, 0.04660363495349884, 0.054162163287401199, 0.037874676287174225, 0.030258361250162125, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 70117, 59555, 63724, 42631, 353, 13793, 4321, 26570, 21714, 23292, 29621, 2713, -45736, -127, 43037, 486, -204, 29024, 2398, 1960, -14057, -10215, 43921, 32819, -19126, 44373, 40096, 20987, -2708, 14036, -7735, -51335, 13140, 95191, 27760, 1953, 57403, -69, 161782, -23973, 14933, -27716, 3500, 103144, 310, 70490, 1084, -21932, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.5153114923741668e-05, 6.5699336118996143e-05, 0.00012957646686118096, 0.00011060977703891695, 0.0001923580130096525, 0.00020191757357679307, 0.00014656156417913735, 5.9092511946801096e-05, 0.00010275184467900544, 3.258090146118775e-05, 8.0306090239901096e-05, 2.5832938263192773e-05, 0.00016545641119591892, 0.005541567225009203, 6.0248694353504106e-05, 0.00024608228704892099, 0.0027484172023832798, 1.7827569536166266e-05, 9.1735004389192909e-05, 0.00016498558397870511, 9.9625802249647677e-05, 0.00012007654004264623, 0.00013287359615787864, 3.2813841244205832e-05, 8.7090462329797447e-05, 6.2049570260569453e-05, 3.3744316169759259e-05, 4.1790797695284709e-05, 0.00031714956276118755, 6.3838742789812386e-05, 5.0557417125673965e-05, 0.00020062402472831309, 0.00018855417147278786, 8.6921454567345791e-06, 9.3434580776374787e-05, 0.00015416710812132806, 1.660612178966403e-05, 0.00042661963379941881, 2.8890395697089843e-05, 8.3840961451642215e-05, 7.4302624852862209e-05, 0.00019884463108610362, 8.858033106662333e-05, 9.4455881480826065e-06, 0.00016066293756011873, 8.2751241279765964e-05, 0.00022536098549608141, 9.5283088739961386e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-23,-7,-16,7,-39,-79,-69,-27,-51,8,66,34,-71,114,-42,-113,-85,37,-6,-1,-71,-110,-79,-35,-123,-63,-19,72,15,95,26,-127,-89,-7,54,18,47,-127,78,-76,-14,104,-109,-3,-34,-87,107, 75,12,-28,-29,57,-127,-127,-82,61,-76,-115,109,37,-82,-1,62,-52,-113,58,7,12,-112,-127,-71,-4,-127,-119,-39,-53,21,-56,54,28,-127,64,83,14,72,-91,127,-127,7,123,-127,1,-23,-127,94, -32,43,7,-5,-65,-109,-59,-18,88,-8,-127,38,8,-71,-101,-11,-127,-26,27,11,-16,-76,-35,-25,-11,-29,-58,-12,-10,18,-25,9,107,-85,69,31,14,36,-5,15,-79,4,6,-80,-18,5,-56,14, 
  /* [0][1][][] */ -85,-127,-45,-43,-11,55,97,-106,-26,-109,-20,112,90,-64,27,-96,-121,-95,90,-76,40,-88,-102,-127,41,-114,-78,-37,127,-59,127,84,-43,-85,-14,84,-36,-77,-107,90,42,59,104,-109,-92,-117,82,119, 127,-82,-127,-127,127,41,92,-127,101,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-118,127,-99,-127,-127,-119,-127,-70,127,28,-111,127,127,-68,-127,-95,90,61,127,127,-116,-114,-127,124,127, -53,31,-61,-85,-120,-24,30,-37,127,-20,-76,35,56,-70,-26,-43,-37,-29,53,-72,55,-81,-38,-23,47,-5,-45,-59,15,-89,-36,20,30,-98,116,22,-36,-62,1,-15,37,54,9,-74,-59,-37,64,35, 
  /* [0][2][][] */ -60,-106,-34,-33,-1,35,-5,-34,-38,-58,-15,60,76,-127,-127,-64,-43,-18,63,75,50,-33,-13,-59,32,-52,-12,-57,75,29,78,63,108,-26,-38,-9,-94,35,-17,31,10,37,14,-57,96,-77,4,31, 88,-73,-88,-84,81,19,7,-46,48,-70,-32,57,82,-26,16,93,-24,-30,77,118,81,-53,-19,-56,93,-67,-19,-98,-50,40,-45,112,-18,-49,66,6,-127,50,-14,-1,10,32,15,-65,127,-99,-12,39, -28,29,-41,-36,-80,-19,21,-11,58,-4,-13,32,31,-43,111,-29,-93,-4,29,59,71,-28,-1,-2,42,2,-4,-63,-14,28,-20,40,-90,-43,65,3,-20,21,27,-39,6,35,-7,-14,62,-34,-5,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036190073005855083, 0.0027922217268496752, 0.0055069997906684875, 0.0047009154222905636, 0.0081752156838774681, 0.0085814967751502991, 0.006228866521269083, 0.0025114316958934069, 0.0043669533915817738, 0.0013846883084625006, 0.0034130087587982416, 0.0010978998616337776, 0.0070318975485861301, 0.23551659286022186, 0.0025605694390833378, 0.010458496399223804, 0.1168077290058136, 0.00075767171801999211, 0.0038987377192825079, 0.007011887151747942, 0.0042340965010225773, 0.0051032528281211853, 0.0056471275165677071, 0.0013945882674306631, 0.0037013445980846882, 0.0026371066924184561, 0.0014341333881020546, 0.0017761088674888015, 0.013478856533765793, 0.0027131466194987297, 0.0021486901678144932, 0.0085265208035707474, 0.0080135520547628403, 0.00036941617145203054, 0.0039709694683551788, 0.0065521020442247391, 0.00070576014695689082, 0.018131334334611893, 0.0012278418289497495, 0.0035632408689707518, 0.0031578615307807922, 0.0084508964791893959, 0.0037646640557795763, 0.00040143748628906906, 0.00682817492634058, 0.0035169275943189859, 0.0095778414979577065, 0.0040495311841368675, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4892, 97, 10719, 6655, 7244, 7830, 9774, -30, 30, -390, 2487, 601, 13143, -91546848, 3421, 19196, -73901360, -127, -521, 9289, 4253, -22, -62, 511, 4072, -1000, 71, 686, 4693, 1903, 3023, 16611, 4285, 311, 303, -1731, 288, 3539, -169, 11964, 2469, 14568, -214, -90, 13909, 191, 6620, 4707, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043127909884788096, 0.00042560623842291534, 0.00029601337155327201, 0.00028154754545539618, 0.0002751364663708955, 0.00026738029555417597, 0.000390982924727723, 0.0014748626854270697, 0.00039262685459107161, 0.0019487073877826333, 0.00059307139599695802, 0.0014067146694287658, 0.00016655153012834489, 1.7715918732008618e-09, 0.00077145127579569817, 0.00017141657008323818, 1.7715918732008618e-09, 0.0057729356922209263, 0.00035698452848009765, 0.00041490537114441395, 0.00024608051171526313, 0.0040812725201249123, 0.00029189389897510409, 0.0012197311734780669, 0.0009275294141843915, 0.00052720931125804782, 0.0019910160917788744, 0.0017937866505235434, 0.00024231747374869883, 0.0015502391615882516, 0.00097744818776845932, 0.00014302045747172087, 0.00017823188682086766, 0.010406075976788998, 0.00047532041207887232, 0.00068736216053366661, 0.005269449669867754, 0.00035726395435631275, 0.0021337135694921017, 0.0002925796143244952, 0.0011589557398110628, 0.00015340416575782001, 0.00062032492132857442, 0.0095124533399939537, 0.00036177667789161205, 0.00040047010406851768, 0.00042352304444648325, 0.00018243289378006011, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,48,-45,25,-20,-48,25, 
  /* [1][0][][] */ 70,72,-26,-109,11,-17,-89,127, 
  /* [2][0][][] */ 26,8,-40,127,53,108,45,82, 
  /* [3][0][][] */ 81,77,-87,127,-99,-8,-8,14, 
  /* [4][0][][] */ -40,-87,68,14,8,26,-35,-127, 
  /* [5][0][][] */ 12,6,-41,41,3,-30,48,127, 
  /* [6][0][][] */ 54,-12,-127,-99,106,19,60,-54, 
  /* [7][0][][] */ 127,22,23,-22,29,-4,95,-64, 
  /* [8][0][][] */ 17,-100,13,101,4,26,-12,-127, 
  /* [9][0][][] */ 98,-127,10,0,-8,19,-117,87, 
  /* [10][0][][] */ -127,-37,-116,16,-11,5,-89,43, 
  /* [11][0][][] */ -22,-49,-7,-112,-127,-41,47,-16, 
  /* [12][0][][] */ 14,5,-42,65,-73,-19,55,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -7,-39,-7,18,46,127,47,40, 
  /* [15][0][][] */ 36,9,20,-127,69,44,-56,68, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,28,127,19,-31,-10,27,28, 
  /* [18][0][][] */ 80,-127,18,28,-4,21,-112,2, 
  /* [19][0][][] */ -127,-13,25,71,-58,-55,-97,62, 
  /* [20][0][][] */ 34,26,-47,110,-28,-127,-2,65, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -74,-15,-127,6,1,10,-94,3, 
  /* [23][0][][] */ -105,112,-25,-27,10,-17,127,-73, 
  /* [24][0][][] */ 2,-59,-56,83,-10,-61,97,127, 
  /* [25][0][][] */ 18,38,41,26,119,127,-70,-47, 
  /* [26][0][][] */ -89,-31,-127,-1,9,20,-92,-3, 
  /* [27][0][][] */ 1,-32,-33,4,-46,127,73,51, 
  /* [28][0][][] */ 2,-19,-23,35,28,127,53,67, 
  /* [29][0][][] */ 84,23,127,-4,-10,-13,78,-9, 
  /* [30][0][][] */ -78,127,-25,-26,6,-5,107,-47, 
  /* [31][0][][] */ -46,-93,-18,5,32,-63,127,100, 
  /* [32][0][][] */ 2,-1,-56,127,-24,107,95,121, 
  /* [33][0][][] */ -1,59,-11,-99,13,-4,-7,127, 
  /* [34][0][][] */ -25,86,-8,-98,32,-5,17,127, 
  /* [35][0][][] */ 127,16,-24,-58,11,32,112,-56, 
  /* [36][0][][] */ -127,-3,22,62,-38,19,-114,89, 
  /* [37][0][][] */ -11,-28,-16,19,27,127,45,46, 
  /* [38][0][][] */ 11,22,8,79,127,-1,-15,35, 
  /* [39][0][][] */ 13,25,33,-117,29,-3,-46,127, 
  /* [40][0][][] */ 87,25,127,-5,-13,-7,90,-14, 
  /* [41][0][][] */ 0,-35,-31,84,55,127,69,103, 
  /* [42][0][][] */ -80,-2,127,25,-35,19,-27,51, 
  /* [43][0][][] */ -16,-57,1,93,-21,-1,19,-127, 
  /* [44][0][][] */ 35,-12,-76,-127,58,-26,-2,-108, 
  /* [45][0][][] */ -99,127,-7,-61,8,-7,79,-57, 
  /* [46][0][][] */ -127,-22,49,28,-29,41,-91,43, 
  /* [47][0][][] */ 121,16,127,4,35,-20,113,-12, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00095843139570206404, 0.00094582460587844253, 0.00065783044556155801, 0.00062568299472332001, 0.00061143568018451333, 0.00059419916942715645, 0.00086888123769313097, 0.0032775870058685541, 0.00087253452511504292, 0.0043306117877364159, 0.0013179824454709888, 0.0031261416152119637, 0.0003701274108607322, 3.937008052901092e-09, 0.0017143959412351251, 0.000380938989110291, 3.937008052901092e-09, 0.012829192914068699, 0.00079332658788189292, 0.00092204409884288907, 0.00054686464136466384, 0.0090698106214404106, 0.00064867571927607059, 0.0027106082998216152, 0.0020612482912838459, 0.0011716170702129602, 0.0044246343895792961, 0.0039863316342234612, 0.0005385020631365478, 0.003445096081122756, 0.0021721827797591686, 0.00031783431768417358, 0.00039608468068763614, 0.023125419393181801, 0.0010563044343143702, 0.0015275246696546674, 0.011710296384990215, 0.0007939476054161787, 0.0047417511232197285, 0.00065019959583878517, 0.0025755469687283039, 0.00034091004636138678, 0.0013785478658974171, 0.021139523014426231, 0.00080397620331496, 0.00088996457634493709, 0.00094119511777535081, 0.00040542057831771672, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -723, -44919, -8701, -12678, -32348, -2373, -24342, -27172, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022894262801855803, 0.002640861552208662, 0.0025151320733129978, 0.0012224403908476233, 0.00130821717903018, 0.001882237265817821, 0.0015890545910224319, 0.0010249251499772072, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,5,3,121,1,-2,1,1,-127,-94,-9,0,121,-3,0, 
  /* [1][0][][] */ 0,-29,1,93,78,12,22,8,1,-3,127,-43,0,31,-14,0, 
  /* [2][0][][] */ 0,3,-2,-11,-58,5,12,2,1,4,-18,1,0,127,-8,0, 
  /* [3][0][][] */ 0,-11,-16,-127,81,24,67,15,-2,60,0,40,0,-3,20,0, 
  /* [4][0][][] */ 0,46,-29,31,-56,32,127,11,0,-59,19,-11,0,-4,19,0, 
  /* [5][0][][] */ 0,-16,-12,-1,-23,-22,-11,16,0,11,-5,-46,0,-3,127,0, 
  /* [6][0][][] */ 0,21,0,2,46,-22,-29,-7,2,-115,119,67,0,127,60,0, 
  /* [7][0][][] */ 0,10,-14,127,6,-3,20,9,-2,66,-54,75,0,-10,55,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.097300618886947632, 0.11223661154508591, 0.10689310729503632, 0.051953714340925217, 0.055599231272935867, 0.079995080828666687, 0.06753481924533844, 0.043559316545724869, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 11114, 55899, 11090, 11465, 3644, 13481, 541, -4522, 6160, 29885, 14491, -445, 25437, 10988, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00023731336113996804, 7.1801732701715082e-05, 0.00031156709883362055, 0.00015283215907402337, 0.00091344770044088364, 0.00038096573553048074, 0.0071989819407463074, 2.575194594101049e-05, 0.00028696455410681665, 0.00019720559066627175, 0.00075802032370120287, 0.00072724185883998871, 0.00026852687005884945, 0.00018687568081077188, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,92,-2,-72,66,-95,77,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,15,-29,14,-28,1,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,66,2,3,33,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,38,-39,52,-77,0,-1,4,40,2,-27,23, 23,-4,32,-2,-27,39,-34,21,-125,-13,0,84,-58,0,-28,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0100858174264431, 0.0030515736434608698, 0.013241601176559925, 0.0064953668043017387, 0.038821525871753693, 0.016191042959690094, 0.30595672130584717, 0.0010944576933979988, 0.012195993214845657, 0.0083812372758984566, 0.032215863466262817, 0.030907778069376945, 0.011412392370402813, 0.0079422164708375931, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 4546, -100435, 39049, 387878, 1055, 17568, -5374, 408828, 53893, 19750, 786434, -1073741824, 30068, 19904, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00022712111240252852, 0.00014951567573007196, 3.9879880205262452e-05, 9.2343325377441943e-06, 0.00017619245045352727, 0.00015400424308609217, 0.00023402099031955004, 3.1275822038878687e-06, 4.2895309888990596e-05, 0.00015269637515302747, 7.2204206844617147e-06, 1.1533876076441629e-09, 0.00012790938490070403, 0.00012035328836645931, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 49,2,36, 0,-15,22, -127,-114,-63, 
  /* [1][1][][] */ 4,0,4, -18,9,1, -1,-31,6, 
  /* [1][2][][] */ -2,23,5, -2,13,5, 36,-17,14, 
  /* [2][0][][] */ 27,-7,-4, 72,109,3, 43,-35,11, 
  /* [2][1][][] */ 6,11,2, 72,127,-22, 25,0,-1, 
  /* [2][2][][] */ 49,-63,24, 78,-38,-14, 39,-47,21, 
  /* [3][0][][] */ 10,34,1, 37,98,20, -6,1,-9, 
  /* [3][1][][] */ 22,33,0, 70,127,22, -19,-23,0, 
  /* [3][2][][] */ 7,-1,-3, 24,21,2, -7,-8,-2, 
  /* [4][0][][] */ 43,74,-4, 26,91,0, -4,16,6, 
  /* [4][1][][] */ 45,85,46, 40,127,39, 40,59,-6, 
  /* [4][2][][] */ 54,69,27, 46,116,8, -17,25,24, 
  /* [5][0][][] */ 8,2,-118, -3,0,-107, -6,24,-31, 
  /* [5][1][][] */ 7,-41,-127, 1,-44,-116, 0,10,-26, 
  /* [5][2][][] */ 0,12,-15, 6,2,-7, 5,15,-10, 
  /* [6][0][][] */ 27,-61,36, 49,-86,41, 12,-18,11, 
  /* [6][1][][] */ 39,-95,63, 66,-127,73, 10,-26,19, 
  /* [6][2][][] */ 22,-34,14, 15,-44,26, -11,9,0, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ -108,-104,-125, -96,-87,-110, -101,-94,-114, 
  /* [8][1][][] */ -110,-108,-127, -99,-91,-110, -101,-94,-114, 
  /* [8][2][][] */ -111,-108,-127, -97,-90,-110, -101,-95,-114, 
  /* [9][0][][] */ -23,-6,8, -15,-8,-2, 3,3,-11, 
  /* [9][1][][] */ 96,112,-9, 77,127,16, -6,19,26, 
  /* [9][2][][] */ -22,-22,19, 6,-29,1, 12,4,-18, 
  /* [10][0][][] */ -24,-83,-18, 34,94,20, -8,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-26,-1, 
  /* [10][2][][] */ -31,-19,2, 37,23,-11, -8,-1,7, 
  /* [11][0][][] */ -14,-27,-2, 7,-46,2, 11,-101,-52, 
  /* [11][1][][] */ -47,-45,-21, -38,-67,-41, -13,-59,-53, 
  /* [11][2][][] */ -9,-41,-81, 118,127,64, -38,15,-46, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 7,15,10, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-8,-39, 77,-29,-54, 34,-8,-20, 
  /* [14][1][][] */ 89,-18,-75, 127,-43,-91, 62,-17,-36, 
  /* [14][2][][] */ 55,-10,-46, 74,-23,-54, 28,-5,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.057915881276130676, 0.038126494735479355, 0.010169369168579578, 0.002354754600673914, 0.044929072260856628, 0.039271079003810883, 0.059675350785255432, 0.00079753343015909195, 0.010938303545117378, 0.03893757238984108, 0.0018412071513012052, 2.9411381774480105e-07, 0.032616890966892242, 0.030690087005496025, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.44998431205749512, } };
const TfArray<1, int> quant46_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.43655049800872803, } };
const TfArray<1, int> quant50_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.42803847789764404, } };
const TfArray<1, int> quant53_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.52779769897460938, } };
const TfArray<1, int> quant54_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.25463172793388367, } };
const TfArray<1, int> quant58_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19259661436080933, } };
const TfArray<1, int> quant61_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27879795432090759, } };
const TfArray<1, int> quant62_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.19978116452693939, } };
const TfArray<1, int> quant65_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.33222493529319763, } };
const TfArray<1, int> quant66_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.049268994480371475, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.092854738235473633, } };
const TfArray<1, int> quant69_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
