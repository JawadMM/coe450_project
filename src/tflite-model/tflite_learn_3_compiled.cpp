/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.12.2024 19:57:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 20148, -31142, -29979, -25250, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00024618132738396525, 0.00019482012430671602, 0.00020345010852906853, 0.00023580093693453819, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 35,-35,-67,-52,127,-34,-6,-48,116,-31,87,93,-65,-29,49,-10,6,-43,-106,29,-5,72,-67,101,-17,25,0,-7,104,-47,35,-20, 
  /* [1][0][][] */ 60,76,-85,-19,-44,43,122,40,-48,-69,-85,25,96,-53,76,-127,119,-98,1,-52,8,-72,-89,-26,-11,-110,64,-55,-83,-109,-20,-47, 
  /* [2][0][][] */ -34,106,19,79,-53,-10,89,42,-82,-122,80,-78,-88,74,-127,72,52,69,81,-65,-13,11,-23,-44,25,-68,85,-92,-41,19,73,79, 
  /* [3][0][][] */ 78,-70,70,13,-19,93,34,-4,-5,-97,32,65,65,-10,-127,-22,95,-74,94,1,-100,4,5,-36,84,-18,-83,79,-83,99,34,35, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0039957789704203606, 0.0031621330417692661, 0.0033022067509591579, 0.003827294334769249, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 130, 8, -122, -65, 352, -23, -36, -53, 248, 681, -533, 265, 59, -441, 1124, 253, -78, -338, 51, -231, -9, -43, 302, 1006, 177, 1247, 93, -33, 1415, -45, -173, 162, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2266168495407328e-05, 4.49928775196895e-05, 4.1953582694986835e-05, 4.3228814320173115e-05, 4.1347531805513427e-05, 4.7038240154506639e-05, 4.1437921026954427e-05, 4.3285577703500167e-05, 4.3363615986891091e-05, 5.299678014125675e-05, 4.3671003368217498e-05, 4.3918535084230825e-05, 4.5195709390100092e-05, 4.3125364754814655e-05, 5.0793940317817032e-05, 4.8449161113239825e-05, 4.1652390791568905e-05, 4.2154231778113171e-05, 5.7888391893357038e-05, 4.3922187614953145e-05, 4.2068291804753244e-05, 4.3559128243941814e-05, 4.8714777221903205e-05, 4.964156323694624e-05, 4.5943121222080663e-05, 5.1172686653444543e-05, 4.7126672143349424e-05, 4.1750576201593503e-05, 5.0566311983857304e-05, 4.361099490779452e-05, 4.0369606722379103e-05, 4.690892092185095e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -21,-36,85,8,56,-33,-72,-78,53,-73,-87,6,46,14,-28,42,-44,-24,-62,-56,-52,-84,5,91,-127,13,66,-39,92,-13,-11,-73,81,-47,-87,58,-93,-62,-69,28,66,-74,-77,86,47,-84,95,-13,22,-49,-19,75,-64,-36,-78,94,8,64,88,-89,-54,68,-41,47,-2,15,59,84,43,83,68,-97,88,-76,36,71,-92,12,-48,29,48,21,83,0,-45,-31,-64,88,28,101,-3,-107,19,41,33,22, 
  /* [1][0][][] */ -57,28,-71,-8,-40,87,38,8,73,-102,-98,96,45,-25,25,56,105,-40,22,127,-42,-6,31,29,20,24,-41,95,11,22,92,-56,51,100,-10,19,46,63,-14,-59,-56,9,-20,-91,-32,38,-27,-51,-25,-77,108,64,1,76,-69,-42,27,79,49,77,-53,99,-52,-87,-51,38,72,44,115,29,2,14,-117,97,-53,42,91,-49,-38,60,-73,80,-45,-108,29,115,-70,-56,81,80,93,32,86,108,31,1, 
  /* [2][0][][] */ 37,44,-71,85,-30,-32,82,93,-110,99,-49,120,103,-24,81,-127,-49,-26,31,74,-91,-25,117,19,-53,72,102,5,-62,107,88,95,-65,-26,-102,-101,-82,101,102,-39,-117,-81,6,3,-88,121,-22,-78,103,50,90,-77,-48,59,39,25,-55,101,-56,-13,-22,76,-34,68,102,44,40,77,-103,60,28,-72,40,-103,46,21,-44,-23,-4,2,38,-113,-1,-52,-2,-102,-27,-38,102,121,-40,11,-59,-62,-41,-76, 
  /* [3][0][][] */ 62,5,33,-40,-89,58,-113,41,35,26,64,-4,80,98,76,-11,109,97,-68,26,123,-90,-65,-111,-45,-105,-85,97,49,-88,88,10,-53,-38,-30,-8,-91,-19,39,40,-20,-89,-96,6,78,34,-43,-81,70,-87,35,6,82,19,100,-87,-117,-123,-117,-67,-93,34,-26,62,61,-29,-64,-47,-30,-74,0,106,17,-111,64,-53,39,96,94,-76,-84,-127,49,92,32,50,-46,-112,-74,50,-9,-107,97,-77,-82,32, 
  /* [4][0][][] */ 55,118,11,61,-21,-22,38,20,73,100,-3,60,38,-36,-3,-51,-14,6,-55,-10,108,-85,103,33,24,-5,73,-46,-47,10,-60,-43,74,127,24,-92,-17,-2,-118,51,-46,-56,-67,-85,47,112,40,68,29,-66,-36,-77,-73,53,-86,16,48,-100,62,27,4,-46,-49,-66,-44,63,10,-40,23,-90,-90,-85,-58,29,109,65,55,-5,-3,-46,10,-45,-111,-19,10,74,98,2,-126,-75,42,52,28,98,-111,-3, 
  /* [5][0][][] */ 92,-80,64,69,16,-127,21,52,91,-102,-5,-59,15,92,31,21,57,54,-80,78,33,45,15,-26,-121,-53,-17,-87,47,12,17,-106,-27,0,-74,19,-109,-32,42,21,-79,-55,37,89,-30,23,35,-47,-94,98,27,22,27,12,32,-14,87,50,-55,-42,34,-56,34,-61,-28,89,-27,31,68,0,93,-68,-40,65,-21,-69,1,-46,8,71,98,38,32,96,-75,75,-1,31,66,-88,111,62,-13,19,74,-73, 
  /* [6][0][][] */ 24,-44,116,80,-92,-69,2,73,-15,-83,11,-89,84,63,123,-127,46,4,-10,117,-72,-120,113,65,-81,-74,-6,-63,-23,-103,52,-75,-87,-120,-47,-107,-13,48,-107,91,96,61,29,-12,-111,116,-85,-43,-83,27,-19,-61,55,-54,104,-17,6,-6,-80,116,-89,-6,80,-72,-47,74,106,-41,97,0,-114,1,60,-63,-92,-42,-74,-106,-54,-33,42,-25,57,-21,-69,-83,-37,-89,96,104,107,20,-44,-50,91,-19, 
  /* [7][0][][] */ 117,67,-41,-47,-81,118,-19,0,111,0,-96,12,44,-86,47,64,53,14,-15,127,59,33,-10,87,-92,109,39,49,-75,123,-21,37,22,23,63,96,-112,90,-11,-24,97,-77,87,69,51,0,105,-111,51,-48,-104,-63,-36,81,21,38,112,-95,-9,-62,12,-17,90,-118,-66,-53,66,29,-91,24,55,87,81,32,58,55,-55,48,-99,37,94,-35,-10,-72,87,37,-110,98,87,8,92,68,-48,-21,6,-56, 
  /* [8][0][][] */ 14,39,-34,-79,67,24,-71,-16,18,39,48,101,11,-44,-80,-57,-64,99,-43,4,27,-19,90,112,-87,88,49,88,-67,2,-84,118,96,-26,51,3,127,3,-11,69,80,105,-107,-113,-7,-28,-24,111,25,-101,-76,-5,-46,1,-33,-114,51,112,-84,113,106,56,33,115,-31,-44,-15,95,-100,52,43,-3,79,68,12,31,-53,116,86,87,35,83,-120,-83,29,41,78,-44,33,-38,-85,100,-84,-113,-58,54, 
  /* [9][0][][] */ 12,15,115,63,87,-57,-22,-81,54,42,14,50,-18,-53,-70,6,11,13,-63,-55,5,99,-71,-71,127,-8,6,41,-6,-43,-66,97,62,17,38,-8,-37,18,-16,-20,46,-40,54,-68,77,24,-82,56,62,-16,-67,-38,80,-44,-55,81,93,-40,0,20,-68,85,75,-63,-45,17,104,54,-32,91,109,-68,15,82,-89,-55,-51,-74,-13,108,36,41,78,37,-22,-71,42,-1,81,34,-7,97,94,-9,50,-26, 
  /* [10][0][][] */ -73,74,78,-76,-18,110,94,16,28,34,10,-75,95,69,-44,-3,-37,71,-101,-51,-23,14,42,-79,12,42,-127,-122,-46,89,-102,-79,78,88,105,70,-43,1,-42,24,-41,108,-122,-41,-104,-65,-9,-68,-12,10,28,16,51,12,-57,-38,-96,-30,28,-63,-13,72,111,28,116,-82,-110,-32,23,-32,-100,-65,71,53,-79,93,-11,50,53,10,70,-13,52,91,-109,58,85,-30,33,2,-15,-65,-60,-42,-49,-76, 
  /* [11][0][][] */ 102,-6,-5,116,109,37,63,32,123,84,-67,120,-3,-53,35,-52,-51,-101,69,33,32,85,29,-100,-108,-83,-17,77,83,-24,21,-43,-77,-78,74,28,-60,72,-24,-45,-26,101,-75,6,-36,-61,-87,-80,81,104,105,42,-87,-97,13,29,-82,-65,-37,-67,-72,95,79,5,5,84,-44,44,86,49,-85,-66,39,122,-91,57,-75,40,-35,83,-105,-9,-67,-62,46,-79,17,-34,-90,-9,27,-127,-59,-46,-73,-43, 
  /* [12][0][][] */ 21,68,-50,5,73,-11,-30,36,-69,55,-12,23,-43,20,49,-76,-92,-31,-46,-83,32,-6,16,94,-89,-36,99,-89,92,0,-32,94,-74,-66,-43,18,-9,-68,-13,51,113,29,-100,-37,-16,-74,-33,114,-37,-104,-58,89,32,2,-84,91,-30,-47,38,68,67,115,3,63,102,32,-39,124,62,101,35,63,86,127,-10,-2,-44,31,-106,-87,-52,108,55,15,-33,37,59,108,-82,-97,108,25,110,-31,42,81, 
  /* [13][0][][] */ 100,-67,91,85,95,127,69,55,61,-99,0,-34,82,61,59,-61,-116,-79,-80,37,61,-40,106,-53,-80,28,-4,9,-85,-80,73,43,34,91,-35,33,-81,-33,18,58,-68,76,-64,12,-51,20,-9,-37,27,103,-50,-98,-106,20,107,-85,-41,17,-34,-89,-37,110,-73,1,-48,-67,-105,76,-36,-23,90,2,-103,23,-71,-53,-97,57,70,-72,49,-107,88,12,-89,-108,81,117,-14,-61,-84,61,104,-40,58,-17, 
  /* [14][0][][] */ -27,-59,102,93,87,-33,8,-78,-49,-20,90,91,-18,-53,-58,-33,-24,-35,17,10,-41,57,32,71,-32,-48,-12,48,-88,-121,-52,40,100,1,4,23,121,109,57,-85,8,-73,43,97,71,-91,66,-52,113,27,62,46,99,1,-11,7,-44,41,62,127,-19,-42,-25,75,-76,-1,95,-91,-75,-67,-46,90,38,85,62,-30,43,-52,70,52,44,19,-114,-27,-80,-60,-59,91,90,10,80,-39,80,74,-26,57, 
  /* [15][0][][] */ 10,-14,-20,64,91,-45,59,-80,54,11,-59,11,114,-1,-71,-98,92,18,-83,41,50,21,74,107,77,60,41,85,27,77,65,-69,1,12,-54,7,-45,110,100,-64,23,113,-38,-8,29,-62,-31,-63,-7,-60,-12,47,-81,-88,-26,-1,79,44,-25,96,-45,-50,10,88,-11,98,-60,-4,-49,10,78,-54,18,-26,65,-90,19,60,97,71,-62,46,-91,-50,-98,-27,-83,46,85,70,-107,-13,43,127,-95,101, 
  /* [16][0][][] */ -66,2,102,-63,30,101,-55,44,49,50,-110,75,-18,-45,-52,-71,112,80,61,71,121,81,-42,55,-62,64,-70,60,-100,18,44,8,-102,80,54,62,-42,58,-48,-66,26,-50,77,94,67,109,109,-12,-56,-107,13,114,-51,118,72,56,19,96,55,10,127,106,41,65,59,16,-38,103,56,105,-37,-8,33,98,66,87,-9,98,-111,-19,18,-84,70,14,13,107,108,14,87,18,-8,106,80,-23,-74,32, 
  /* [17][0][][] */ 29,-118,26,76,-46,-115,-74,-107,37,-93,80,48,99,56,-125,44,27,49,102,125,-102,-20,8,-60,22,62,-85,25,106,-51,-39,77,-36,-30,30,1,-55,96,-89,-37,-104,-47,-23,-17,0,6,81,-119,82,109,-21,22,-23,74,96,-83,-122,82,-87,-121,26,-101,70,97,-92,-83,37,-112,-108,-10,106,26,10,-127,-73,62,114,-55,37,-67,5,-23,-86,-101,-122,68,76,-42,14,72,-104,-113,-19,98,5,14, 
  /* [18][0][][] */ -61,79,78,-83,-25,-100,-78,0,-7,60,-82,-31,-33,29,48,-58,18,-12,42,-17,79,-35,18,-58,-13,-73,-12,81,22,21,3,12,31,-20,-127,-74,-24,30,-43,33,-23,1,-35,-3,-80,15,25,1,17,-14,50,19,-81,-14,7,71,-31,29,-15,-91,68,87,8,24,-61,-85,-25,38,45,-60,-55,81,-68,-35,-56,-77,39,42,-2,-53,-38,-5,-16,-58,77,-19,56,48,-76,-49,-46,64,65,-71,39,-18, 
  /* [19][0][][] */ 18,26,74,38,59,-80,92,88,91,-63,26,-8,-87,31,-56,62,70,-103,127,52,-24,77,-55,11,89,-81,27,-59,-88,-118,-65,42,81,-83,35,-3,9,-70,-55,-99,41,-115,-82,8,-86,26,71,-91,-28,34,-41,41,-18,12,3,-13,30,96,3,-25,51,-48,96,61,-70,-4,-26,-2,-9,52,83,-51,-61,-118,-56,-77,-26,-109,13,105,54,-109,-32,74,-86,-9,6,-6,84,27,-3,60,-34,107,66,-44, 
  /* [20][0][][] */ -10,70,91,122,-59,97,28,61,32,10,-79,0,-2,89,43,-48,-53,-36,-36,-33,21,-37,-75,-69,113,-73,-99,63,21,11,-41,127,97,49,0,54,45,-34,-14,-95,-86,-29,-85,-105,-28,-64,-73,107,60,-122,-103,40,66,117,49,-5,99,72,101,105,112,-60,-67,-25,-29,-64,-42,34,-77,-68,-70,83,-66,-59,26,30,114,81,120,118,87,15,81,-15,63,117,-15,80,17,95,58,85,26,22,-10,14, 
  /* [21][0][][] */ 85,71,70,-105,127,-49,70,14,-5,-62,-75,45,13,34,-53,-87,-100,-32,50,29,101,-50,69,-84,68,-92,-34,78,22,31,-12,-12,3,15,-89,-114,118,89,-114,-37,-12,4,26,-17,-100,-86,-86,91,-27,-58,-13,90,53,64,-95,20,-31,47,-32,119,49,-63,13,-11,82,27,-37,-73,-84,-3,67,75,27,-19,83,66,-108,-29,59,98,11,96,28,-78,23,-98,58,-87,-107,72,108,-96,-47,-66,60,-27, 
  /* [22][0][][] */ 37,-27,-67,-71,120,-41,94,60,-68,104,-63,-95,127,-90,-98,-61,40,86,-85,-54,85,-63,43,28,111,-1,-101,95,-51,-62,-44,-88,66,73,22,38,21,-5,-41,-104,10,1,7,96,58,-92,95,-13,-27,-66,18,-13,-41,-61,-38,36,-4,4,13,-19,106,-47,-72,-85,-32,21,-99,-46,104,97,0,6,-34,5,79,-76,45,-28,57,116,97,-73,-61,-98,75,77,108,-28,-46,38,-58,62,20,14,-21,91, 
  /* [23][0][][] */ 60,-58,35,79,101,-98,22,-69,74,-56,98,80,13,-78,34,-8,91,-15,-76,62,72,-48,114,-12,22,-15,86,45,65,6,73,-8,-25,56,33,43,115,-1,-73,14,-84,22,18,-76,-46,-75,98,40,83,-108,-108,-49,91,-33,-48,63,-56,-14,106,64,-107,-60,-61,-4,21,44,-78,-90,36,-5,120,-52,5,-19,-26,-54,28,9,102,127,-39,-30,-4,-81,98,15,112,-18,-86,40,98,10,85,-71,-53,70, 
  /* [24][0][][] */ -69,-38,-102,-86,-116,-121,-63,-85,62,107,72,34,95,64,-33,-116,-69,46,16,-57,96,-70,-47,-33,17,-25,76,48,104,45,10,-86,-3,10,25,34,-45,-76,48,-19,-63,-88,104,5,27,-32,46,74,-91,-55,-39,-1,58,54,60,-62,-29,81,11,6,88,4,26,94,-110,94,-39,-87,-89,57,-59,-18,-41,31,93,96,52,-66,-95,-77,-65,-96,-54,-113,9,65,-2,-96,31,-96,-11,-127,-11,38,-92,41, 
  /* [25][0][][] */ -52,-21,-37,19,98,-28,-62,65,65,-63,-5,32,78,19,-68,8,-39,78,39,-96,71,97,22,-24,45,-38,-61,56,74,-71,57,127,88,-64,54,84,116,-30,-4,-1,-50,110,-71,30,104,54,75,51,-66,76,-61,25,53,8,-32,14,6,64,-59,87,110,58,48,52,17,85,11,3,-86,8,10,-78,55,-99,84,47,74,95,38,50,59,59,-35,89,-40,-20,-65,-62,-7,-11,94,46,-95,-17,-15,-66, 
  /* [26][0][][] */ 53,-106,-16,-9,-87,8,-3,-7,-97,-110,105,76,-85,-39,17,-13,107,31,-79,-44,16,70,90,19,46,69,15,40,16,25,-84,11,-33,-50,-84,-94,-61,84,-43,107,-85,102,60,32,-59,71,-34,98,-20,35,-6,100,5,-40,4,-90,90,49,46,27,5,-97,73,-22,108,-9,-46,60,-61,81,69,98,67,-73,-82,10,57,-99,-82,14,-18,74,78,-59,79,8,-42,24,-70,107,18,28,-42,127,46,89, 
  /* [27][0][][] */ 8,19,-72,-112,-125,-74,-78,-17,43,121,31,-109,-10,61,82,-36,73,-10,58,-88,-88,6,-22,-28,-122,41,-112,2,67,27,-22,-15,80,74,-104,-76,-83,-63,-117,82,-93,21,29,24,103,30,75,108,104,70,70,-81,-87,-84,-2,-29,105,-10,-117,-86,-53,-46,-44,64,48,-48,-121,99,40,9,-108,13,72,-64,3,-90,46,-60,84,112,86,-28,127,-61,-75,-87,-25,28,-43,0,-46,-58,58,16,93,57, 
  /* [28][0][][] */ 92,18,119,82,-68,-23,-48,-42,3,-81,89,77,-74,-56,29,127,102,116,-29,41,-26,57,-58,-35,-52,74,-48,-11,-46,-86,15,18,-81,38,100,75,64,-77,-10,46,103,74,-62,64,-72,3,22,68,39,-58,-84,-14,-38,40,49,23,84,-1,110,84,-9,-15,-84,11,60,84,19,83,-74,35,-54,-10,73,48,5,-44,-95,-15,-36,62,-48,-57,69,-6,80,-78,75,-57,-93,-51,-18,-14,-31,31,-99,-56, 
  /* [29][0][][] */ 46,60,49,-57,-89,39,-120,9,92,-1,-94,-87,119,-103,-45,-55,-86,106,26,-47,-62,-38,59,8,-56,3,-42,-29,-90,18,112,-2,60,1,-81,-43,-3,108,-11,86,54,107,-44,91,1,109,-45,-20,23,4,61,-77,72,-98,127,56,-73,64,-38,94,-112,109,-87,-45,-49,-60,46,79,85,-86,52,-64,119,52,73,19,124,-55,-35,27,-1,-92,6,-78,64,117,42,76,-24,104,55,82,-107,39,9,56, 
  /* [30][0][][] */ 26,-73,-70,35,-105,23,-72,-19,119,-20,-5,-47,-107,16,58,10,-8,35,95,-110,41,-111,-124,10,-120,23,-76,120,-15,-115,-102,3,-89,-78,-126,-61,13,-21,-9,22,91,-83,-16,101,107,-50,105,59,-77,79,18,-112,96,-58,-14,106,-88,-59,-86,-61,-113,-5,-80,-31,-115,-96,-104,94,-64,114,48,-38,-95,110,40,-95,-63,-79,-84,-66,27,27,-112,-26,-117,27,-117,111,-42,-127,80,55,-36,-4,4,-77, 
  /* [31][0][][] */ 65,-82,40,76,39,86,-45,-83,-37,-15,-68,-82,100,-112,-33,86,-45,-72,32,69,80,38,-25,110,17,-94,44,40,-57,-36,53,113,14,25,-83,-4,90,-14,-57,-97,66,-51,-15,38,9,-37,-32,29,66,37,91,-8,-101,-57,-55,42,-80,58,-1,95,-30,-14,98,-65,81,115,-36,-81,75,-95,-92,26,-95,-56,13,9,-29,-42,54,65,-57,-62,79,78,60,100,-100,31,39,-30,-76,-38,14,127,16,-6, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002221312141045928, 0.0019121973309665918, 0.0017830271972343326, 0.0018372245831415057, 0.0017572700744494796, 0.0019991251174360514, 0.0017611115472391248, 0.0018396370578557253, 0.0018429536139592528, 0.002252363134175539, 0.0018560176249593496, 0.0018665377283468843, 0.0019208176527172327, 0.0018328280420973897, 0.0021587423980236053, 0.0020590892527252436, 0.0017702266341075301, 0.0017915548523887992, 0.0024602566845715046, 0.0018666929099708796, 0.0017879023216664791, 0.001851262990385294, 0.0020703780464828014, 0.0021097664721310139, 0.0019525826210156083, 0.0021748391445726156, 0.0020028834696859121, 0.0017743994249030948, 0.0021490682847797871, 0.001853467314504087, 0.0017157082911580801, 0.0019936291500926018, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2353, 3856, 9074, 3096, -3617, -4356, 20281, 3466, 3518, -1569, 10759, -287, -11362, 2420, 15948, 9590, 14370, 7583, -5487, -5891, 4587, 32080, 19931, 21817, 1880, 1146, 4675, 3806, 3164, -4959, 6336, -3033, -329, 6864, 149, 1210, 11884, 5295, -2792, 5282, 11220, 5421, 6587, 11977, 4796, 5693, 2316, 12878, 5497, -6120, -9161, 554, -342, -2099, 2433, 15, 209, -1036, -5308, 13228, -1004, 1546, -1302, -1864, -4254, 8267, 23674, 1944, -2652, 1105, 1861, 2108, 1497, -1375, 740, 14449, -478, 18706, 20268, -988, 12850, 2246, -535, 1470, 18445, 8324, 4539, 1619, 5900, 5210, -351, -7712, 797, -1954, -1920, -2640, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00027256901375949383, 0.00040550943231210113, 0.00026397703913971782, 0.00029167206957936287, 0.00028645948623307049, 0.00034006824716925621, 0.00016289703489746898, 0.00020258281438145787, 0.00016993602912407368, 0.0004165203426964581, 0.00018554949201643467, 0.00017743330681696534, 0.00022358016576617956, 0.0011526007438078523, 0.00019336903642397374, 0.00012268617865629494, 0.00013027987733948976, 0.00019225302094127983, 0.00035945317358709872, 0.00028632514295168221, 0.0001376220170641318, 8.5114792454987764e-05, 0.00015408391482196748, 7.7286626037675887e-05, 0.00013915117597207427, 0.0004135143244639039, 0.00064059783471748233, 0.00028774930979125202, 0.00016298335685860366, 0.00039150824886746705, 0.00023179328127298504, 0.00025232139159925282, 0.00017536665836814791, 0.00016702365246601403, 0.00031637790380045772, 0.00020320911426097155, 0.00016168768343050033, 0.00020298054732847959, 0.00022509114933200181, 0.00033450056798756123, 0.00011481280671432614, 0.00048230879474431276, 0.00022799154976382852, 0.00019339316349942237, 0.00040216447087004781, 0.00017681521421764046, 0.00021996736177243292, 0.00016965789836831391, 0.00024654765729792416, 0.00021547419601120055, 0.00017123986617662013, 0.00017566437600180507, 0.00041764593333937228, 0.0001553470065118745, 0.00031540231429971755, 0.00029344070935621858, 0.0004856784944422543, 0.00026545737637206912, 0.0002932968782261014, 0.00014266833022702485, 0.0007547572604380548, 0.00041987260919995606, 0.00020937234512530267, 0.00041270151268690825, 0.0004377939912956208, 0.0002334463206352666, 9.1820358647964895e-05, 0.00020579986448865384, 0.00043504667701199651, 0.00029912500758655369, 0.00022583632380701602, 0.00024298476637341082, 0.00091117300326004624, 0.00030207706731744111, 0.00025875156279653311, 0.00014871031453367323, 0.00028112385189160705, 0.00010034064325736836, 9.0134104539174587e-05, 0.0001667002507019788, 0.00011300016922177747, 0.00015936035197228193, 0.00014713084965478629, 0.00016191083705052733, 9.8921940661966801e-05, 0.00028520150226540864, 0.00051806145347654819, 0.0001721174776321277, 0.00011919480311917141, 0.00039318299968726933, 0.00024401055998168886, 0.00025875173741951585, 0.00027986671193502843, 0.00052416278049349785, 0.00032268627546727657, 0.00014347847900353372, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -36,93,-8,-127,-43,-21,-28,-77,-25,26,-2,93,18,-68,4,51, 
  /* [1][0][][] */ -42,17,-61,1,-30,-26,30,-80,56,59,-54,20,4,9,50,-127, 
  /* [2][0][][] */ 7,16,-28,29,49,11,-58,-68,127,-46,-9,9,-6,93,-70,18, 
  /* [3][0][][] */ 62,-77,-12,-127,0,-33,-22,-21,126,-14,82,35,-2,30,27,126, 
  /* [4][0][][] */ -79,63,2,44,7,-18,-13,27,5,10,27,-21,-127,-9,-26,29, 
  /* [5][0][][] */ 17,52,127,2,22,70,-85,68,-62,77,-41,-44,25,-56,-106,27, 
  /* [6][0][][] */ 30,-56,127,-117,47,9,-54,107,-77,-90,57,-47,-7,84,-37,82, 
  /* [7][0][][] */ 49,126,-30,-61,102,6,19,-57,127,86,-43,26,47,-29,68,33, 
  /* [8][0][][] */ 17,-93,14,-83,27,-54,22,-80,18,68,69,-11,14,127,80,58, 
  /* [9][0][][] */ 9,-35,-10,127,36,-13,44,-63,-66,94,31,-17,4,-58,-1,-14, 
  /* [10][0][][] */ -27,26,-53,-127,10,13,-23,55,54,-39,38,-21,-42,-47,-6,37, 
  /* [11][0][][] */ -2,18,31,-22,84,-29,86,-57,-81,28,5,25,-8,127,-71,-33, 
  /* [12][0][][] */ 98,6,-119,-5,40,-75,29,18,-4,66,-110,-63,-36,127,-6,10, 
  /* [13][0][][] */ -24,1,-26,19,2,-127,6,21,8,-14,11,4,12,-13,21,10, 
  /* [14][0][][] */ 37,-19,111,-42,65,-1,-127,-101,-24,-67,17,16,21,-74,-4,-37, 
  /* [15][0][][] */ -114,41,-30,-59,-11,3,127,58,-16,35,114,-35,-4,91,68,-6, 
  /* [16][0][][] */ 18,55,127,76,4,13,75,60,-81,4,-71,-16,10,1,7,-65, 
  /* [17][0][][] */ -37,-116,-18,36,-68,-21,-50,9,-127,-19,10,-44,-1,37,58,-40, 
  /* [18][0][][] */ 3,42,11,62,46,6,23,-1,76,40,-30,-25,15,127,49,26, 
  /* [19][0][][] */ 26,-24,51,0,90,15,-84,-51,-83,-65,-47,-127,-27,-41,8,-33, 
  /* [20][0][][] */ 81,-27,-39,-39,2,-127,0,19,-22,16,-73,-13,24,16,27,2, 
  /* [21][0][][] */ 74,-25,68,-36,-14,0,-39,116,14,-115,89,26,-20,127,27,108, 
  /* [22][0][][] */ -4,31,-26,127,-40,9,84,48,-21,44,-27,27,2,-2,17,-10, 
  /* [23][0][][] */ 107,-10,122,-125,49,-33,5,45,-7,3,-24,-42,27,-40,-127,16, 
  /* [24][0][][] */ -127,63,-8,-29,-6,112,32,-40,-18,28,114,-30,-74,7,76,-47, 
  /* [25][0][][] */ 28,16,17,27,16,17,67,-59,-9,-127,-20,-26,-17,-37,7,21, 
  /* [26][0][][] */ -33,-1,-1,2,-49,-8,-34,-32,-105,-42,3,-31,16,127,-32,50, 
  /* [27][0][][] */ -7,25,11,69,41,-26,-20,-33,59,15,-27,-5,0,127,-17,15, 
  /* [28][0][][] */ 8,80,62,61,127,-12,31,43,-83,-34,-41,-26,17,100,54,-42, 
  /* [29][0][][] */ 23,-16,-5,14,21,8,8,29,-38,-1,-37,-127,18,-24,1,13, 
  /* [30][0][][] */ -12,78,-46,75,-33,-19,43,-127,-50,66,-25,-7,64,33,71,80, 
  /* [31][0][][] */ -49,-23,-25,-81,-10,-6,-45,-116,30,90,-2,-127,-45,-42,10,24, 
  /* [32][0][][] */ -127,-75,-5,61,54,40,-12,15,5,-36,-92,51,64,8,52,65, 
  /* [33][0][][] */ -16,-49,-34,-2,-88,-4,-91,-5,61,26,11,-59,22,-127,125,31, 
  /* [34][0][][] */ 45,-10,56,35,44,18,-54,77,-82,-65,77,31,12,-4,-18,127, 
  /* [35][0][][] */ -63,72,-79,13,-16,-18,47,-126,119,104,-73,10,-8,3,104,-127, 
  /* [36][0][][] */ -46,41,21,127,29,31,98,39,3,33,-5,-2,-38,33,-69,-40, 
  /* [37][0][][] */ 22,-7,23,-57,9,10,-43,-39,-83,2,-15,-20,-2,-127,48,-36, 
  /* [38][0][][] */ 38,92,-13,-43,127,6,31,-36,104,80,-15,-6,6,-31,40,16, 
  /* [39][0][][] */ -27,68,-7,-127,-16,5,-41,34,43,-84,-30,-14,19,72,42,26, 
  /* [40][0][][] */ 8,-17,18,-114,-11,-30,1,-32,-127,-17,-17,-19,8,-110,101,-68, 
  /* [41][0][][] */ -11,-21,-37,-10,9,-22,13,-4,-33,25,-50,-18,-127,2,14,30, 
  /* [42][0][][] */ 127,81,-25,-24,-71,-53,-17,-53,6,13,74,-53,-53,45,99,-103, 
  /* [43][0][][] */ 4,98,-78,-6,57,-29,117,-47,35,77,-66,5,50,-127,-66,-51, 
  /* [44][0][][] */ -21,-21,-7,-40,46,-2,-73,-127,-10,-9,18,14,6,-28,68,-58, 
  /* [45][0][][] */ 4,48,-127,-35,34,-81,20,-87,-5,31,-15,-95,52,-38,51,-34, 
  /* [46][0][][] */ 9,-2,-25,-86,-16,10,34,-29,-119,-26,8,28,-5,-127,72,-38, 
  /* [47][0][][] */ 16,54,22,-21,127,-14,-25,19,-50,36,5,25,2,5,119,-25, 
  /* [48][0][][] */ -127,-77,-20,38,64,20,4,-15,3,-10,-98,44,52,11,70,46, 
  /* [49][0][][] */ 19,8,68,77,112,4,44,25,-127,-28,-53,-74,19,101,12,-41, 
  /* [50][0][][] */ 50,-24,-115,-1,50,-127,-34,-26,-44,-16,-29,-54,61,-32,-12,0, 
  /* [51][0][][] */ 7,47,52,7,25,-2,-2,22,-127,47,12,-122,14,-112,-14,91, 
  /* [52][0][][] */ -2,55,2,52,43,0,17,36,77,77,-18,-42,29,127,65,19, 
  /* [53][0][][] */ -11,-46,-10,-22,-101,-5,-90,3,59,14,21,-62,29,-123,127,24, 
  /* [54][0][][] */ 71,-24,-48,9,127,85,-105,-37,-94,10,-53,-71,12,-48,-3,-36, 
  /* [55][0][][] */ 52,-6,-2,-4,36,-48,-65,-127,-37,-79,-62,22,1,-26,29,-11, 
  /* [56][0][][] */ -18,13,21,-22,-14,-25,-98,68,-6,127,0,-15,24,4,2,10, 
  /* [57][0][][] */ 5,20,-42,-17,-48,-48,127,91,-38,34,-24,1,27,23,121,-13, 
  /* [58][0][][] */ 35,13,-125,46,115,127,-34,75,-105,-48,17,20,-60,36,10,-3, 
  /* [59][0][][] */ -92,74,113,16,-72,-61,126,127,20,11,22,-26,13,1,62,4, 
  /* [60][0][][] */ 0,-3,-50,-5,14,-127,-21,4,-3,-22,5,-14,25,-8,8,8, 
  /* [61][0][][] */ 31,-10,22,127,81,15,36,-3,-117,-2,9,43,-2,20,43,-66, 
  /* [62][0][][] */ -39,127,27,-57,-32,-19,-77,49,-13,-77,-91,-63,1,-81,-45,-35, 
  /* [63][0][][] */ -38,19,-27,127,-72,14,-62,-35,-56,-20,-19,-31,22,64,34,31, 
  /* [64][0][][] */ 13,-7,0,43,2,7,-11,57,20,-6,-22,-40,-4,-127,43,-9, 
  /* [65][0][][] */ -8,-34,8,-127,34,-38,56,-39,-15,40,2,-110,-7,-4,15,-48, 
  /* [66][0][][] */ 46,-6,73,-38,-10,-3,-10,115,5,-101,40,28,15,127,29,90, 
  /* [67][0][][] */ 5,58,-14,-127,-11,-8,-51,33,74,-102,-35,-7,37,75,67,33, 
  /* [68][0][][] */ -22,36,127,8,0,-11,-15,-10,-56,-36,-31,-39,29,-22,100,-34, 
  /* [69][0][][] */ 127,84,-17,-10,-88,-41,-21,-42,10,9,84,-48,-54,59,72,-98, 
  /* [70][0][][] */ 41,22,-47,-14,-14,26,45,127,-36,88,-35,9,18,72,-39,12, 
  /* [71][0][][] */ 5,4,0,7,0,-77,-6,24,-28,9,-74,5,-127,-1,45,49, 
  /* [72][0][][] */ 15,16,-127,16,11,7,31,82,-46,-20,2,-3,28,12,-3,1, 
  /* [73][0][][] */ -45,34,55,2,54,-47,-81,-127,22,-96,32,-18,22,-43,40,-22, 
  /* [74][0][][] */ 12,28,28,127,14,-12,-71,75,-82,28,-58,49,34,-123,38,-99, 
  /* [75][0][][] */ -5,39,-35,7,22,-17,23,-18,122,8,-25,-9,26,127,-43,-4, 
  /* [76][0][][] */ -1,-16,-1,20,4,-8,-13,62,15,-19,-18,-127,-10,-6,2,15, 
  /* [77][0][][] */ -20,22,-17,127,-45,22,88,92,14,39,3,46,-3,-2,-12,-2, 
  /* [78][0][][] */ -6,-9,31,-103,57,-21,-43,48,31,-30,18,-32,13,127,-2,62, 
  /* [79][0][][] */ -20,-96,-86,-59,-92,-6,12,-90,127,23,38,44,15,40,56,-54, 
  /* [80][0][][] */ -50,-20,108,-83,9,-54,51,-117,-78,70,-56,-82,63,115,127,-64, 
  /* [81][0][][] */ -44,53,-122,22,65,-127,-25,51,-1,-53,65,-13,26,3,8,-3, 
  /* [82][0][][] */ 121,-2,-5,11,10,-127,-19,13,-11,-22,-107,-3,121,5,5,20, 
  /* [83][0][][] */ -39,86,-127,-98,-40,-27,53,-121,70,39,-43,-111,27,62,62,102, 
  /* [84][0][][] */ -46,39,77,-48,-2,-25,54,-127,-34,42,-1,-72,17,59,80,6, 
  /* [85][0][][] */ -75,124,36,-127,-69,-34,-27,-6,-55,-13,-87,14,17,-11,-89,-26, 
  /* [86][0][][] */ -10,-1,-29,5,-27,-27,127,24,0,-19,1,14,9,31,82,-21, 
  /* [87][0][][] */ -17,-40,-1,-127,9,-45,59,-18,-13,11,-16,-122,-9,5,17,-43, 
  /* [88][0][][] */ 100,-24,47,-14,20,-78,1,17,-48,28,-127,-59,40,19,60,-7, 
  /* [89][0][][] */ 36,-25,-36,-53,32,-11,-34,-10,-56,19,26,-81,127,-14,24,-45, 
  /* [90][0][][] */ 7,-44,33,-67,53,-14,-69,76,53,-95,-43,-28,-5,106,34,-127, 
  /* [91][0][][] */ -43,-13,-15,-40,17,-9,-31,-100,13,57,-5,-127,-28,-5,4,10, 
  /* [92][0][][] */ -22,24,44,12,-1,-127,12,5,9,-31,0,-11,6,-21,17,3, 
  /* [93][0][][] */ 40,-22,127,-17,-48,57,19,-28,-21,36,-69,-27,-28,-3,23,10, 
  /* [94][0][][] */ 30,8,-9,-22,21,-14,-17,0,-24,-30,8,-50,127,-11,27,-32, 
  /* [95][0][][] */ 127,84,-2,29,-96,-16,-64,-9,-24,-13,84,-51,-45,22,78,-69, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00084969005547463894, 0.0012641104403883219, 0.00082290597492828965, 0.00090924079995602369, 0.0008929914329200983, 0.0010601080721244216, 0.00050780532183125615, 0.00063151936046779156, 0.00052974827121943235, 0.00129843526519835, 0.00057842070236802101, 0.00055311981122940779, 0.00069697521394118667, 0.0035930473823100328, 0.00060279690660536289, 0.00038245442556217313, 0.00040612657903693616, 0.00059931789292022586, 0.0011205375194549561, 0.00089257257059216499, 0.00042901452980004251, 0.00026533167692832649, 0.00048033182974904776, 0.0002409286389593035, 0.00043378144619055092, 0.0012890644138678908, 0.001996960723772645, 0.00089701224351301789, 0.00050807441584765911, 0.0012204640079289675, 0.00072257831925526261, 0.00078657135600224137, 0.00054667738731950521, 0.00052066938951611519, 0.00098625721875578165, 0.00063347176183015108, 0.00050403538625687361, 0.00063275924185290933, 0.00070168549427762628, 0.0010427517117932439, 0.00035791046684607863, 0.0015035201795399189, 0.000710727006662637, 0.00060287211090326309, 0.0012536831200122833, 0.00055119302123785019, 0.00068571290466934443, 0.00052888120990246534, 0.00076857273234054446, 0.00067170616239309311, 0.00053381273755803704, 0.00054760545026510954, 0.0013019440229982138, 0.00048426934517920017, 0.00098321598488837481, 0.00091475422959774733, 0.0015140246832743287, 0.00082752073649317026, 0.00091430585598573089, 0.00044474558671936393, 0.0023528344463557005, 0.0013088854029774666, 0.00065268465550616384, 0.0012865306343883276, 0.0013647524174302816, 0.00072773138526827097, 0.0002862352121155709, 0.00064154801657423377, 0.0013561880914494395, 0.00093247409677132964, 0.00070400844560936093, 0.00075746595393866301, 0.0028404353652149439, 0.00094167666975408792, 0.00080661644460633397, 0.00046358050894923508, 0.00087635841919109225, 0.00031279583345167339, 0.00028097859467379749, 0.00051966123282909393, 0.00035225987085141242, 0.0004967802669852972, 0.00045865678112022579, 0.00050473102601245046, 0.00030837324447929859, 0.00088906986638903618, 0.0016149732982739806, 0.00053654855582863092, 0.00037157064070925117, 0.0012256847694516182, 0.00076066370820626616, 0.00080661696847528219, 0.00087243953021243215, 0.0016339932335540652, 0.0010059225605800748, 0.00044727110071107745, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -5021, 23433, -16598, -11308, -12356, 10492, 23308, -52150, -5409, 17611, 23446, 8559, -6381, 8458, -5603, 6647, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00076511356746777892, 0.00043111923150718212, 0.00020405507530085742, 0.00024970865342766047, 0.00043194001773372293, 0.00039393204497173429, 0.00040029498632065952, 0.00033837769296951592, 0.00031630531884729862, 0.00030607974622398615, 0.00073907122714444995, 0.000708548235706985, 0.00040894839912652969, 0.00025548477424308658, 0.00052545819198712707, 0.00055346579756587744, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -21,-17,11,-39,13,1,-37,-2,11,6,-15,6,-8,-12,-24,7,-6,-1,-10,-12,16,-29,6,9,2,13,-1,127,31,-40,37,-5,0,0,7,-6,-18,9,-41,-5,-14,6,-4,32,-1,9,18,9,22,-2,-2,8,11,-26,-12,91,1,4,-33,-42,-1,25,4,-24,-38,-75,-15,37,9,17,20,-10,-12,-32,-9,-26,-21,19,-2,11,-11,-30,34,25,-7,-5,-16,-101,-1,-19,10,-6,48,-39,-42,-6, 
  /* [1][0][][] */ 29,-76,-64,-72,127,-24,73,49,-38,-97,-59,-15,11,-17,-65,51,-72,-3,43,26,31,40,-23,-49,9,-4,-25,-76,36,-26,-71,35,-17,27,10,-15,-9,-10,-3,25,-34,30,-51,-26,-60,82,21,17,24,-74,25,-42,-33,29,50,26,-72,-25,-45,-48,31,-23,12,-49,-77,102,-18,-20,-9,-16,-20,27,52,-111,-38,1,50,-49,40,18,7,-34,40,7,-60,50,-23,22,30,-50,6,3,33,0,22,120, 
  /* [2][0][][] */ -6,77,-104,-10,69,124,40,81,6,-121,-1,3,-9,-5,41,32,11,-11,-65,67,48,7,75,22,40,30,-11,-56,24,-10,55,-71,42,30,-25,47,-127,-78,26,38,7,-62,11,-35,7,-50,2,87,-35,21,-12,-36,81,2,-18,45,48,35,22,-24,43,44,21,-17,30,-1,-11,-4,-46,-2,-8,-45,-43,-87,-9,69,56,50,35,-12,26,-60,44,-25,-54,50,-4,36,-4,18,20,-23,1,-59,-45,33, 
  /* [3][0][][] */ 71,-9,112,6,63,-54,14,-25,7,-45,-6,-63,-11,29,46,84,28,25,42,15,107,-18,56,16,49,-26,3,29,37,17,-12,103,-104,33,19,1,-16,-18,1,30,-67,-20,91,39,40,71,-39,-109,-65,-18,-71,61,17,-114,14,42,-98,59,74,51,-21,89,-15,-49,33,60,-17,-42,22,-35,4,-74,52,-27,59,-17,24,14,55,68,-21,-77,-3,-1,-18,-4,24,60,16,18,21,39,40,127,49,-69, 
  /* [4][0][][] */ 26,-6,34,-14,127,23,-13,-13,-48,-35,-29,-45,-40,18,-8,41,27,-91,-29,69,-10,3,21,-9,2,-2,8,-28,9,-4,58,-28,85,11,-13,0,31,15,-2,4,-29,-10,-19,-20,-4,-54,-7,2,45,11,-13,15,0,-38,14,-9,14,-23,-37,22,-3,46,64,17,51,38,-17,-4,-47,3,29,58,14,-69,-46,-16,39,38,64,-24,-1,-26,4,-2,-56,17,36,50,-37,35,12,-45,18,4,17,-8, 
  /* [5][0][][] */ 10,-23,-27,22,32,-2,39,-35,2,-34,-17,8,-16,35,4,0,-4,12,19,4,23,15,-33,56,2,-9,19,-104,-14,25,3,33,-11,0,0,-47,38,18,3,8,-10,1,31,-21,5,10,-1,-27,-25,-21,-1,-14,6,-23,-9,-67,10,15,-13,21,71,19,-5,43,-3,57,-5,78,20,83,11,28,0,19,-11,62,-33,-17,27,2,-10,-7,0,16,-17,-1,-18,127,-11,31,-15,-6,-6,26,-48,5, 
  /* [6][0][][] */ 32,-89,11,-25,-22,11,39,14,23,10,-26,-84,-44,10,-33,27,8,7,5,12,-53,34,21,1,-18,-5,-7,-12,-15,11,35,-1,50,11,54,5,1,-18,31,-90,-21,98,7,-25,29,-6,-28,11,-16,33,-38,76,-10,-55,-8,-9,11,-66,2,20,-25,57,34,-76,19,-25,-5,-17,-1,-2,127,-4,-36,10,-21,12,-74,-14,32,-4,31,47,8,1,-26,-16,49,25,-3,13,38,-34,-23,12,-31,-32, 
  /* [7][0][][] */ 10,127,31,5,93,46,46,-28,-22,-39,24,-8,-11,26,26,32,3,-26,-3,47,27,-34,30,1,-9,8,16,8,22,-12,13,8,42,5,-42,19,26,12,-7,85,-42,15,8,25,-8,-35,13,-23,-27,-38,31,0,9,-26,-36,38,53,18,-11,-7,-14,-29,-13,1,-57,76,-24,-71,-12,-41,0,49,-8,-34,19,4,41,50,41,-23,-44,-38,-4,-10,-12,55,1,-6,-16,29,-34,-23,-47,-26,31,15, 
  /* [8][0][][] */ -7,17,38,22,-127,-43,36,-11,32,69,65,12,-9,14,25,14,-34,16,15,13,-44,-6,-117,56,18,-35,61,-20,7,19,9,38,72,-15,-2,8,-10,-4,3,36,17,-37,43,9,-38,-2,33,-3,-94,17,19,15,-55,-28,-27,31,18,-39,-83,-14,14,-28,-41,-10,1,87,-7,-64,16,-25,-41,-32,53,49,59,-13,-35,-44,-6,17,-79,15,-24,-12,31,15,66,49,35,-30,39,50,4,-4,54,14, 
  /* [9][0][][] */ 18,-114,-25,33,81,115,-33,-39,53,-30,80,95,-30,28,93,-108,25,-18,1,12,-47,-45,36,-12,-25,11,-5,10,-32,-8,8,-6,17,9,-99,49,12,18,-14,66,30,-62,-12,69,-9,-3,-57,-29,18,36,-21,-81,59,34,-13,-68,4,95,-1,1,19,-45,-35,127,-81,-10,2,-12,2,28,-64,-75,41,4,1,20,45,-58,15,9,6,-11,11,29,2,-79,11,2,-4,-21,-61,36,-54,3,16,-49, 
  /* [10][0][][] */ -46,-20,-23,-53,-28,-26,66,-9,40,17,21,26,34,-22,-1,7,-14,25,-27,-15,-5,23,7,24,-11,-10,14,-127,22,-46,64,-38,1,23,2,3,8,41,3,-9,9,-39,17,-39,22,-10,23,15,-7,38,-24,-26,-34,-15,-3,-46,10,19,-11,-43,10,6,-10,0,-52,95,-19,-38,6,-36,4,-20,-23,-8,26,51,-15,47,-15,12,-16,-8,-2,29,14,-13,-3,114,-6,-6,15,7,28,-46,45,-39, 
  /* [11][0][][] */ -77,19,-1,5,28,-84,-21,2,-38,-3,-7,4,31,21,-26,0,46,12,-53,-33,10,-15,-11,-7,77,3,71,4,-19,27,-28,18,-14,29,-9,0,2,14,21,8,-15,0,6,16,99,23,65,8,46,41,-14,35,19,-53,27,0,-63,-19,-29,-33,-22,-17,-7,13,-18,-15,18,-3,15,-1,-7,21,-12,12,39,0,-17,78,-113,55,-32,-5,-85,-66,127,12,50,-6,12,49,-36,-57,-22,54,-18,-17, 
  /* [12][0][][] */ -5,-16,-31,3,73,11,-13,-21,-32,23,20,-13,0,-25,32,-13,-39,-18,17,-29,-7,-15,-35,53,-14,43,-27,104,-9,33,-34,13,-19,32,5,10,-32,-26,12,15,-3,-8,-13,-1,-28,-6,24,15,-5,-1,1,-11,-33,-2,-17,6,-25,-30,11,30,-15,-34,16,40,52,-99,12,69,-36,-127,-14,64,-7,2,8,84,27,-19,-19,3,-13,24,-45,8,14,-7,1,-60,-9,14,14,-3,-36,40,-30,24, 
  /* [13][0][][] */ -68,72,-10,-9,-63,-10,-5,24,-38,-22,33,17,81,12,-24,7,-17,35,-36,9,11,-9,42,-56,61,29,-5,-11,4,-30,-34,-109,-81,-35,9,17,1,31,28,-13,-29,76,-4,12,45,2,-12,0,56,-19,34,62,57,-47,78,-23,-21,60,37,5,5,34,-28,19,-22,-9,4,-1,11,14,27,-127,24,-27,-70,-2,37,43,-36,-53,76,-19,-13,-30,41,-29,91,5,-11,-4,-25,25,33,-43,-6,10, 
  /* [14][0][][] */ -28,12,-10,-49,39,-24,-19,26,-93,1,16,5,-18,-63,-76,-36,-84,-19,77,0,28,-8,21,-95,-34,20,-56,-12,17,-19,0,-26,-70,-30,21,17,-11,-3,13,2,4,87,-68,-5,-51,25,11,9,127,-20,26,3,38,47,-99,29,-37,23,-101,23,2,19,48,23,7,24,-6,7,-54,24,50,38,32,-9,-23,22,61,-65,-30,-95,16,-33,-5,43,35,-79,-36,5,-49,25,36,42,21,46,19,-28, 
  /* [15][0][][] */ -33,-70,-18,-35,7,14,-6,-68,-17,21,-3,-30,38,-8,41,-12,-86,5,-19,26,-24,9,-65,-50,-6,-4,-1,14,-19,-12,62,-97,-6,34,15,19,6,25,-96,6,28,-71,6,27,-20,-42,46,25,54,9,-18,-127,0,55,2,29,45,-7,-13,42,5,7,31,3,-1,0,-16,-7,-21,15,8,29,-34,3,8,-31,-46,-15,10,3,-3,47,-15,67,-13,-50,-33,-26,-39,64,22,89,-43,-1,9,-18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032517325133085251, 0.018322566524147987, 0.0086723407730460167, 0.010612617246806622, 0.018357450142502785, 0.01674211211502552, 0.017012536525726318, 0.014381051994860172, 0.013442976400256157, 0.013008388690650463, 0.031410526484251022, 0.030113300308585167, 0.017380306497216225, 0.010858102701604366, 0.022331973537802696, 0.023522296920418739, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 25210, 61041, -1229, 444, 15604, -3667, -22, -1280, 5789, 8498, -5428, -542, 583, 6222, 4591, -9003, -4447, -348, -1345, 16707, -10927, 17057, -3413, 12319, 23538, -263, -6325, 18063, 14204, -18733, 1086, 21892, 24338, -10081, 2034, 225, 243, -1932, 3240, -8057, -6309, -397, -6410, -289, 30463, -1273, 12516, -232, -14857, 184, -20, 190, -2927, 22301, -4030, 14261, 27279, -84, 34097, 434, -9518, -997, 1267, -148, -1698, 12503, -641, -4846, -3335, 3646, 634, -4933, 882, -83, -1099, -6304, -951, -1761, 45148, -9351, -6585, -12033, -480, -32, 61244, -14088, -9688, -27385, -7367, 9248, -2995, 35633, -409, -2231, -2808, 492, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 9.2980968474876136e-05, 9.3257658591028303e-05, 9.7617499704938382e-05, 0.00022473839635495096, 0.00022711321071255952, 0.0001990601303987205, 5.1649185479618609e-05, 9.0869478299282491e-05, 0.00026080934912897646, 0.00028454692801460624, 0.00022715238446835428, 0.00010715807729866356, 0.00026448909193277359, 0.00021247040422167629, 0.00037283950950950384, 0.0001660319248912856, 0.00018711776647251099, 0.00019252224592491984, 0.00016554055036976933, 6.3004998082760721e-05, 7.4408977525308728e-05, 4.3351534259272739e-05, 0.00013584247790277004, 6.5023217757698148e-05, 8.1248515925835818e-05, 8.9614470198284835e-05, 0.00014539608673658222, 0.00016970532306004316, 8.0946054367814213e-05, 0.00051091593923047185, 0.00036682441714219749, 0.00025572898448444903, 0.00012087103095836937, 0.00017503532581031322, 0.00023475175839848816, 0.00041139227687381208, 0.0004476961912587285, 0.00014999489940237254, 0.00021577409643214196, 9.4495342636946589e-05, 0.0002129796048393473, 0.00020959951507393271, 0.00039423134876415133, 8.3792110672220588e-05, 0.00045438308734446764, 9.504492481937632e-05, 0.00010471792484167963, 0.00030126009369269013, 0.00065047951648011804, 0.00011431393068050966, 0.00045721983769908547, 0.00015856102982070297, 0.00018028932390734553, 0.00012495763076003641, 0.00020912160107400268, 0.00012566102668642998, 9.9155746283940971e-05, 0.00041079413495026529, 5.0061957153957337e-05, 0.00014176870172377676, 0.00027908539050258696, 0.00027167540974915028, 0.00011748934775823727, 0.00014704014756716788, 0.00012854817032348365, 0.00013543265231419355, 0.00030134516418911517, 0.00045333418529480696, 0.00020282212062738836, 0.00011959219409618527, 0.0001839368196669966, 9.4106158940121531e-05, 0.00026783073553815484, 0.00013812836550641805, 0.00065614172490313649, 0.0003048712678719312, 0.00013563974061980844, 8.8184322521556169e-05, 5.6581156968604773e-05, 0.0001330660015810281, 0.00018306750280316919, 0.00021933010430075228, 0.00015432367217727005, 0.00028198875952512026, 5.747511750087142e-05, 9.9528668215498328e-05, 7.4105410021729767e-05, 0.00052008428610861301, 0.0002344223321415484, 0.00012256072659511119, 0.00030997444991953671, 3.1787203624844551e-05, 0.00015386707673314959, 0.00011010508023900911, 0.00034267560113221407, 0.00029220845317468047, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-10,127,22,71,76,-57,-15,-17,-15,-5,-29,2,37,-1,-9,-44,27,23,19,-127,127,6,-83,6,49,-28,-125,-127,39,25,12,31,61,-19,-29,-10,31,-6,-12,28,-105,68,25,-68,37,44,-18,54,-24,18,4,-6,17,49,-89,-49,-59,-19,-11,1,10,38,66,-25,73,14,-8,17,19,127,23,23,24,-1,-9,19,127,-7,-14,14,-26,21,123,23,-75,-16,0,-33,-16,-38,2,-25,-15,26, 127,-127,77,106,-43,127,40,-115,69,5,-18,127,127,-96,-13,13,11,127,127,-111,127,-77,81,66,-127,-121,-67,-34,-54,45,-58,-20,-89,58,-127,-86,-43,-14,-52,65,0,127,127,79,-51,-114,-110,-52,-15,-127,45,82,68,-30,46,81,-47,42,-82,-113,-43,-40,-62,67,72,-61,25,30,-79,31,-18,91,118,127,12,21,3,59,-34,52,65,127,127,-23,-6,75,-108,127,-122,-99,4,-127,-88,-127,-38,107, -73,-14,31,-82,14,-20,66,-6,80,-34,-28,18,-18,-4,-8,-14,-8,-16,8,-3,-20,-102,30,-1,-123,100,7,-54,118,48,-14,9,1,18,14,-30,-8,34,20,15,25,13,-117,63,17,-21,37,11,-14,12,-14,4,-10,2,-5,21,-65,8,-34,52,4,42,32,-1,-7,-38,-31,23,12,1,-4,37,10,-26,-7,6,-11,-6,-85,1,-20,-24,-17,3,-106,10,-32,-23,-52,24,-26,-32,30,-26,-14,2, 
  /* [0][1][][] */ -64,-72,73,-37,-49,86,15,127,-52,-20,0,-118,26,-114,79,29,-2,-61,-16,89,49,-72,48,48,-100,-14,127,-21,-23,62,122,-105,-127,89,-86,-58,-36,31,-27,96,-47,-25,-5,46,-48,127,-24,65,15,98,19,-2,13,-54,27,32,127,120,-69,-86,127,-34,-35,127,71,-37,-15,0,127,39,127,97,-40,101,-7,11,15,14,-31,9,-42,127,-77,110,1,37,-52,30,78,-127,-32,-8,127,-67,-22,1, 66,124,58,-115,127,76,92,39,-127,127,127,-37,-66,-127,-127,127,127,-64,-123,-51,99,92,-121,127,-109,-96,-43,127,-127,107,-127,-127,-88,127,108,127,127,-127,-105,127,-63,-96,108,-127,-127,-35,-127,-127,127,-111,85,42,127,127,127,-127,98,-127,-127,127,19,-80,-127,-101,-127,127,-127,127,-124,-127,-108,-84,-127,-80,127,127,-127,127,-78,127,127,31,-40,-127,58,127,94,46,127,15,127,2,-66,38,127,-127, -53,-13,-49,37,-57,-87,33,-25,18,-33,-28,94,1,91,14,9,-3,64,-6,127,1,-85,-40,5,-77,109,-71,-19,-69,-17,16,-65,-69,38,6,-19,-28,45,-67,39,127,-4,-40,29,-39,-59,15,43,8,120,-11,6,-38,-71,6,19,96,2,0,21,-35,127,92,-53,-43,13,37,-9,-76,121,-20,-86,0,-55,-17,-20,28,15,78,-37,-69,-42,56,15,-46,-16,70,22,14,64,-44,20,-42,98,-26,-4, 
  /* [0][2][][] */ -67,-1,-3,-21,12,-45,64,25,56,-27,-36,-2,18,16,-25,-1,-7,67,8,1,-56,-83,3,-10,-26,-56,37,-68,89,38,27,28,16,-7,-12,-48,-7,37,-3,3,-14,-5,-66,103,4,31,10,36,-16,-30,9,-21,22,-2,12,15,-69,25,-15,14,15,1,-21,-5,-1,-45,-47,16,-32,14,28,31,13,-20,24,4,18,5,-77,-13,-8,-6,17,13,-127,11,12,-43,-60,-50,-28,-50,9,59,-19,-8, 121,31,-127,-37,-73,-26,44,30,-63,-28,-19,-107,-77,109,-12,37,3,-49,-8,-126,87,-49,-38,0,-109,127,-51,21,-38,-20,-8,-3,-62,20,26,4,-23,-28,127,57,11,-13,67,-35,-38,73,-68,-44,-33,-4,-127,-127,-50,-27,2,38,-65,-6,8,40,-7,-18,11,-48,-54,34,62,-25,115,109,-22,-68,12,-57,5,4,101,3,52,23,13,-97,-48,2,1,12,127,41,-62,40,-19,-106,42,81,-10,27, -54,11,-16,26,15,-60,-127,3,-11,-7,-15,5,15,-27,20,-1,-7,-14,6,17,-50,-71,15,-1,16,-94,21,4,-49,-38,-6,16,42,-21,-7,-26,-36,4,41,-38,24,-2,-50,-34,4,63,21,15,-9,-2,8,-9,18,6,-4,-7,-60,-11,2,-38,-11,11,86,-12,34,-1,-1,28,2,7,-4,21,-17,15,0,17,38,0,77,-12,4,-7,-7,-17,72,3,41,-39,58,40,-17,-56,-6,3,-15,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0039516910910606384, 0.0039634504355490208, 0.0041487435810267925, 0.0095513816922903061, 0.0096523109823465347, 0.0084600551053881645, 0.0021950902882963419, 0.003861952805891633, 0.011084397323429585, 0.01209324412047863, 0.0096539761871099472, 0.0045542181469500065, 0.01124078594148159, 0.0090299919247627258, 0.015845678746700287, 0.0070563568733632565, 0.0079525047913193703, 0.0081821950152516365, 0.0070354733616113663, 0.0026777123566716909, 0.0031623814720660448, 0.0018424402223899961, 0.0057733049616217613, 0.0027634867001324892, 0.0034530619159340858, 0.00380861503072083, 0.0061793336644768715, 0.0072124763391911983, 0.003440207103267312, 0.021713927388191223, 0.01559003721922636, 0.010868481360375881, 0.0051370188593864441, 0.0074390009976923466, 0.009976949542760849, 0.017484171316027641, 0.019027087837457657, 0.0063747833482921124, 0.00917039904743433, 0.0040160520002245903, 0.0090516330674290657, 0.008907979354262352, 0.016754832118749619, 0.0035611644852906466, 0.01931128092110157, 0.0040394091047346592, 0.0044505116529762745, 0.012803553603589535, 0.027645379304885864, 0.0048583419993519783, 0.019431842491030693, 0.0067388438619673252, 0.0076622958295047283, 0.0053106993436813354, 0.008887668140232563, 0.0053405934013426304, 0.004214119166135788, 0.017458749935030937, 0.0021276331972330809, 0.0060251699760556221, 0.011861128732562065, 0.011546204797923565, 0.0049932971596717834, 0.0062492061406373978, 0.0054632970131933689, 0.00575588783249259, 0.012807168997824192, 0.019266702234745026, 0.0086199399083852768, 0.0050826682709157467, 0.007817314937710762, 0.0039995117112994194, 0.011382806114852428, 0.0058704554103314877, 0.027886023744940758, 0.012957028113305569, 0.0057646888308227062, 0.0037478336598724127, 0.0024046991020441055, 0.0056553049944341183, 0.0077803689055144787, 0.0093215294182300568, 0.0065587558783590794, 0.011984522454440594, 0.002442692406475544, 0.0042299684137105942, 0.0031494798604398966, 0.022103581577539444, 0.0099629489704966545, 0.0052088308148086071, 0.013173913583159447, 0.0013509561540558934, 0.0065393508411943913, 0.0046794656664133072, 0.014563713222742081, 0.012418858706951141, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1876, 7092, 14419, 34042, 21703, -4176, -1910, 4904, 31738, -4899, 11058, 5786, 9942, 12382, 35694, 1463, 2654, 11212, 17727, 6010, -143, 496, 15379, -1135, 4702, -86, 15638, 6518, 6886, 49243, 49022, 18242, 9318, -746, 9453, 3246, 1922, 4156, 22482, -787, 14512, 9166, 43300, -3288, 27951, 8768, 6338, 17551, 81220, 11955, -665, 8351, -4129, -191, -3129, 7775, -350, 14916, 7059, 8018, 5279, 19002, 8726, 6346, 10031, 10545, 7079, -8319, 10022, -3610, 6361, 11084, 21684, 6976, -5695, -4354, 7527, 423, 2473, -1390, 19136, 13137, 3571, 17215, 3522, 181, 13317, 61967, 10913, 10974, 5686, -169, 6518, 7753, 5504, 11796, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00020449243311304599, 0.00020503329869825393, 0.00013095061876811087, 6.6884371335618198e-05, 0.00013697765825781971, 0.00026008608983829618, 0.00043677652138285339, 0.000330051698256284, 7.358105358434841e-05, 0.0002828883589245379, 0.00024358060909435153, 0.00015020745922811329, 0.00012693180178757757, 0.00018810282927006483, 6.6608561610337347e-05, 0.00039150717202574015, 0.00018246004765387625, 0.00011154171079397202, 0.0001258555130334571, 0.00020407095144037157, 0.00032837325125001371, 0.00044874253217130899, 0.00013058175682090223, 0.00055829435586929321, 0.00054911128245294094, 0.00024946057237684727, 0.00014248037768993527, 0.00021829198522027582, 0.00023805182718206197, 7.1968664997257292e-05, 5.8346140576759353e-05, 0.00013559410581365228, 0.00017861249216366559, 0.00028733882936649024, 0.00021173090499360114, 0.00018586781516205519, 0.00026414374588057399, 0.00034881444298662245, 0.00012144853826612234, 0.00070578802842646837, 0.00013217865489423275, 0.00017247823416255414, 6.2857121520210057e-05, 0.00032697594724595547, 0.00011578026169445366, 0.00017961088451556861, 0.00027126548229716718, 0.00015364214777946472, 5.0890648708445951e-05, 0.00017477646179031581, 0.00018612442363519222, 0.00020262291945982724, 0.00026047762366943061, 0.00028748734621331096, 0.0003256141790188849, 0.00014528658357448876, 0.00017966670566238463, 0.00012357466039247811, 0.00028439538436941803, 0.00018363675917498767, 0.00029758521122857928, 7.4924828368239105e-05, 0.000169600491062738, 0.00016178762598428875, 0.00024869799381121993, 0.00018253813323099166, 0.00018444632587488741, 0.00016058956680353731, 0.00016817808500491083, 0.0001948992139659822, 0.00018133157573174685, 0.00014411052688956261, 9.696973575046286e-05, 0.00015246485418174416, 0.0002730709093157202, 0.00029992469353601336, 0.00022297617397271097, 0.00031277211382985115, 0.00030062784207984805, 0.00026550886104814708, 0.00010611956531647593, 0.00012423435691744089, 0.0002308654657099396, 0.00011290118709439412, 0.00032459630165249109, 0.00027305117691867054, 0.00017521972768008709, 6.198361370479688e-05, 0.00012914570106659085, 0.00020763106294907629, 0.00022563316451851279, 0.00028543517692014575, 0.00022241004626266658, 0.00020464918634388596, 0.00020431495795492083, 0.00014039540837984532, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 0,67,-9,84,40,38,15,-1,57,57,-88,126,14,-97,29,-127, 
  /* [1][0][][] */ 14,33,8,-4,34,-19,127,-110,-12,87,-25,-5,2,-53,34,-10, 
  /* [2][0][][] */ -127,17,-14,-6,7,2,60,104,-41,73,99,-11,-86,28,36,-51, 
  /* [3][0][][] */ -62,29,30,69,-56,57,64,88,10,85,-127,7,29,-78,-93,-70, 
  /* [4][0][][] */ -8,-16,52,69,-29,86,3,45,23,-14,6,-3,18,-3,-127,-21, 
  /* [5][0][][] */ 4,-43,75,-27,13,-17,-35,6,-71,83,-51,-127,-1,-9,-69,-42, 
  /* [6][0][][] */ -1,1,44,-19,43,66,-79,-81,5,-5,67,-21,127,-15,-34,-31, 
  /* [7][0][][] */ 35,-7,127,1,-23,-43,8,-16,-78,43,-73,-38,0,6,41,-32, 
  /* [8][0][][] */ 22,32,44,39,-57,79,16,54,37,20,20,-92,-15,3,-127,-83, 
  /* [9][0][][] */ 26,-104,60,49,19,-35,0,13,127,-6,71,1,-21,11,-113,-24, 
  /* [10][0][][] */ -42,-107,-39,-20,-127,-25,-24,37,87,127,49,-64,-27,58,101,-26, 
  /* [11][0][][] */ 66,-4,3,-127,8,-20,-119,-122,-47,47,-29,-39,51,-45,44,-58, 
  /* [12][0][][] */ -13,4,30,-47,-34,-59,-90,-11,-62,-63,6,4,11,127,101,42, 
  /* [13][0][][] */ -42,-104,-69,21,-14,-45,-10,-12,49,-1,-18,-4,24,23,127,41, 
  /* [14][0][][] */ 4,-69,46,17,13,16,13,127,22,57,3,-29,29,44,-55,108, 
  /* [15][0][][] */ 22,-30,4,46,24,-11,93,-1,-4,-127,10,-41,12,-14,-2,-31, 
  /* [16][0][][] */ 43,-80,-42,16,13,1,41,-70,127,56,105,-6,21,110,66,120, 
  /* [17][0][][] */ -35,-69,38,127,107,64,0,-14,115,-31,-33,-86,15,42,-117,11, 
  /* [18][0][][] */ -31,24,2,19,-85,-4,4,51,-77,-27,-8,-28,19,-127,83,-35, 
  /* [19][0][][] */ 39,-91,30,-83,101,11,-90,74,95,-57,99,65,-42,54,82,127, 
  /* [20][0][][] */ 51,-23,63,-72,2,-3,-21,46,-10,-59,98,-18,12,15,-37,127, 
  /* [21][0][][] */ -54,-8,-20,-51,20,1,-92,-59,-46,54,-16,-4,-127,-17,49,-14, 
  /* [22][0][][] */ 16,-19,28,-31,22,-53,17,-10,-127,22,-9,-44,-12,-19,76,-23, 
  /* [23][0][][] */ 15,3,16,-9,3,14,-6,7,-9,0,46,-13,127,-8,5,-35, 
  /* [24][0][][] */ -17,9,-9,-77,-22,-22,57,12,-35,13,-15,-127,19,-87,60,26, 
  /* [25][0][][] */ -127,41,-18,-17,73,-22,-48,-120,17,39,16,-19,-123,-55,51,-11, 
  /* [26][0][][] */ 36,-21,73,-116,105,-27,-5,27,127,-47,50,-4,-13,90,26,80, 
  /* [27][0][][] */ 94,-36,27,-25,-40,-44,-1,-27,-20,27,-127,13,6,-12,-1,44, 
  /* [28][0][][] */ -127,-23,-123,-75,67,-1,88,-41,2,60,-61,32,50,4,-51,40, 
  /* [29][0][][] */ -71,-40,12,127,-7,20,5,-50,-3,0,-63,31,-3,-71,8,-33, 
  /* [30][0][][] */ 59,-31,127,-17,41,23,-40,74,-20,-71,65,-30,-29,21,-39,64, 
  /* [31][0][][] */ 8,-96,8,-41,-4,-55,29,-31,-11,51,112,25,-32,90,67,127, 
  /* [32][0][][] */ -11,76,-38,32,-127,20,-70,-43,-53,-34,-1,51,17,52,40,67, 
  /* [33][0][][] */ 19,-14,21,127,34,-2,22,-51,-111,46,70,-28,-13,10,4,105, 
  /* [34][0][][] */ 34,6,16,-10,81,-42,-127,-12,-36,80,-37,1,-23,16,-5,19, 
  /* [35][0][][] */ 83,-12,-41,-18,16,-127,-20,-28,-37,15,-90,-22,90,4,11,29, 
  /* [36][0][][] */ 38,-6,-127,15,53,12,-49,27,-43,-27,-13,-19,3,15,-30,21, 
  /* [37][0][][] */ 5,12,127,-40,-84,27,26,-69,-8,41,-40,42,44,-7,55,14, 
  /* [38][0][][] */ -127,32,3,32,30,102,20,-26,12,9,114,-11,-46,-9,2,-30, 
  /* [39][0][][] */ -6,4,12,28,38,-20,-127,34,5,25,-6,-34,-8,-23,7,0, 
  /* [40][0][][] */ -12,88,-55,127,-10,71,94,46,-91,-14,-14,75,1,49,-71,-10, 
  /* [41][0][][] */ 1,22,-37,-14,-34,-2,127,78,-39,66,-21,21,-5,59,51,-24, 
  /* [42][0][][] */ 24,-52,-3,-37,-2,-9,-85,48,39,-127,124,28,-26,-3,-64,-5, 
  /* [43][0][][] */ -57,-1,48,-32,47,21,-75,-77,-23,38,-9,-33,-127,-8,8,-3, 
  /* [44][0][][] */ 20,-2,-7,8,-5,-20,4,-38,127,-1,4,61,34,76,0,32, 
  /* [45][0][][] */ -44,-100,-25,-101,25,-26,-25,48,-8,-64,-36,-41,54,105,-37,127, 
  /* [46][0][][] */ -40,20,-38,92,-86,-34,4,-75,-127,37,-54,-19,-3,33,3,-34, 
  /* [47][0][][] */ -31,7,-122,127,-5,42,13,-14,11,67,88,80,-41,-10,37,-31, 
  /* [48][0][][] */ -24,16,40,-127,39,-22,-7,6,-41,20,36,-15,-9,77,107,73, 
  /* [49][0][][] */ -12,10,22,127,-34,37,-70,-9,31,-36,-78,-27,-20,-38,-100,-90, 
  /* [50][0][][] */ 14,73,18,-127,52,7,-26,40,114,-32,-38,-16,22,-50,-5,-29, 
  /* [51][0][][] */ 7,-27,30,10,51,-9,-58,-127,23,-86,-4,21,-23,3,-1,-7, 
  /* [52][0][][] */ 13,10,-13,35,33,-10,-52,103,-60,127,-26,-32,77,102,20,-29, 
  /* [53][0][][] */ -3,72,-7,-67,-45,8,30,-33,-45,-26,-42,60,8,-127,-69,-4, 
  /* [54][0][][] */ 4,4,23,32,54,-27,-1,-36,-11,20,-13,-23,-12,127,-40,-20, 
  /* [55][0][][] */ -95,127,97,-30,57,-12,-36,10,-55,6,81,-28,-2,-17,86,-5, 
  /* [56][0][][] */ 50,-21,-4,-95,58,-12,1,1,33,-31,54,127,-44,-14,122,36, 
  /* [57][0][][] */ -29,5,23,69,-28,21,46,127,-13,6,18,-35,-1,52,12,20, 
  /* [58][0][][] */ -5,126,-9,-115,0,49,-1,26,127,-4,7,107,-6,-102,42,75, 
  /* [59][0][][] */ 28,61,44,-116,-45,5,16,-4,14,14,33,-72,-14,-127,-71,22, 
  /* [60][0][][] */ 60,-13,111,-35,-32,127,43,-41,-25,49,-60,-3,19,-7,50,-3, 
  /* [61][0][][] */ -12,27,-47,-26,-54,13,104,127,-6,76,-5,9,6,82,29,-43, 
  /* [62][0][][] */ -12,7,-3,-11,-58,13,-40,15,-20,-18,11,-57,15,-127,88,-10, 
  /* [63][0][][] */ 15,-36,1,-66,27,-14,-103,-127,-55,99,-16,19,38,-12,33,-50, 
  /* [64][0][][] */ -32,-12,37,50,68,-3,-27,-127,24,-92,-2,-28,-10,-20,-2,-1, 
  /* [65][0][][] */ -127,30,26,-73,30,73,47,-53,-94,21,35,-7,12,4,-20,-48, 
  /* [66][0][][] */ 87,-12,111,32,-55,22,-26,63,-71,6,51,-107,-20,38,-127,-35, 
  /* [67][0][][] */ 64,-35,-39,72,64,-51,-91,-116,58,-127,-111,-58,-98,-3,-115,13, 
  /* [68][0][][] */ 34,-26,-67,53,-60,-72,5,-79,-29,17,34,-61,-29,45,127,-34, 
  /* [69][0][][] */ -35,18,-61,65,7,-117,22,98,45,12,42,-13,127,75,-25,24, 
  /* [70][0][][] */ 21,13,-47,-54,-34,4,127,104,-25,58,-34,16,18,48,23,9, 
  /* [71][0][][] */ -3,-16,-12,-40,35,8,15,48,-38,-42,-13,9,4,-127,79,-3, 
  /* [72][0][][] */ 30,54,-10,25,44,-30,-55,-127,30,44,-64,33,48,63,27,57, 
  /* [73][0][][] */ -39,-127,-24,-55,-81,-29,22,-40,-21,19,-38,-25,8,-42,74,1, 
  /* [74][0][][] */ -19,34,73,102,18,0,-127,98,8,-40,-37,-40,7,9,-24,-21, 
  /* [75][0][][] */ -39,20,-26,24,-8,72,68,110,-21,41,5,-56,-127,70,3,15, 
  /* [76][0][][] */ 22,-21,-39,5,50,-75,-127,-88,-26,-23,-7,-21,22,-5,40,-29, 
  /* [77][0][][] */ -39,13,-36,-42,-54,-6,-15,-54,127,-7,-58,-12,-9,46,26,-90, 
  /* [78][0][][] */ -76,-127,-35,82,57,39,-29,35,-9,-67,-109,54,49,-28,74,57, 
  /* [79][0][][] */ 34,-14,32,-46,127,13,44,10,71,29,7,39,-11,-28,20,-38, 
  /* [80][0][][] */ 5,-38,65,-127,-10,-49,15,4,-76,-31,-19,-60,15,125,-46,27, 
  /* [81][0][][] */ 28,5,23,34,-2,19,-28,-15,0,-24,7,-37,8,39,-127,17, 
  /* [82][0][][] */ -58,5,30,-127,-7,-6,-21,-26,-15,-27,-52,-78,6,-95,-115,22, 
  /* [83][0][][] */ 0,-5,-9,-51,-31,-1,-22,47,-95,-30,7,-91,40,-127,9,57, 
  /* [84][0][][] */ 127,20,21,60,-39,-12,-54,28,-18,-29,82,23,-58,19,73,-79, 
  /* [85][0][][] */ -4,-8,14,-45,40,-22,-39,90,-77,-127,-50,-56,-9,63,73,-97, 
  /* [86][0][][] */ 9,1,12,-12,-37,79,-35,46,-80,-60,34,-31,-16,-127,-25,32, 
  /* [87][0][][] */ 127,-23,17,-14,-45,-50,1,-24,-4,11,-94,17,50,-11,11,20, 
  /* [88][0][][] */ 41,70,-10,-2,-10,-35,-17,-27,95,32,46,11,-31,-38,117,-127, 
  /* [89][0][][] */ 54,67,-85,-17,-32,-14,21,-53,27,32,-6,-43,-29,-24,-20,-127, 
  /* [90][0][][] */ -17,-36,2,-81,-72,27,127,-56,110,-79,5,-85,42,-9,-41,-10, 
  /* [91][0][][] */ 9,14,-41,-105,-49,-15,27,-44,-56,17,59,54,20,-31,46,127, 
  /* [92][0][][] */ 25,9,5,23,60,-8,-79,-127,40,-54,8,-29,-45,-14,-1,-31, 
  /* [93][0][][] */ 81,4,23,-127,-39,-22,-34,38,18,-74,48,-43,0,72,-29,11, 
  /* [94][0][][] */ -81,38,-96,8,58,-127,-26,-9,-21,-50,93,-33,10,-2,-20,-8, 
  /* [95][0][][] */ -19,79,-6,-127,-18,22,-44,27,35,-66,-51,-68,28,-2,-80,6, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0007376611465588212, 0.00073961220914497972, 0.00047237533726729453, 0.00024127056531142443, 0.00049411656800657511, 0.00093820295296609402, 0.0015755745116621256, 0.0011905883438885212, 0.00026542734121903777, 0.0010204571299254894, 0.00087866309331730008, 0.00054184015607461333, 0.00045787837007082999, 0.00067853927612304688, 0.00024027562176343054, 0.0014122753636911511, 0.00065818423172459006, 0.00040236202767118812, 0.0004539958608802408, 0.00073614076245576143, 0.001184533815830946, 0.001618739333935082, 0.00047104476834647357, 0.0020139231346547604, 0.0019807973876595497, 0.00089987379033118486, 0.00051396642811596394, 0.00078743998892605305, 0.000858719227835536, 0.00025961102801375091, 0.00021047078189440072, 0.00048912572674453259, 0.00064430502243340015, 0.0010365111520513892, 0.00076377234654501081, 0.00067047699121758342, 0.00095284008421003819, 0.0012582708150148392, 0.0004380987084005028, 0.0025459739845246077, 0.00047680523130111396, 0.00062217703089118004, 0.00022674314095638692, 0.0011794932652264833, 0.0004176516376901418, 0.00064790650503709912, 0.00097853015176951885, 0.00055423000594601035, 0.00018357674707658589, 0.00063046737341210246, 0.00067140260944142938, 0.00073091732338070869, 0.0009396153618581593, 0.0010370468953624368, 0.001174581004306674, 0.00052408914780244231, 0.00064810784533619881, 0.00044576823711395264, 0.0010258933762088418, 0.00066242890898138285, 0.0010734727839007974, 0.00027027472970075905, 0.00061179621843621135, 0.00058361300034448504, 0.00089712289627641439, 0.00065846589859575033, 0.00066534924553707242, 0.00057929131435230374, 0.0006066652131266892, 0.00070305576082319021, 0.00065411347895860672, 0.00051984679885208607, 0.0003497968427836895, 0.00054998317500576377, 0.00098504277411848307, 0.0010819118469953537, 0.00080433714902028441, 0.0011282560881227255, 0.001084448304027319, 0.00095776439411565661, 0.00038280282751657069, 0.00044814794091507792, 0.0008327960385940969, 0.00040726602310314775, 0.0011709092650562525, 0.00098497164435684681, 0.00063206633785739541, 0.00022359215654432774, 0.00046586449025198817, 0.00074898306047543883, 0.00081392168067395687, 0.0010296441614627838, 0.00080229499144479632, 0.00073822663398459554, 0.00073702097870409489, 0.0005064453580416739, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { 1787, 3026, -9261, 26182, 29189, 4845, -8056, -8480, 19771, 2486, 23370, 20670, -8948, 8747, 39684, -30177, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00046509798266924918, 0.00026271905517205596, 0.00024693092564120889, 0.00021493322856258601, 0.00037795165553689003, 0.00033122801687568426, 0.00034990615677088499, 0.00038984199636615813, 0.00023661216255277395, 0.00024277379270642996, 0.00037410054937936366, 0.00063018768560141325, 0.00039532085065729916, 0.00042360697989352047, 0.00045175032573752105, 0.00033981740125454962, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -7,23,-19,18,43,80,-29,-9,37,-1,2,13,-3,3,24,62,11,-19,-3,-16,104,-50,0,-26,-27,-27,-39,-103,-2,-7,58,49,112,-11,9,-15,4,-13,-27,13,-27,15,27,-20,-6,-34,-4,21,-14,24,1,-4,-30,-4,-1,-9,32,31,-21,-29,-57,23,-23,-12,-2,-3,51,-1,2,3,-19,-30,-68,-8,-17,-1,-12,-83,0,-25,36,-26,-53,-48,29,-21,15,24,-8,-4,14,-45,30,28,-12,127, 
  /* [1][0][][] */ 84,-92,38,83,-31,-53,-17,-56,-47,-93,-15,34,24,-72,-32,-75,-79,-12,31,23,-29,-103,-40,10,127,-66,-73,24,-37,104,2,55,7,4,-51,17,-19,-6,37,-41,12,-70,67,-37,-63,11,64,-13,39,17,-1,-65,77,-86,25,-29,12,14,-26,-103,46,-73,11,-61,-10,-112,35,47,31,46,-62,3,-111,46,-32,67,29,105,6,-20,33,11,-67,38,-81,72,11,50,-45,-6,14,9,2,-37,21,1, 
  /* [2][0][][] */ 9,14,18,-24,5,10,-8,28,79,-10,7,82,11,3,60,24,0,-22,16,-4,-15,-54,16,-50,-12,-12,-29,18,-8,23,116,-60,17,-83,-14,47,28,127,-52,-42,8,-28,-4,32,-50,-57,-46,36,12,32,-54,-25,32,11,-3,-35,-30,16,-15,29,-7,7,87,98,9,-67,17,-94,-11,-8,-28,13,-27,-10,-33,13,16,44,12,7,7,97,29,-18,0,-5,20,-16,15,20,1,-41,-25,10,-10,79, 
  /* [3][0][][] */ -2,-30,-43,46,28,-27,5,-7,-14,17,16,-14,1,-14,53,-17,30,-49,28,11,-28,-22,-18,12,-3,19,16,-6,21,-52,59,-17,20,-17,-33,50,-15,-6,1,38,2,-60,39,-34,-10,4,-20,-4,-119,41,3,15,-127,-54,-14,-33,39,6,5,47,10,17,8,18,-12,-96,-33,39,51,22,-2,14,-29,24,-9,-33,-44,-41,24,-40,11,-28,28,68,44,61,21,27,30,-31,-14,-8,-37,4,-16,-45, 
  /* [4][0][][] */ -2,-25,15,-70,1,-15,-43,0,-33,-38,-26,-8,16,73,12,-4,46,-13,2,10,-2,27,65,-2,-1,-3,20,13,7,-3,-10,-11,-24,12,-2,13,33,-15,-9,-13,12,2,-95,-29,29,-6,1,-16,-1,73,-7,-20,-22,-13,9,-6,2,-34,30,45,12,19,2,-15,28,-115,26,-22,-56,16,-19,0,-23,14,-31,27,-15,62,55,3,9,15,127,-33,29,-21,-20,-12,69,12,-1,12,-30,31,-4,-42, 
  /* [5][0][][] */ -17,0,0,-10,-12,-15,-12,99,68,-13,0,-44,-25,27,29,49,-26,-6,-8,-34,-41,-17,-17,-32,16,9,14,78,52,10,50,47,-46,29,-6,-4,-46,-67,-20,-5,-30,-19,-7,-1,61,4,-8,17,14,-5,-3,6,-27,-25,9,6,-24,-20,-3,35,-40,22,-14,-40,20,17,-19,-3,3,21,16,0,42,10,20,-4,-8,17,6,112,-1,-43,13,41,6,5,12,-26,-7,-11,15,-109,-41,-22,-15,-127, 
  /* [6][0][][] */ -23,-4,-17,-62,-9,-29,-19,19,1,21,-7,-4,32,-54,-1,-5,-9,-61,23,5,-3,-7,-31,28,75,-9,-10,12,15,-9,3,-17,-18,-6,-29,11,20,-1,28,49,-10,-29,-51,-18,3,-19,14,-127,25,32,33,9,8,-5,-2,-41,37,-20,-3,1,32,21,5,4,46,71,16,-20,-12,-11,26,-32,28,8,59,-8,-32,31,7,5,-11,-12,46,-38,3,46,15,-16,23,14,-30,0,-28,-5,1,6, 
  /* [7][0][][] */ 13,9,40,-20,-5,1,-6,-35,9,-11,-15,-6,-5,-88,28,13,-1,-27,-14,4,10,-14,-34,6,-31,-7,2,-1,2,6,3,-1,-13,2,-16,-16,11,-2,-17,15,5,-3,-16,32,1,9,-7,77,7,25,-20,-26,-20,17,-5,-55,34,2,3,4,-8,8,-6,3,-6,47,16,-32,2,-12,21,42,-10,-10,-11,1,45,8,0,-12,-1,-24,41,-4,-27,127,5,-8,-41,-24,1,28,-25,1,-7,10, 
  /* [8][0][][] */ -70,41,-42,-1,45,-24,-9,28,23,68,-36,11,3,36,71,-5,-11,30,-83,17,10,29,-41,13,-44,-22,9,15,68,-91,-16,-10,19,10,23,3,-13,41,-25,44,-1,27,0,-127,-32,-4,48,-17,-45,39,-14,60,-114,86,5,6,-3,-16,-31,-22,-18,-41,11,33,-22,44,21,-27,14,7,48,97,-18,26,46,23,-4,-92,-4,-6,-13,-15,6,-4,-59,1,12,-42,-2,55,-19,14,31,-17,-5,-4, 
  /* [9][0][][] */ 18,-62,-38,-23,22,21,-19,34,38,-8,7,5,-52,-23,5,39,-6,10,39,-17,-27,-5,-29,-37,32,5,20,-8,-40,-43,-24,0,-10,13,25,33,10,38,-26,33,12,0,-13,-92,12,-16,15,-127,-42,-1,5,28,-21,-3,-9,12,-41,27,-7,9,17,17,20,30,16,119,32,37,5,-11,-1,-30,-9,-9,-28,15,69,-10,21,-1,-18,7,21,-45,3,25,-11,-3,-46,49,-26,8,16,6,8,-25, 
  /* [10][0][][] */ 35,46,-3,33,51,-116,-15,-42,8,47,38,1,5,16,14,-74,1,42,-33,46,-82,-1,1,-13,-68,-20,-62,63,9,14,-5,31,-4,-5,15,-2,88,-6,-6,-11,-22,74,35,-18,-37,-23,-42,22,-6,-12,-29,-18,-12,-6,-9,-4,7,20,-21,-14,1,-1,-23,28,21,42,37,18,34,-2,45,50,-46,-13,-37,-22,-2,36,-22,20,20,-6,-63,-44,64,-36,84,-15,-17,8,25,4,68,37,-17,-127, 
  /* [11][0][][] */ 51,35,-37,20,0,8,55,11,-1,-10,-20,-17,1,4,38,-1,-10,-10,-99,-4,-6,8,-2,1,-42,-15,-7,11,7,13,-5,-10,-5,13,4,27,7,25,1,32,-4,30,56,-93,38,-34,-5,-4,-127,15,21,-51,15,22,-7,14,-10,-18,13,-5,15,-17,-11,11,-42,51,-27,20,25,4,34,14,-46,-21,27,28,-2,-26,-46,15,13,-8,80,34,3,-16,-18,-1,5,31,-15,-10,-1,2,-16,8, 
  /* [12][0][][] */ -37,-5,-3,-3,-17,42,26,15,127,16,-25,6,1,-1,-37,-53,31,23,19,72,56,25,-10,-36,9,19,33,-38,-106,10,43,-37,2,-12,1,-39,5,3,26,-4,-44,-31,5,10,5,34,7,-14,15,-6,-42,19,12,1,15,-13,74,-24,22,27,23,-6,3,-25,-19,22,-39,19,-15,8,-40,-37,8,21,-76,16,32,-12,26,-65,-13,14,49,43,-27,-22,-23,-12,17,13,-6,38,-13,-16,25,20, 
  /* [13][0][][] */ 32,-11,-19,36,33,-1,4,-9,-5,0,13,-1,15,-12,17,-16,19,-72,-36,17,-9,-13,18,7,4,12,-3,-3,-13,-33,-6,12,-3,13,4,48,23,6,8,9,-1,17,18,37,18,11,-2,-127,28,3,0,4,-16,5,13,6,-16,21,22,10,1,15,-4,13,-1,-17,-18,-64,13,11,1,-31,-10,32,-6,17,-29,3,12,11,24,-4,-15,17,18,34,15,14,-7,5,25,0,2,14,-11,-5, 
  /* [14][0][][] */ -111,-48,32,57,38,-32,-30,14,-28,10,1,14,87,13,-127,-12,75,-28,-20,40,-17,-8,44,20,-119,11,44,-8,-45,-79,-30,11,8,18,22,-66,46,54,-2,36,11,33,-9,-35,29,125,69,48,-122,60,22,35,-60,-11,33,0,9,9,77,62,46,49,7,55,-4,-24,-54,48,15,82,-52,-80,-89,10,6,44,-16,64,102,-10,62,22,40,26,36,2,42,36,31,56,75,-19,15,24,22,-39, 
  /* [15][0][][] */ 77,-11,42,-2,4,55,21,-17,6,45,11,5,-86,-5,-19,46,2,43,34,-14,2,19,-89,73,19,5,38,3,33,31,-73,-76,4,-40,51,9,35,-23,-36,-100,-15,31,-6,47,10,53,-12,-24,91,-30,-59,18,35,-100,62,-89,12,-45,12,18,-127,10,19,32,82,-8,-55,43,-10,73,0,21,49,16,30,-5,29,-55,60,-4,0,-5,23,70,-22,-6,-8,-55,7,11,69,3,-66,47,38,-6, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019766664132475853, 0.011165560223162174, 0.010494563728570938, 0.0091346623376011848, 0.016062945127487183, 0.014077190309762955, 0.014871011488139629, 0.01656828448176384, 0.010056016966700554, 0.010317886248230934, 0.015899272635579109, 0.02678297646343708, 0.016801135614514351, 0.018003296107053757, 0.019199388101696968, 0.014442238956689835, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10039, -9649, 3055, 56451, -1967, -4823, -10259, 2761, -2501, 784, 2684, -1662, 2296, -5655, 5989, -4489, -1515, 17479, 25299, 2964, 4447, -3567, 1643, 330, 18695, -1342, -1031, -3858, -5606, -8127, 5033, -9376, 103, -1378, -806, 22108, 1422, -2976, 18608, 545, -128, 1707, -9566, -7570, -7081, 69103, 1044, 16597, 35331, -12197, -344, 8091, 7647, -331, -6964, 1951, -12582, 1387, 2395, -6919, -810, -613, -11338, 487, 1163, 15309, 28935, 17834, -12150, -21, -10105, -1308, 32689, 8234, -269, 434, 18735, 34870, -110, -9071, -1837, -4280, 555, -2731, 604, 3331, 1308, -518, 1799, -2835, 103, -595, -277, 315, 112, 49211, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016164114640560001, 0.0001014503141050227, 0.00027802144177258015, 3.7803449231432751e-05, 0.0001410918339388445, 0.00016990241419989616, 0.00032583749270997941, 7.773545803502202e-05, 0.0001734053366817534, 0.00038107109139673412, 0.00016000645700842142, 0.00035183949512429535, 0.00010482161451363936, 0.00040359742706641555, 0.00016023490752559155, 0.00018798481323756278, 9.3985734565649182e-05, 0.00033250360866077244, 6.3037026848178357e-05, 0.00023713390692137182, 4.2060648411279544e-05, 0.00016913405852392316, 0.00013278907863423228, 0.0003579081385396421, 0.00018658960470929742, 0.00019898655591532588, 0.00013124707038514316, 0.00017434878100175411, 0.000153798857354559, 9.4837727374397218e-05, 0.00014577875845134258, 0.00016986991977319121, 0.00011922427074750885, 0.00012081568274879828, 0.00017444274271838367, 0.00010804821067722514, 0.00033418380189687014, 0.00011533881479408592, 5.2811275963904336e-05, 0.00015098252333700657, 0.00018608369282446802, 0.00030300542130135, 0.000367079017451033, 0.0001646266900934279, 0.00019040587358176708, 5.18718698003795e-05, 0.00021080971055198461, 0.00020710426906589419, 7.5375101005192846e-05, 0.00020909463637508452, 0.00016628752928227186, 0.00014956072845961899, 0.00023101914848666638, 0.00026327589876018465, 0.00019129712018184364, 0.00044276122935116291, 0.00031400658190250397, 0.00017892131290864199, 0.00010548901627771556, 7.3610928666312248e-05, 0.00028746921452693641, 0.00013364454207476228, 0.00030146143399178982, 0.00012722688552457839, 0.00018989946693181992, 0.00019210616301279515, 8.7862405052874237e-05, 9.9243727163411677e-05, 0.00033581326715648174, 0.00020303633937146515, 0.0001825335348257795, 0.00012830588093493134, 0.00017865678819362074, 0.00014703281340189278, 0.00015379871183540672, 0.00023122636775951833, 0.0004782221803907305, 4.9708483857102692e-05, 0.00025848174118436873, 0.00019647726730909199, 0.00014444797125179321, 0.00050361570902168751, 0.00011894046474481001, 0.00012044790491927415, 0.00012800890544895083, 8.9637214841786772e-05, 0.00011894816270796582, 0.00016572921595070511, 0.00021178525639697909, 0.00010879142791964114, 0.00018625975644681603, 0.0001068997080437839, 0.00013273203512653708, 0.00043490217649377882, 0.011204161681234837, 7.82307397457771e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,5,-20,107,-17,24,-63,-54,17,-6,101,-8,1,-9,-4,58,7,16,-31,1,73,2,32,-34,2,17,43,48,21,14,25,48,-8,29,10,-14,5,48,-59,-24,20,10,27,15,-84,-59,25,-4,-10,-20,-6,-7,50,5,-9,2,-2,-36,27,-31,29,-2,127,26,-12,-11,11,-56,67,36,3,-6,76,-32,72,3,16,-127,29,63,0,16,127,-15,37,29,-30,-18,35,-6,-14,80,0,19,-2,13, -48,11,-8,12,51,-8,-11,-127,39,14,-127,-4,-18,-12,4,97,19,-29,-13,-17,76,-96,127,26,-62,-32,-104,-15,29,38,-49,18,116,12,-14,1,-24,127,-65,-127,9,-18,-31,11,46,-127,127,-44,-75,48,50,6,40,-64,32,56,37,42,-101,85,127,34,2,-21,43,-38,-99,-4,37,-30,-15,47,-50,-49,108,-5,-30,-59,-32,63,-68,61,-16,8,-12,47,57,-40,-27,54,-14,71,-127,-32,23,-127, 1,-5,-23,-74,8,20,37,22,-4,-1,6,64,-1,-13,-11,7,-12,17,-13,15,8,24,23,-32,1,-32,11,11,-6,6,47,-78,43,17,9,-21,12,5,-34,-22,8,3,-16,6,23,-31,20,1,7,-9,6,-5,5,5,-5,9,-6,46,7,-3,10,-19,2,-18,-26,-17,30,-54,-108,-7,43,-17,-127,-22,-11,15,10,-10,6,10,-15,21,-36,-4,-42,20,26,37,-24,-16,24,-12,19,5,-3,-46, 
  /* [0][1][][] */ -41,58,-17,39,-85,-15,-10,-45,26,96,-46,-21,-30,-25,-6,62,127,-25,-89,-14,60,-127,-29,15,-34,-48,-127,-5,36,35,-49,28,-127,-74,-57,4,66,-4,-47,47,-20,86,1,-3,34,-55,-12,-31,127,43,-2,22,45,9,-37,-17,32,10,-124,127,-37,-90,21,127,-58,-36,-88,125,-37,127,-20,55,-34,-54,37,8,-36,-72,127,49,127,35,5,-2,127,28,-99,48,-37,-36,-101,39,95,101,28,-57, 127,127,127,127,-45,-127,127,23,127,-127,15,-127,-104,127,127,127,-15,-127,-61,-127,127,24,-70,127,127,127,-56,-127,127,127,-127,127,-9,-127,-125,127,-127,-45,99,111,-127,-127,127,127,127,-118,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-108,-30,-71,-68,127,127,-70,127,127,-107,-127,127,-43,127,-127,-127,-127,125,-75,127,-42,127,81,127,-39,-127,-25,-107,-127,-127,-22,-127,-22,-127,-127,116, -23,64,-37,4,127,73,-22,49,6,24,-13,-3,-26,-31,-14,-4,-102,-22,-127,36,34,78,-14,-117,-33,-42,127,72,10,35,74,9,123,-47,127,-3,56,6,-92,15,35,24,-22,0,-22,-53,-13,-42,81,12,-12,40,-5,-4,-76,-13,25,21,127,-91,2,127,-1,-36,-109,-28,-74,99,15,-16,115,25,-19,-56,12,48,-29,-10,-44,-2,-45,9,47,24,-90,35,127,-48,33,-23,127,-10,-111,34,33,17, 
  /* [0][2][][] */ -4,-41,-19,-61,-6,15,40,31,-4,10,-20,53,24,-34,-7,4,40,1,12,20,-7,31,-19,-26,1,-25,9,5,-10,-7,51,-74,-37,66,-28,-24,30,-37,-62,17,8,10,-34,22,12,-80,-13,-1,-10,4,19,-7,6,1,-22,7,0,44,-49,34,-7,-13,4,16,-5,-11,23,-55,-56,11,-23,-13,-116,-32,0,17,14,-11,57,19,21,20,-40,16,13,25,-23,9,5,25,23,-6,19,40,-7,-31, -27,-12,-26,24,-44,76,-26,66,3,-5,54,-11,127,-7,-17,-20,-1,-39,-60,21,-23,80,-47,-112,-47,-49,100,73,13,43,56,-1,-120,62,-14,-22,-28,-30,-127,-3,43,-13,-15,37,-26,-46,-19,-47,-60,28,69,25,-11,-80,30,52,17,27,74,-56,19,-59,-8,-1,19,-26,-127,-57,-10,-27,-63,22,35,-46,-30,-7,-45,24,-55,4,51,35,19,12,6,61,-94,127,16,127,-30,-19,113,-21,46,82, -9,-36,-25,30,12,66,-44,12,3,-5,1,15,13,-51,-10,-12,-42,-5,15,17,-21,6,-23,3,-5,18,-3,54,-2,-5,36,29,15,44,19,-22,-5,-28,-27,9,10,-10,21,10,-74,-35,-14,5,-2,-16,0,-4,-10,8,-17,-4,0,-49,13,-30,-23,51,9,-29,-11,-3,36,-58,47,7,55,-22,29,-55,-19,22,11,12,-5,23,-30,33,91,-14,-17,54,40,-8,109,12,2,-19,10,-23,-7,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0068697487004101276, 0.004311638418585062, 0.011815911158919334, 0.0016066465759649873, 0.0059964028187096119, 0.00722085265442729, 0.013848093338310719, 0.0033037569373846054, 0.0073697264306247234, 0.016195520758628845, 0.0068002743646502495, 0.014953178353607655, 0.0044549186713993549, 0.017152890563011169, 0.0068099834024906158, 0.0079893544316291809, 0.00399439362809062, 0.014131403528153896, 0.0026790734846144915, 0.010078190825879574, 0.001787577522918582, 0.0071881972253322601, 0.0056435358710587025, 0.015211096033453941, 0.007930058054625988, 0.0084569286555051804, 0.0055780000984668732, 0.0074098231270909309, 0.006536451168358326, 0.0040306034497916698, 0.0061955968849360943, 0.0072194715030491352, 0.0050670313648879528, 0.0051346663385629654, 0.0074138161726295948, 0.0045920489355921745, 0.014202810823917389, 0.0049018994905054569, 0.0022444792557507753, 0.0064167571254074574, 0.0079085566103458405, 0.012877730652689934, 0.015600857324898243, 0.006996634416282177, 0.0080922497436404228, 0.0022045543882995844, 0.0089594125747680664, 0.0088019315153360367, 0.0032034418545663357, 0.0088865216821432114, 0.0070672198198735714, 0.0063563310541212559, 0.0098183136433362961, 0.011189226061105728, 0.0081301275640726089, 0.018817352131009102, 0.013345279730856419, 0.0076041556894779205, 0.0044832830317318439, 0.0031284643337130547, 0.012217441573739052, 0.0056798928417265415, 0.012812110595405102, 0.0054071424528956413, 0.0080707268789410591, 0.0081645119935274124, 0.003734152065590024, 0.0042178584262728691, 0.014272063039243221, 0.0086290445178747177, 0.0077576753683388233, 0.0054529998451471329, 0.0075929132290184498, 0.0062488941475749016, 0.006536445114761591, 0.00982712022960186, 0.020324442535638809, 0.0021126104984432459, 0.010985474102199078, 0.0083502838388085365, 0.0061390385963022709, 0.021403668448328972, 0.0050549698062241077, 0.0051190359517931938, 0.0054403785616159439, 0.0038095815107226372, 0.0050552967004477978, 0.0070434915833175182, 0.0090008731931447983, 0.0046236356720328331, 0.0079160397872328758, 0.0045432373881340027, 0.0056411111727356911, 0.018483342602849007, 0.47617685794830322, 0.0033248062245547771, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 16087, 1492, 7788, -728, 5486, 5466, 13457, 5817, -1258, 16660, 8194, 1655, 8278, 38248, -634, -2386, 10887, 14506, 1961, -101, -717, 15265, 4820, 3511, 7588, 3726, 4498, 3815, 118, 35, 6899, 9667, 14136, 1672, 6625, -565, 15426, 6995, 936, 5137, 697, 11051, 12789, 4045, 2678, 11415, 15998, 5263, 4736, 2731, 241, -645, 19926, 7084, 8709, 15839, -239, 5446, 3926, 4041, 14220, 7329, 2820, 5764, 5964, 5012, 4449, -875, 18973, 6040, 10052, -1360, -1542, 3121, 1223, 3534, 23857, 16274, 15676, -2188, 6025, -6303, -2488, 631, 7656, 7400, 6221, 4395, 10871, 3446, 7157, 4276, 13691, 19267, -11018, 12611, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015953974798321724, 0.0002364001702517271, 0.00017088084132410586, 0.00080520042683929205, 0.00029133565840311348, 0.00016743114974815398, 0.00023356813471764326, 0.00060508842580020428, 0.00036178971640765667, 0.00010929112613666803, 0.00017096985538955778, 0.00049344368744641542, 0.00033344043185934424, 0.00012657715706154704, 0.00017362722428515553, 0.00029717362485826015, 0.00020396988838911057, 0.00016284083540085703, 0.00021840001863893121, 0.00074996083276346326, 0.00044652336509898305, 0.00016395968850702047, 0.00031852209940552711, 0.00022838861332274973, 0.00023192939988803118, 0.00056681124260649085, 0.00031533927540294826, 0.00024531417875550687, 0.00060201343148946762, 0.0003749811730813235, 0.00021355152421165258, 0.00019264021830167621, 0.00013881415361538529, 0.00064943527104333043, 0.00025450601242482662, 0.00049487978685647249, 0.00014414225006476045, 0.00037159552448429167, 0.00046368094626814127, 0.00018618493049871176, 0.0006794024957343936, 0.00017233322432730347, 0.00016865190991666168, 0.00018904291209764779, 0.00042343826498836279, 0.00028886890504509211, 0.00017979438416659832, 0.00027395860524848104, 0.00033492015791125596, 0.00033393761259503663, 0.00051984924357384443, 0.0010258659021928906, 0.00013445821241475642, 0.00022751162759959698, 0.00026967594749294221, 0.00011710485705407336, 0.00037886184873059392, 0.00032116248621605337, 0.00020114777726121247, 0.00039791327435523272, 0.00011654574336716905, 0.00019386594067327678, 0.00036987281055189669, 0.00047998045920394361, 0.00017781034694053233, 0.00022645611898042262, 0.00043516099685803056, 0.00036664103390648961, 0.00014031013415660709, 0.0001905532117234543, 0.00019445028738118708, 0.00034460730967111886, 0.00026854878524318337, 0.00040877665742300451, 0.00034737552050501108, 0.00035404405207373202, 9.922338358592242e-05, 0.00027391378534957767, 0.00010694380034692585, 0.00055018119746819139, 0.00018246778927277774, 0.00033026494202204049, 0.00014973421639297158, 0.00046053287223912776, 0.00021031255892012268, 0.00021452568762470037, 0.00026203703600913286, 0.0003156551974825561, 0.00015777935914229602, 0.00045972480438649654, 0.00019766850164160132, 0.00040539380279369652, 0.00015396650996990502, 0.00014433865726459771, 0.00026729906676337123, 0.00026189850177615881, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 32,-20,127,123,77,-7,55,-37,124,-1,-39,-68,21,59,-16,-92, 
  /* [1][0][][] */ 26,93,-16,4,70,7,20,34,60,90,-25,127,-15,-36,112,-77, 
  /* [2][0][][] */ 17,-32,8,5,-25,45,-56,58,-66,-72,12,78,-14,-127,69,-103, 
  /* [3][0][][] */ 119,101,-11,32,-127,-24,-51,-11,1,-6,97,-76,-37,97,-28,-14, 
  /* [4][0][][] */ -2,-7,0,17,-41,38,-13,56,-55,-43,0,-2,2,-127,29,12, 
  /* [5][0][][] */ 123,-72,-6,20,0,-97,-24,28,8,-11,-127,22,26,6,-8,21, 
  /* [6][0][][] */ -127,-67,-14,77,-44,3,-43,22,-111,-66,-50,-26,12,42,-5,96, 
  /* [7][0][][] */ -17,22,-71,42,36,-127,-15,50,20,-34,17,-10,7,25,-27,16, 
  /* [8][0][][] */ 25,-50,-4,-9,13,33,-54,-56,-13,21,-72,20,-127,2,-3,23, 
  /* [9][0][][] */ 18,-48,64,101,-4,10,3,-46,127,-81,-4,-25,3,59,-60,27, 
  /* [10][0][][] */ -124,-88,-11,-44,104,36,45,75,116,-74,-105,34,96,-104,-127,99, 
  /* [11][0][][] */ 57,-9,-127,7,55,16,-29,42,-6,-22,-17,-6,11,36,-46,11, 
  /* [12][0][][] */ 126,-82,-3,15,-15,-57,-85,-33,39,19,-127,-8,-71,-33,-7,67, 
  /* [13][0][][] */ 42,-79,25,-84,114,24,-94,-127,55,-93,26,10,28,-12,39,20, 
  /* [14][0][][] */ -61,40,-110,-64,84,-127,68,-78,58,61,0,-111,28,110,-7,35, 
  /* [15][0][][] */ 42,14,72,31,63,-43,-46,-18,14,-61,-84,3,-127,-57,-21,34, 
  /* [16][0][][] */ -124,56,10,13,-17,87,59,83,-15,47,127,6,21,22,12,-25, 
  /* [17][0][][] */ -14,-1,-47,-42,-39,10,35,84,-28,127,-22,1,-8,96,72,1, 
  /* [18][0][][] */ -22,123,-47,12,-3,20,61,-61,36,127,-34,119,-14,-54,36,-71, 
  /* [19][0][][] */ 16,-7,28,5,7,27,-13,7,1,0,-42,-13,-127,0,-1,26, 
  /* [20][0][][] */ 94,-56,-3,-82,-39,33,33,-83,-50,20,-127,-27,43,-4,54,-6, 
  /* [21][0][][] */ 41,-1,127,31,-7,57,27,7,8,25,-8,-13,-18,88,-6,-13, 
  /* [22][0][][] */ 14,26,6,-6,-15,6,53,127,16,10,31,42,19,23,35,24, 
  /* [23][0][][] */ -6,30,-87,19,12,-127,5,39,-6,-24,-23,12,-50,-1,-6,43, 
  /* [24][0][][] */ 36,-55,8,-58,50,9,-37,-16,35,25,74,85,-56,80,127,39, 
  /* [25][0][][] */ -127,-72,-46,-10,11,-3,5,-37,-64,-8,-67,2,11,37,17,34, 
  /* [26][0][][] */ 6,10,37,-11,-10,20,-23,41,-68,-58,5,3,6,-127,38,-17, 
  /* [27][0][][] */ -86,33,-40,22,24,-9,-7,18,32,-28,127,15,-26,10,-19,-9, 
  /* [28][0][][] */ -6,2,14,31,-3,-1,9,79,14,15,-26,-13,-127,-16,-12,28, 
  /* [29][0][][] */ -15,66,38,-44,47,-16,22,-32,-127,25,-34,4,3,31,-86,8, 
  /* [30][0][][] */ -2,-16,-127,-11,19,-85,-6,28,-23,-30,-21,-15,-37,-20,16,18, 
  /* [31][0][][] */ 127,-22,-117,-2,30,-6,-26,52,-24,-7,-58,-50,19,-15,-63,38, 
  /* [32][0][][] */ -127,38,19,37,35,83,28,20,8,-8,96,35,-22,-2,7,-26, 
  /* [33][0][][] */ -3,-9,127,-48,-72,36,0,-58,-7,21,7,13,-9,15,58,17, 
  /* [34][0][][] */ -35,-22,-13,-116,54,41,15,-10,4,-46,-22,-127,-24,18,50,14, 
  /* [35][0][][] */ -6,-29,48,39,62,-18,19,-26,-127,50,-1,23,-31,125,-39,-47, 
  /* [36][0][][] */ -114,63,-30,-14,-11,36,22,71,-13,23,127,-14,-4,9,-5,-19, 
  /* [37][0][][] */ -44,29,127,-56,-79,-70,21,-32,29,9,2,3,14,-60,74,23, 
  /* [38][0][][] */ 6,-33,-8,37,52,-55,-80,22,-12,-32,81,-1,127,44,-24,7, 
  /* [39][0][][] */ 2,-25,8,-94,-39,-127,29,94,-69,-40,-29,-74,43,51,5,54, 
  /* [40][0][][] */ 61,-6,-19,-17,-14,91,-16,0,26,4,25,-6,127,18,-37,-20, 
  /* [41][0][][] */ -12,-7,-24,-127,17,-11,-10,-46,4,-33,15,-52,3,-13,-21,26, 
  /* [42][0][][] */ 39,44,1,106,-127,-18,-66,5,-88,-52,71,-78,-38,104,-33,16, 
  /* [43][0][][] */ 26,116,-15,127,32,26,39,-64,-34,87,-12,26,5,-34,30,22, 
  /* [44][0][][] */ -15,-25,-127,21,52,54,-45,45,-26,-17,39,-22,1,-27,-65,6, 
  /* [45][0][][] */ -5,0,-15,-127,-40,6,41,-9,-24,11,-20,22,4,-104,34,-29, 
  /* [46][0][][] */ 8,30,65,-9,24,21,-50,48,11,-62,-24,16,-4,127,53,-18, 
  /* [47][0][][] */ 8,-23,22,-29,-33,28,-52,44,-15,-19,15,35,5,-127,38,15, 
  /* [48][0][][] */ -4,-19,7,-127,-3,-14,-7,3,22,-29,20,-6,0,49,9,52, 
  /* [49][0][][] */ 27,-28,-1,107,94,0,10,46,-71,15,42,34,-12,40,127,-13, 
  /* [50][0][][] */ -19,-4,52,-42,-14,101,-22,-74,20,-10,127,15,108,-16,8,-49, 
  /* [51][0][][] */ 28,44,14,5,24,4,-44,20,48,-2,3,127,18,40,31,-42, 
  /* [52][0][][] */ -8,43,112,15,12,-43,1,-33,-33,1,-5,37,8,100,-127,-32, 
  /* [53][0][][] */ -8,-11,-41,-127,-47,-1,20,-37,-17,31,6,-17,26,-20,42,10, 
  /* [54][0][][] */ 10,7,-24,-43,27,-1,-22,3,60,-28,-3,-29,-16,127,14,22, 
  /* [55][0][][] */ -17,-23,-47,4,16,-34,-6,-127,19,-71,1,-7,-32,-78,-22,-21, 
  /* [56][0][][] */ 34,37,37,64,5,-15,14,127,18,-20,6,-29,71,-10,-54,28, 
  /* [57][0][][] */ 87,-7,127,-44,-71,-36,-1,-41,36,30,-77,19,67,-31,42,16, 
  /* [58][0][][] */ 119,109,-1,106,-127,-21,-29,24,-38,4,91,-46,-83,-82,-22,-84, 
  /* [59][0][][] */ 127,-44,-9,9,-43,-39,2,17,-40,29,-116,-19,6,5,-5,24, 
  /* [60][0][][] */ -127,55,-22,9,17,13,48,42,12,33,101,9,-34,-24,26,-11, 
  /* [61][0][][] */ -99,61,33,19,45,27,-84,-59,127,-116,102,-29,47,-28,-122,-77, 
  /* [62][0][][] */ -28,-42,-127,47,89,87,-8,121,35,-66,38,-27,-79,17,-117,-24, 
  /* [63][0][][] */ -35,28,127,-45,-56,-46,31,-28,4,30,3,6,0,-49,61,9, 
  /* [64][0][][] */ 25,82,13,29,77,10,69,-127,-13,105,13,-5,-31,-113,-5,36, 
  /* [65][0][][] */ 21,33,2,-32,71,-5,-2,-127,-28,-85,-47,-53,11,-33,46,23, 
  /* [66][0][][] */ -127,-6,-14,10,-37,21,13,-34,-68,-28,-66,51,50,24,44,74, 
  /* [67][0][][] */ 16,-57,14,127,19,-23,-49,30,43,3,-6,-23,4,-18,-117,-32, 
  /* [68][0][][] */ 9,-10,-24,127,-41,-29,12,-22,-51,30,14,-18,-15,-62,1,-21, 
  /* [69][0][][] */ 59,87,31,127,25,6,64,-112,21,113,33,65,-8,-14,37,-8, 
  /* [70][0][][] */ -4,-80,14,-67,73,23,-12,-13,60,-35,113,10,53,127,50,120, 
  /* [71][0][][] */ 13,49,7,86,58,-127,-45,86,41,-92,18,18,8,-54,-58,32, 
  /* [72][0][][] */ -127,-63,-24,39,31,21,-28,9,-61,-41,-100,26,67,14,5,91, 
  /* [73][0][][] */ -36,-9,-9,71,17,-6,15,-21,87,36,15,21,3,127,-49,-47, 
  /* [74][0][][] */ 43,-30,24,-21,-34,-12,38,-16,-33,-1,-75,25,-127,-1,41,37, 
  /* [75][0][][] */ -18,-6,-14,127,-34,25,0,-14,-62,20,-14,-24,-2,-45,-25,-32, 
  /* [76][0][][] */ 7,-4,-9,29,30,2,-27,-120,5,-127,3,4,-18,-20,23,-31, 
  /* [77][0][][] */ 127,-35,56,65,-34,10,-53,-12,49,-20,-55,76,27,16,-20,28, 
  /* [78][0][][] */ -15,-4,66,16,21,4,-54,36,46,-29,-37,-34,9,127,27,-49, 
  /* [79][0][][] */ 1,30,51,12,51,57,-69,-52,14,-41,70,-12,127,-10,-38,-32, 
  /* [80][0][][] */ -127,-68,-90,104,-24,15,46,-25,-106,19,-72,-9,35,-91,0,52, 
  /* [81][0][][] */ 81,26,-57,34,118,88,-37,-38,-14,-127,-16,-108,-39,-8,-111,15, 
  /* [82][0][][] */ 114,120,-1,46,-127,-13,-87,-34,-80,-1,123,-50,-67,102,-7,-41, 
  /* [83][0][][] */ 127,43,10,-31,13,-14,-7,33,42,21,97,-31,-59,-26,-31,-77, 
  /* [84][0][][] */ 12,-55,-42,-20,45,19,-4,-127,-32,-62,11,21,-10,-19,12,-15, 
  /* [85][0][][] */ -34,-4,-46,-65,0,-15,70,110,-7,127,-4,-47,15,83,71,-20, 
  /* [86][0][][] */ 66,-46,3,11,7,-17,-7,-4,11,-11,-127,20,18,25,-1,32, 
  /* [87][0][][] */ -17,28,-4,-29,-23,56,-33,48,-20,-26,28,6,10,-127,16,16, 
  /* [88][0][][] */ -5,-18,-73,-47,84,12,-17,-127,22,-12,-4,-9,-25,-19,41,-34, 
  /* [89][0][][] */ 37,-38,31,-127,39,33,-63,92,81,-50,52,22,-12,20,29,43, 
  /* [90][0][][] */ 4,22,-55,30,61,-18,105,-80,48,127,-39,13,36,-12,-5,-5, 
  /* [91][0][][] */ 47,-6,-41,-20,-13,-127,-22,5,-6,-10,-40,-4,35,2,5,29, 
  /* [92][0][][] */ 21,-4,127,56,47,2,-8,23,-38,23,-56,15,7,69,-11,-15, 
  /* [93][0][][] */ 127,-24,-25,-17,-21,-34,15,45,-18,53,-119,-11,-1,15,-13,50, 
  /* [94][0][][] */ 19,-30,57,102,113,-26,-29,48,-10,-36,-13,75,-17,127,-52,-79, 
  /* [95][0][][] */ -103,32,30,45,6,33,23,8,6,17,127,-25,-27,33,-20,-13, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00051883864216506481, 0.00076879613334313035, 0.00055572099518030882, 0.0026185894384980202, 0.00094745168462395668, 0.00054450222523882985, 0.00075958610977977514, 0.0019678059034049511, 0.0011765750823542476, 0.00035542529076337814, 0.00055601046187803149, 0.0016047264216467738, 0.0010843804338946939, 0.00041164111462421715, 0.00056465249508619308, 0.00096643733559176326, 0.00066332973074167967, 0.00052957411389797926, 0.00071025791112333536, 0.0024389449972659349, 0.0014521370176225901, 0.00053321273298934102, 0.0010358645813539624, 0.0007427418022416532, 0.00075425679096952081, 0.0018433248624205589, 0.0010255137458443642, 0.00079778535291552544, 0.0019578058272600174, 0.0012194749433547258, 0.000694490154273808, 0.00062648457242175937, 0.00045143702300265431, 0.0021120260935276747, 0.00082767813000828028, 0.0016093967715278268, 0.00046876448323018849, 0.0012084644986316562, 0.0015079351142048836, 0.0006054913392290473, 0.0022094824817031622, 0.00056044425582513213, 0.0005484722787514329, 0.00061478576390072703, 0.0013770620571449399, 0.00093942956300452352, 0.00058470870135352015, 0.00089093984570354223, 0.0010891926940530539, 0.0010859973262995481, 0.0016905998345464468, 0.0033362149260938168, 0.00043727108277380466, 0.00073988974327221513, 0.00087701214943081141, 0.00038083628169260919, 0.0012320952955633402, 0.0010444513754919171, 0.00065415195422247052, 0.0012940523447468877, 0.0003790179907809943, 0.00063047074945643544, 0.0012028620112687349, 0.0015609427355229855, 0.00057825638214126229, 0.00073645712109282613, 0.0014151855139061809, 0.0011923520360141993, 0.00045630210661329329, 0.00061969744274392724, 0.00063237111316993833, 0.0011206961935386062, 0.00087334658019244671, 0.0013293811352923512, 0.0011296987067908049, 0.0011513853678479791, 0.00032268400536850095, 0.000890794035512954, 0.00034779155976139009, 0.0017892422620207071, 0.0005934028304181993, 0.0010740534635260701, 0.00048695009900256991, 0.0014976973179727793, 0.0006839567213319242, 0.00069765822263434529, 0.00085216970182955265, 0.0010265411110594869, 0.00051311368588358164, 0.001495069358497858, 0.00064283702522516251, 0.0013183797709643841, 0.00050071394070982933, 0.00046940322499722242, 0.00086928234668448567, 0.00085171923274174333, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -36165, 4910, 3214, -8760, 625, -6110, -12091, -44470, 1220, 22116, 36288, -11068, -1880, -20816, 38883, -44770, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00073513900861144066, 0.00074964243685826659, 0.0010238508693873882, 0.00096361542819067836, 0.00095318915555253625, 0.0011770812561735511, 0.0009222473599947989, 0.00065021909540519118, 0.00064475683029741049, 0.00056131498422473669, 0.00090351147809997201, 0.00064320274395868182, 0.0010390314273536205, 0.0012391444761306047, 0.00054462003754451871, 0.0006330171599984169, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -14,2,-26,9,26,-5,-2,97,-54,16,36,-7,17,-18,-6,16,17,-10,-6,-1,64,-4,17,127,-21,83,-12,-15,24,-15,25,-33,-21,53,20,-43,18,52,18,-15,-105,-28,19,43,34,23,-124,-49, 
  /* [1][0][][] */ -36,-16,19,19,-25,9,5,57,-57,-33,4,-46,-18,-15,-4,-3,-23,127,-6,20,12,12,-23,-14,27,-37,18,24,-36,-91,-37,16,-22,-2,29,-1,-8,-43,-1,19,-17,-35,127,7,12,5,22,-19, 
  /* [2][0][][] */ -21,-10,-14,-37,-2,-60,8,-23,-1,11,16,22,18,10,-12,11,1,-15,-22,-12,-3,2,-2,-127,-12,69,-12,6,0,-23,-8,-12,-1,47,8,-3,20,12,25,3,-40,8,-21,-3,1,-12,18,9, 
  /* [3][0][][] */ -7,31,0,-28,2,-1,4,-3,-19,-2,-2,40,-127,7,-6,-4,5,2,-18,1,-29,5,5,17,-8,-10,3,27,-12,18,6,19,0,5,16,20,-8,22,39,3,11,4,19,-29,9,-2,0,17, 
  /* [4][0][][] */ 34,-37,5,11,19,26,25,-18,-31,2,-14,-20,2,16,0,17,25,-6,-75,7,-2,7,14,73,5,-21,5,49,7,-80,21,6,9,-30,30,-127,11,32,-1,15,-17,14,4,-25,-8,-25,8,3, 
  /* [5][0][][] */ 30,0,-18,65,0,-10,16,26,4,-9,40,14,2,53,6,-1,-26,20,27,-1,8,-2,6,-24,6,-53,7,-24,-4,-13,7,10,64,-127,6,28,-12,-18,9,1,-92,58,24,2,-2,-3,-108,-5, 
  /* [6][0][][] */ 23,-2,2,4,-12,-3,3,-12,0,5,1,7,-18,9,3,4,-4,-14,127,9,4,9,15,-36,7,5,29,-13,-11,-2,-3,12,2,-13,32,-38,1,-44,72,9,-2,-5,-5,6,-15,1,7,-11, 
  /* [7][0][][] */ -45,-15,-4,37,-8,83,-9,44,-2,35,-3,127,80,-6,-16,-7,-3,-25,-10,-17,-35,-2,-19,70,-1,-44,-50,-29,-19,-13,-12,-10,10,-1,-24,2,9,-60,103,2,25,33,-66,-55,19,-7,7,5, 
  /* [8][0][][] */ -53,-47,-2,3,-9,5,-2,35,-4,-68,7,45,50,8,7,3,-11,62,-34,-2,-54,19,-6,-14,5,-3,7,46,-16,123,-4,33,1,3,-20,-127,-112,66,37,27,19,-2,117,-23,6,37,21,33, 
  /* [9][0][][] */ -30,1,-10,33,21,-28,0,-2,59,-42,10,59,-55,-2,11,5,-6,19,-36,-18,50,6,-15,-20,3,4,48,-21,16,12,7,1,-3,16,70,-98,-11,-127,-88,7,-29,31,56,12,5,11,-14,-42, 
  /* [10][0][][] */ -17,-15,-29,-127,49,85,17,-18,-5,36,20,7,56,-48,-40,18,40,-40,58,-32,33,-26,47,60,-50,-115,7,-37,44,32,55,-35,-36,-77,23,0,22,-49,0,-31,-31,-70,-10,11,19,28,13,-40, 
  /* [11][0][][] */ -3,58,2,64,34,-61,-77,-26,6,60,-13,6,-11,50,-7,-82,16,40,5,-14,-50,-103,15,0,16,-48,21,-21,61,-30,29,-67,49,-22,-34,-84,94,17,6,-127,-4,71,103,-63,-19,-48,38,28, 
  /* [12][0][][] */ 127,-1,-17,15,3,22,2,96,26,-5,-54,-21,1,16,-14,-1,-15,9,-2,-7,5,6,5,16,-4,13,3,11,5,21,0,0,8,-71,-13,12,-18,-13,-36,1,-15,-79,4,-125,-66,-11,86,-7, 
  /* [13][0][][] */ 8,0,-1,3,6,-9,0,-1,-2,9,4,20,-4,4,6,-1,6,0,9,4,11,-9,9,-5,1,-1,17,127,10,-4,8,-3,4,0,-39,19,9,-4,6,-13,-15,-3,0,5,-1,0,-7,-11, 
  /* [14][0][][] */ 66,-18,49,-67,52,31,36,-103,-53,-55,-6,127,-76,-3,65,15,52,24,-55,71,28,21,73,-12,27,54,-29,-127,35,-35,66,56,-4,76,-127,-46,-38,43,96,5,-29,5,63,3,-6,-3,21,-34, 
  /* [15][0][][] */ -10,-44,-71,-39,50,31,67,-49,-10,21,-16,-31,77,24,-94,62,57,48,73,-87,-103,-30,55,-18,-96,40,28,56,58,51,48,-41,25,57,99,120,-20,-112,-3,-39,90,64,127,-49,-3,-38,-13,70, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.031243408098816872, 0.031859803944826126, 0.043513663113117218, 0.040953654795885086, 0.040510538965463638, 0.050025954842567444, 0.039195511490106583, 0.027634311467409134, 0.027402164414525032, 0.023855885490775108, 0.038399238139390945, 0.027336115017533302, 0.044158834964036942, 0.052663639187812805, 0.023146351799368858, 0.026903228834271431, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 5138, 35215, -1464, 49155, 4520, 139885, -2719, 51739, 2613, 29320, 23136, 1845, 107, 30034, -602, -1828, -617, 667, 3251, -1572, 699, -1242, -787, -17020, -5499, 40591, 130246, 97234, 3205, 1155, -1256, -312, 24343, 951, 26729, -2481, 45776, 41, 53686, 2097, 878, 55000, -1261, 3330, 47861, -111, -625, 42321, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.6134511143900454e-05, 3.5616001696325839e-05, 0.00014765012019779533, 4.8155383410630748e-05, 0.00014676169666927308, 5.0112725148210302e-05, 0.00013683173165190965, 0.00011237476428505033, 8.545859600417316e-05, 4.0883398469304666e-05, 4.3023152102250606e-05, 0.00010007085074903443, 4.4509277358883992e-05, 4.0618699131300673e-05, 0.00015701571828685701, 0.00017650576774030924, 0.00016222443082369864, 8.0030447861645371e-05, 0.00010173108603339642, 0.00017117414972744882, 7.5527212175074965e-05, 0.00018890622595790774, 8.2693921285681427e-05, 0.00010921929060714319, 9.0528948931023479e-05, 0.00011007708963006735, 2.687643063836731e-05, 7.5640688010025769e-05, 0.00012132824485888705, 0.000128265077364631, 0.00010922500223387033, 0.0001385810028295964, 4.8891186452237889e-05, 0.00012213198351673782, 3.1576601031702012e-05, 5.7382476370548829e-05, 0.00012470543151721358, 0.00010153709445148706, 0.00010518281487748027, 0.00010353276593377814, 0.00010738427954493091, 0.00010662930435501039, 0.00010729881614679471, 9.068678627954796e-05, 3.2992251362884417e-05, 0.00014075289072934538, 0.00012247715494595468, 2.9344430004130118e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-93,97,70,52,-34,106,-65,61,-88,-79,48,53,-43,-71,-90,102,77,48,77,67,-76,-83,52,-32,-41,-65,-66,-67,63,-64,-113,-14,41,71,64,-64,53,-49,-23,50,-75,59,62,-92,12,77,-34, 83,-98,127,85,-78,-68,-57,-85,96,-102,-63,74,81,-110,-95,90,-38,95,82,127,86,-118,53,71,-52,-78,-69,-81,56,81,-30,-127,-85,78,84,83,-81,82,-82,-16,75,-95,85,89,-70,-127,94,-104, 34,-46,70,37,17,-43,-48,-40,41,-31,5,34,30,-79,-55,-1,-55,36,34,70,35,-56,32,25,-28,-47,-45,-23,31,32,88,-88,-85,45,36,33,-29,40,-37,-10,41,-40,37,43,-5,-9,38,-73, 
  /* [0][1][][] */ 91,-112,-41,94,55,-82,127,-89,89,-113,-70,81,85,-109,-14,-127,127,107,74,-38,84,107,-127,73,73,-75,-94,-99,-127,86,-70,-10,-88,71,107,95,-85,79,-79,90,83,-102,88,91,-86,108,95,-91, 127,-127,-64,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,96,-65,127,127,-51,127,127,68,127,127,-127,-127,-127,53,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 62,-77,-32,67,37,-63,-49,-62,56,-43,-60,57,49,-54,-16,10,-62,50,58,-30,57,64,51,65,66,-64,-62,-44,37,56,127,15,-64,70,48,49,-49,60,-59,56,60,-58,54,62,-63,-67,60,-57, 
  /* [0][2][][] */ 45,-52,-47,51,27,-54,63,-44,42,-73,-4,39,56,-74,82,-79,72,51,35,-30,25,-11,-78,30,-24,-46,-49,-49,-75,31,-41,91,-73,37,49,42,-27,37,-41,-88,46,-49,40,45,-23,16,42,-73, 73,-74,-48,82,-56,-64,-72,-69,50,-78,-67,60,73,-48,127,32,-47,60,62,-45,55,-19,41,67,-48,-67,-78,-61,32,61,-25,118,-54,64,57,58,-49,61,-65,-108,68,-68,58,62,-87,49,63,-52, 41,-40,-26,46,28,-21,-18,-34,14,-26,-52,27,32,3,67,24,-36,21,28,-34,29,-1,39,43,-24,-29,-49,-24,34,35,62,66,0,34,15,22,-23,29,-29,-56,28,-33,25,29,-63,9,33,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028107166290283203, 0.0015136799775063992, 0.0062751299701631069, 0.0020466037094593048, 0.0062373718246817589, 0.0021297908388078213, 0.0058153485879302025, 0.0047759274020791054, 0.0036319901701062918, 0.0017375444294884801, 0.0018284840043634176, 0.0042530111968517303, 0.0018916442058980465, 0.0017262947512790561, 0.0066731679253280163, 0.0075014950707554817, 0.0068945381790399551, 0.0034012941177934408, 0.0043235709890723228, 0.007274901494383812, 0.0032099063973873854, 0.0080285146832466125, 0.0035144917201250792, 0.0046418197453022003, 0.0038474802859127522, 0.0046782763674855232, 0.0011422482784837484, 0.0032147292513400316, 0.0051564504392445087, 0.0054512657225131989, 0.0046420623548328876, 0.005889692809432745, 0.0020778754260390997, 0.005190609022974968, 0.0013420055620372295, 0.002438755240291357, 0.0052999807521700859, 0.0043153264559805393, 0.0044702696613967419, 0.0044001424685120583, 0.0045638317242264748, 0.004531745333224535, 0.0045601995661854744, 0.0038541883695870638, 0.001402170630171895, 0.005981997586786747, 0.0052052787505090237, 0.001247138250619173, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 567, 949, 2160, 519, 8070, 16122, 2263, -18, -702, -598, 1147, 911, 3093, 1008, 21145, 2833, 1820, -1131, -222, 3011, -1311, 10743, 9759, 9162, 4583, 155, 2629, 3274, 9970, -469, 7420, 6045, 552, -146, 4764, 2976, -1683, 264, -723, 4927, 1091, -652, -964, -36, 1084, 2706, 798, 819, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00040421262383460999, 0.0007443327340297401, 0.00026546197477728128, 0.00033008281025104225, 0.00027291887090541422, 0.00025330716744065285, 0.00049800635315477848, 0.00027125500491820276, 0.00037829278153367341, 0.00077179248910397291, 0.00087140890536829829, 0.00032201255089603364, 0.0003935489512514323, 0.00073637743480503559, 0.00017029020818881691, 0.00045294078881852329, 0.00027202718774788082, 0.00037546659586951137, 0.00024117004068102688, 0.00030190718825906515, 0.00046079841558821499, 0.00023864067043177783, 0.00037703799898736179, 0.00016984832473099232, 0.00035009894054383039, 0.00031692045740783215, 0.0026523431297391653, 0.00056926265824586153, 0.00017560648848302662, 0.00043760443804785609, 0.00034776402753777802, 0.00020073066116310656, 0.00072781188646331429, 0.0002727519313339144, 0.00076957768760621548, 0.00061666220426559448, 0.0008164619212038815, 0.00034095675800926983, 0.00025068552349694073, 0.00037824510945938528, 0.00017209196812473238, 0.00025674214703030884, 0.0002953034418169409, 0.00030811474425718188, 0.0018209930276498199, 0.00051009276648983359, 0.00030953841633163393, 0.0014229449443519115, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-5,67,-31,41,25,-24, 
  /* [1][0][][] */ 29,72,62,13,16,-46,101,127, 
  /* [2][0][][] */ -36,13,18,9,-127,-24,23,-11, 
  /* [3][0][][] */ 99,-3,1,-126,-127,15,32,-24, 
  /* [4][0][][] */ -127,39,-2,-3,68,-12,45,20, 
  /* [5][0][][] */ -111,-31,17,-11,-127,11,9,91, 
  /* [6][0][][] */ -14,-127,24,-14,16,8,-4,29, 
  /* [7][0][][] */ -65,-8,6,102,127,-32,-35,6, 
  /* [8][0][][] */ 78,9,12,-127,12,-18,-52,-47, 
  /* [9][0][][] */ 8,-127,-16,-6,1,73,-59,79, 
  /* [10][0][][] */ -105,-10,4,23,-127,76,60,-19, 
  /* [11][0][][] */ 119,9,36,14,-59,-38,-36,-127, 
  /* [12][0][][] */ -4,13,47,-9,14,-78,127,61, 
  /* [13][0][][] */ 62,-27,-7,-1,116,127,119,-40, 
  /* [14][0][][] */ 127,39,-24,17,-100,-6,-24,-15, 
  /* [15][0][][] */ -12,-127,12,-19,6,10,0,28, 
  /* [16][0][][] */ -54,-17,-2,5,-127,3,18,10, 
  /* [17][0][][] */ -23,103,-111,-4,9,-127,112,-90, 
  /* [18][0][][] */ 127,-31,-42,14,-55,29,9,102, 
  /* [19][0][][] */ 127,-47,-13,-6,60,-11,44,14, 
  /* [20][0][][] */ 111,24,-19,127,4,41,10,-49, 
  /* [21][0][][] */ 8,37,-66,0,-31,83,-127,-93, 
  /* [22][0][][] */ -127,10,23,-2,-30,10,-58,-30, 
  /* [23][0][][] */ -39,-51,1,24,-127,56,69,-16, 
  /* [24][0][][] */ 127,-7,-26,-11,-71,-6,-4,1, 
  /* [25][0][][] */ 24,-18,-3,-28,127,59,50,-32, 
  /* [26][0][][] */ -2,-113,1,-41,6,-127,79,-57, 
  /* [27][0][][] */ -17,-127,23,-17,-5,-51,32,-11, 
  /* [28][0][][] */ -101,28,-40,10,-5,-50,126,127, 
  /* [29][0][][] */ -10,43,10,1,1,49,-102,-127, 
  /* [30][0][][] */ 127,-37,-11,11,-70,11,-37,-16, 
  /* [31][0][][] */ -16,-24,58,-7,15,-127,122,81, 
  /* [32][0][][] */ -85,31,1,14,-127,-101,-99,45, 
  /* [33][0][][] */ -25,15,-1,20,-127,-58,-45,19, 
  /* [34][0][][] */ 13,-127,56,-12,-8,89,-86,62, 
  /* [35][0][][] */ -26,-51,-127,-8,-1,-69,45,-52, 
  /* [36][0][][] */ 6,127,58,5,-11,13,-22,-39, 
  /* [37][0][][] */ -127,31,36,-16,55,-31,-10,-105, 
  /* [38][0][][] */ -127,-7,-48,-10,41,15,37,119, 
  /* [39][0][][] */ -4,-25,77,-16,27,-83,127,86, 
  /* [40][0][][] */ -29,-15,-9,-35,-127,102,107,-35, 
  /* [41][0][][] */ -127,58,4,-75,-96,-112,-96,54, 
  /* [42][0][][] */ -43,-127,-100,-3,-20,69,-110,-88, 
  /* [43][0][][] */ -66,2,-10,-127,94,55,63,3, 
  /* [44][0][][] */ 127,-9,16,-116,39,-48,-17,40, 
  /* [45][0][][] */ -29,-127,-15,-18,-3,-72,78,9, 
  /* [46][0][][] */ 110,-4,-9,-29,127,-39,-31,3, 
  /* [47][0][][] */ 127,-4,-6,107,-6,26,17,-40, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0007256586104631424, 0.0013362556928768754, 0.00047656791866756976, 0.00059257779503241181, 0.00048995483666658401, 0.00045474711805582047, 0.0008940408006310463, 0.00048696776502765715, 0.00067912624217569828, 0.0013855525758117437, 0.0015643879305571318, 0.00057808973360806704, 0.00070651475107297301, 0.0013219740940257907, 0.00030571175739169121, 0.0008131373324431479, 0.00048835400957614183, 0.00067405257141217589, 0.00043295804061926901, 0.00054199580335989594, 0.00082724366802722216, 0.00042841723188757896, 0.00067687360569834709, 0.00030491847428493202, 0.00062851153779774904, 0.00056894822046160698, 0.0047615920193493366, 0.0010219629621133208, 0.00031525574740953743, 0.00078560487600043416, 0.00062431982951238751, 0.0003603596705943346, 0.0013065969105809927, 0.00048965512542054057, 0.0013815765269100666, 0.0011070565087720752, 0.0014657449210062623, 0.00061209913110360503, 0.00045004062121734023, 0.00067904067691415548, 0.00030894635710865259, 0.00046091372496448457, 0.0005301404744386673, 0.00055313983466476202, 0.0032691191881895065, 0.00091573887038975954, 0.00055569567484781146, 0.0025545274838805199, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -37642, 28957, -13230, -12481, 20262, -4601, 34528, 49554, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00054350472055375576, 0.00069281115429475904, 0.0014368337579071522, 0.001712365890853107, 0.00078440678771585226, 0.00061792536871507764, 0.0006742540281265974, 0.00093956699129194021, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-12,-40,7,1,-17,2,0,-113,127,-25,103,96,5,57,-17,-8,-33,1,6,-15,-7,-16,-26,20,-81,9,49,-15,15,13,-32,-6,-63,103,13,-3,-7,-3,-10,101,-5,36,-9,-21,13,-12,-14, 
  /* [1][0][][] */ 0,29,127,8,-4,-30,5,-79,41,-1,26,-3,-20,6,-6,-120,14,-60,2,4,-31,40,24,-34,-18,-6,17,2,9,-1,13,-3,-4,15,19,12,-12,-33,69,-67,11,42,-16,29,-14,3,23,-3, 
  /* [2][0][][] */ 8,-47,14,-39,32,26,-4,-26,9,0,-5,15,-9,58,6,-2,-37,127,-24,-32,-17,23,-39,-10,120,2,2,-7,-31,-8,0,-42,-8,-15,1,7,-6,-2,-14,6,13,-21,-19,-2,4,22,-23,-36, 
  /* [3][0][][] */ 0,-82,-3,11,1,0,-6,-1,-6,-11,22,21,10,-14,49,5,-10,-25,0,29,-3,26,-17,1,2,47,-2,4,-8,6,127,4,10,11,-2,-3,-25,-12,-5,8,-8,7,-4,31,-2,5,3,36, 
  /* [4][0][][] */ -98,10,-5,-3,-2,-32,0,7,42,-34,23,-21,-33,-1,-14,-8,-1,8,-1,24,12,-23,20,1,-8,44,4,105,3,3,-10,-29,-3,-127,-29,8,5,-5,3,6,-51,-3,-11,20,-55,-2,11,6, 
  /* [5][0][][] */ -25,26,25,6,-45,18,-6,37,15,7,14,10,-3,-41,5,33,-12,-83,15,5,43,-41,9,33,13,1,-70,-39,-37,-30,23,5,-10,-56,-7,-65,57,11,-36,17,23,-39,9,9,127,-7,-38,-5, 
  /* [6][0][][] */ -27,-26,-7,-10,43,-29,-10,-24,-7,-13,39,-21,-14,44,-8,-57,-4,7,1,-36,-34,49,-4,-84,5,-5,-59,-69,26,42,-13,-4,4,-71,-11,72,-74,-50,14,-55,-11,7,13,47,127,-34,48,10, 
  /* [7][0][][] */ 15,37,-76,27,-22,8,4,60,3,-12,62,-34,10,-30,-14,-4,-17,-127,37,-49,60,39,17,-66,21,-17,24,1,-17,32,-9,2,5,35,-2,-29,-13,-56,-38,-72,-17,-27,36,62,-36,-16,-5,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.02309894934296608, 0.02944447286427021, 0.0610654316842556, 0.072775550186634064, 0.033337287604808807, 0.026261826977133751, 0.028655795380473137, 0.039931595325469971, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52914, -153, 9828, -374, 5923, -4864, 1030, 30761, 1305, 24819, -1802, 15641, -6546, -873, 21433, 5826, 92, 19341, 30762, 11531, 348, -231, 254, 10124, -8087, 26615, 45987, 35648, 3295, 215, 47, 1009, 620, 16676, -6709, 16500, -11508, 21588, -22223, 122222, 22871, 20780, 11648, -1269, 16551, 3355, 1365, 24, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030125302146188915, 0.0003116409934591502, 0.00017080956604331732, 0.00028530019335448742, 0.0001502716913819313, 9.7242598712909967e-05, 0.0011760209454223514, 0.0001132794059230946, 0.00012807607708964497, 0.00018797756638377905, 9.9371922260615975e-05, 0.0002709422551561147, 0.00025264592841267586, 0.00022101250942796469, 0.00011460883979452774, 0.00025995710166171193, 0.00016324486932717264, 0.00019676832016557455, 7.6202428317628801e-05, 0.00016969532589428127, 0.00025991848087869585, 0.00020762563508469611, 0.00018071188242174685, 0.00019609645823948085, 0.00016049869009293616, 0.0001356557768303901, 0.00057148007908836007, 9.1638503363355994e-05, 0.0001892236468847841, 0.0037430834490805864, 8.7906606495380402e-05, 0.00017980352276936173, 0.0014218532014638186, 0.00017198697605635971, 0.00020144901645835489, 0.00015340981190092862, 0.00033803473343141377, 0.00012248118582647294, 0.00026996084488928318, 2.0099665562156588e-05, 0.00013990931620355695, 6.1161277699284256e-05, 0.00013692189531866461, 0.00016889325343072414, 0.00014442320389207453, 0.00012132093252148479, 0.00019270436314400285, 0.00013069536362309009, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,81,-1,28,18,9,9,8,-9,-8,-43,8,-2,8,-23,-114,-7,-23,127,-9,-2,7,-5,9,-5,4,16,99,20,28,38,-28,2,33,-3,3,17,-68,-8,-10,17,2,-6,-11, 127,10,15,-127,28,87,10,10,127,127,6,44,-52,-23,6,8,127,-56,-59,-57,-102,25,-110,15,18,72,-31,-83,23,21,10,-123,5,-61,127,10,-39,-47,-7,117,-79,-99,-29,2,-35,-8,-127,23, -32,-3,8,14,-1,65,4,17,30,9,-15,32,-16,-2,17,3,-103,29,-2,77,-33,-12,-18,-6,-4,-58,-3,29,-16,4,4,-21,7,-23,16,-19,0,46,41,-12,50,38,-15,10,-43,3,-1,-6, 
  /* [0][1][][] */ 127,7,1,-98,14,-27,35,-16,10,9,-13,54,-7,0,18,-33,0,-49,-60,-84,10,-74,-124,-18,5,100,-15,-127,-8,32,13,-107,17,-53,-2,127,-3,58,-43,41,-62,-127,39,-89,-44,-15,-12,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,36,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-28,-42,127,-127,127,127,127,-79,127,127,127,-122,102,107, 54,5,49,-13,5,-61,43,18,-22,15,-106,-7,-1,-40,127,4,63,-65,-70,85,13,-46,11,-33,1,7,-37,69,21,39,0,3,32,-44,9,67,-5,63,68,-9,-81,9,-84,-32,27,-16,-10,5, 
  /* [0][2][][] */ -53,-7,26,-16,7,34,-37,22,9,-23,11,33,6,-5,-37,18,5,22,-14,105,6,-32,-16,-13,-4,23,-1,52,-10,3,47,-31,-18,-43,-31,-40,-1,30,8,-23,9,-5,42,-38,-36,17,-11,18, 69,125,75,21,16,-20,124,35,20,-2,43,27,-6,-1,-89,25,-58,-56,-36,122,-37,49,12,19,31,-63,-40,30,76,0,127,22,85,-26,8,-37,-25,-17,-13,118,-27,-13,-40,45,21,-33,7,-127, -41,-3,6,-3,5,-6,-62,8,-17,-10,-41,-39,19,-9,-8,12,33,24,-8,-127,23,-11,4,-9,-7,11,-10,-54,-14,8,6,9,-21,88,-36,-23,-4,36,26,-61,4,8,-37,6,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012803252786397934, 0.013244741596281528, 0.0072594061493873596, 0.012125257402658463, 0.0063865468837320805, 0.0041328105144202709, 0.04998089000582695, 0.0048143747262656689, 0.0054432330653071404, 0.0079890461638569832, 0.0042233066633343697, 0.011515045538544655, 0.01073745172470808, 0.0093930317088961601, 0.0048708757385611534, 0.011048176325857639, 0.0069379066117107868, 0.0083626536652445793, 0.0032386032398790121, 0.0072120511904358864, 0.011046535335481167, 0.0088240895420312881, 0.0076802549883723259, 0.0083340993151068687, 0.0068211941979825497, 0.0057653705589473248, 0.024287903681397438, 0.003894636407494545, 0.0080420048907399178, 0.15908104181289673, 0.0037360307760536671, 0.0076416498050093651, 0.060428760945796967, 0.0073094461113214493, 0.0085615832358598709, 0.0065199169330298901, 0.014366475865244865, 0.0052054501138627529, 0.011473335325717926, 0.00085423578275367618, 0.0059461458586156368, 0.0025993543677031994, 0.0058191805146634579, 0.0071779633872210979, 0.0061379862017929554, 0.0051561393775045872, 0.0081899352371692657, 0.0055545526556670666, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 53604, 7134, 5505, 7146, 1562, 10182, -1945, -257, 793, 2003, 3554, 345, 1634, -868, 862, -1986, 3919, 9733, -260, 23492, 3460, 3341, 6331, -519, 3627, 4367, 26536, 10245, -64, -2485, 84, 2163, -1892, 9818, 3001, 7622, 6865, 4075, 24473, 2088, -818, 2661, 1073, 3581, 3954, 2101, -1230, 2608, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.0287529272027314e-05, 0.00031867821235209703, 0.00027882074937224388, 0.00045170297380536795, 0.0014294346328824759, 0.0004953902680426836, 0.00098328606691211462, 0.0011512731434777379, 0.00073471461655572057, 0.00067441293504089117, 0.00064236856997013092, 0.00048516222159378231, 0.00062257261015474796, 0.00052772730123251677, 0.00053691741777583957, 0.0018379689427092671, 0.00041519460501149297, 0.00043682428076863289, 0.0019508429104462266, 0.00011409063881728798, 0.00034972728462889791, 0.00030376465292647481, 0.00063136254902929068, 0.00092249299632385373, 0.00033563145552761853, 0.00026327979867346585, 0.00015333990450017154, 0.00035785249201580882, 0.00081655738176777959, 0.001049148733727634, 0.00057262839982286096, 0.00037664457340724766, 0.0010520146461203694, 0.00022370688384398818, 0.00034373981179669499, 0.0002445257268846035, 0.00053671532077714801, 0.00033292255830019712, 9.6768686489667743e-05, 0.0021774298511445522, 0.00074476766167208552, 0.0010351667879149318, 0.0004658479883801192, 0.0004330066149123013, 0.0002962486760225147, 0.00052767503075301647, 0.00094958994304761291, 0.0010106151457875967, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,36,-9,-11,127,9,-40,-20, 
  /* [1][0][][] */ -4,-6,1,127,9,-4,5,14, 
  /* [2][0][][] */ 33,-127,-21,48,-16,-71,86,7, 
  /* [3][0][][] */ 127,-32,-9,18,-16,-38,27,4, 
  /* [4][0][][] */ 16,-54,127,-10,-8,-50,19,-104, 
  /* [5][0][][] */ 55,-14,-3,-7,127,16,-8,5, 
  /* [6][0][][] */ -18,105,-16,127,26,61,-76,-62, 
  /* [7][0][][] */ -3,127,-9,0,2,-13,15,1, 
  /* [8][0][][] */ 127,45,-3,11,-58,-22,3,-34, 
  /* [9][0][][] */ -127,4,3,15,56,23,-15,-1, 
  /* [10][0][][] */ -77,-9,17,127,35,30,-18,3, 
  /* [11][0][][] */ -127,-5,22,-64,48,16,-35,-55, 
  /* [12][0][][] */ 127,28,3,20,-46,-9,-1,-53, 
  /* [13][0][][] */ -9,78,-127,-2,3,109,-79,67, 
  /* [14][0][][] */ -72,-45,-36,127,15,23,-24,-40, 
  /* [15][0][][] */ -4,127,1,-3,0,-15,11,-50, 
  /* [16][0][][] */ -25,-110,-24,1,-19,-92,127,-43, 
  /* [17][0][][] */ 22,127,2,-15,4,74,-82,-14, 
  /* [18][0][][] */ -12,49,-127,5,11,59,-28,54, 
  /* [19][0][][] */ -61,14,4,7,-127,-4,16,33, 
  /* [20][0][][] */ -127,-24,-1,3,57,-37,42,2, 
  /* [21][0][][] */ -87,0,-5,-8,-127,3,19,6, 
  /* [22][0][][] */ -127,-16,-4,-5,75,-19,27,47, 
  /* [23][0][][] */ -29,-21,-3,-1,-8,91,-127,-104, 
  /* [24][0][][] */ -6,39,-127,4,10,47,-21,68, 
  /* [25][0][][] */ 127,-31,-11,120,-79,-23,5,-55, 
  /* [26][0][][] */ -3,-23,0,3,-15,124,127,-28, 
  /* [27][0][][] */ 65,3,-3,14,127,24,33,-27, 
  /* [28][0][][] */ 5,127,-69,4,7,83,-39,116, 
  /* [29][0][][] */ -9,11,-4,-11,-3,90,-127,-85, 
  /* [30][0][][] */ 4,-6,2,-127,-6,1,1,-11, 
  /* [31][0][][] */ -66,1,-3,5,-127,8,14,0, 
  /* [32][0][][] */ -12,38,13,-127,-9,31,-88,-98, 
  /* [33][0][][] */ -61,-16,-1,3,-127,43,37,1, 
  /* [34][0][][] */ -127,83,11,36,72,-28,15,19, 
  /* [35][0][][] */ -28,127,-11,-13,-17,-103,87,-22, 
  /* [36][0][][] */ 14,46,9,-23,-1,107,-127,-34, 
  /* [37][0][][] */ 12,-74,-11,31,23,-127,123,-22, 
  /* [38][0][][] */ 18,-127,4,-6,11,62,-64,70, 
  /* [39][0][][] */ -2,-127,-10,-6,-1,-1,-53,-112, 
  /* [40][0][][] */ 127,41,4,-5,-60,83,-118,-100, 
  /* [41][0][][] */ 14,-120,20,-2,-6,82,-63,127, 
  /* [42][0][][] */ 26,-20,0,-127,-51,5,-2,-31, 
  /* [43][0][][] */ -101,-32,22,-127,54,-3,-13,7, 
  /* [44][0][][] */ 6,-18,-7,11,-17,84,127,-12, 
  /* [45][0][][] */ -127,-34,-3,-1,9,5,25,-18, 
  /* [46][0][][] */ 19,74,127,-4,8,9,6,29, 
  /* [47][0][][] */ 1,7,12,127,13,1,5,1, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018825667211785913, 0.00074723060242831707, 0.00065377360442653298, 0.0010591445025056601, 0.0033517109695822001, 0.001161581720225513, 0.0023055903147906065, 0.0026994834188371897, 0.0017227448988705873, 0.0015813505742698908, 0.0015062135644257069, 0.001137599116191268, 0.0014597964473068714, 0.0012374048819765449, 0.001258953707292676, 0.0043096346780657768, 0.00097354041645303369, 0.0010242572752758861, 0.0045742993243038654, 0.00026751754921860993, 0.00082003389252349734, 0.00071226159343495965, 0.0014804068487137556, 0.0021630439441651106, 0.00078698224388062954, 0.00061733345501124859, 0.00035954848863184452, 0.00083908572560176253, 0.0019146482227370143, 0.0024600238539278507, 0.0013426881050691009, 0.00088314904132857919, 0.0024667438119649887, 0.00052454363321885467, 0.00080599455395713449, 0.00057335925521329045, 0.0012584798969328403, 0.00078063044929876924, 0.00022690137848258018, 0.0051055960357189178, 0.0017463170224800706, 0.0024272394366562366, 0.0010923114605247974, 0.0010153056355193257, 0.00069463823456317186, 0.0012372822966426611, 0.0022265804000198841, 0.0023696711286902428, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -3546, -26122, 23045, 20475, 4613, 2046, 38256, 7815, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0015277557540684938, 0.00073737872298806906, 0.0013218006351962686, 0.001212570583447814, 0.0010532966116443276, 0.0012641350040212274, 0.00087100476957857609, 0.00071189989103004336, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -14,-4,11,-95,9,28,5,9,2,5,0,-5,103,0,-2,5,0,-6,-5,-3,82,-4,0,5,31,38,12,9,5,5,4,-127,12,8,-3,-1,-25,0,-16,34,8,-29,-8,4,1,-3,3,1, 
  /* [1][0][][] */ -39,-10,0,-11,46,24,-24,75,22,4,-30,-19,18,0,20,37,0,42,20,-47,5,21,127,21,-26,1,51,3,21,0,20,-7,13,-8,-8,-20,8,-50,14,4,-8,-10,-74,-6,-30,6,-51,-90, 
  /* [2][0][][] */ -59,15,3,8,45,-7,30,26,-9,55,8,-5,4,0,8,56,0,13,-127,22,2,13,6,-15,-31,7,39,8,9,29,24,4,5,-7,-10,-13,11,6,8,2,36,-12,-29,1,24,-56,25,16, 
  /* [3][0][][] */ 4,2,0,7,-5,24,2,-4,65,17,0,0,24,0,-31,-9,0,1,-9,2,-4,0,7,-15,-12,-4,-8,-2,-12,-5,0,-11,-45,40,-56,1,9,0,5,-127,0,3,2,-45,-4,-2,0,9, 
  /* [4][0][][] */ 0,-5,82,35,2,-18,-2,-5,4,-4,-5,-9,-80,0,-12,4,0,11,3,1,68,4,0,-5,-14,31,-10,45,-5,-1,2,102,4,5,-3,-4,15,-9,-12,-18,-1,-127,6,1,3,-4,0,1, 
  /* [5][0][][] */ -6,43,4,-10,2,50,26,10,-19,30,5,56,26,0,-127,-2,0,14,-40,21,-10,10,-17,41,-20,-1,28,-6,-16,26,24,-18,48,29,-40,-6,6,19,-48,17,27,-13,-11,29,22,59,25,23, 
  /* [6][0][][] */ -26,-56,0,9,41,-53,-18,7,25,-28,-10,83,-3,0,-127,39,0,-12,52,-17,-7,2,24,-32,27,-1,-4,-12,48,-14,-9,-3,94,-34,26,2,-4,-9,-66,-22,-14,-13,-1,-25,-18,-81,-17,-24, 
  /* [7][0][][] */ -116,-26,-14,5,127,12,70,29,12,1,34,-41,-25,0,89,107,0,11,3,64,-10,-1,-25,47,17,14,52,8,47,58,59,-6,-11,-20,-23,-27,6,20,36,36,70,1,-23,-9,64,5,59,86, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.064929619431495667, 0.031338594853878021, 0.056176524609327316, 0.051534246653318405, 0.044765103608369827, 0.053725738078355789, 0.037017703056335449, 0.030255744233727455, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 66089, 63899, 63252, 42471, 831, 13538, 3534, 28372, 20628, 23194, 30610, 2832, -45498, -127, 40396, 1342, -204, 29314, 2546, 1788, -14141, -11816, 41537, 33844, -20038, 39137, 41288, 22164, -2895, 14731, -7940, -51688, 12754, 89563, 25754, 1776, 59238, -251, 150456, -23577, 14743, -28648, 3547, 104723, -600, 72081, 956, -22199, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.0497429482638836e-05, 6.1270897276699543e-05, 0.00013958726776763797, 0.0001125454728025943, 0.00020301349286455661, 0.00018107707728631794, 0.00014780924539081752, 5.4180331062525511e-05, 0.00010802210454130545, 3.0725150281796232e-05, 8.2620732428040355e-05, 2.7390689865569584e-05, 0.00017358700279146433, 0.005541567225009203, 6.3740080804564059e-05, 0.00026916508795693517, 0.0027484172023832798, 1.6729107301216573e-05, 8.8236294686794281e-05, 0.00015875656390562654, 0.00010661622218322009, 0.00011296269076410681, 0.00014224571350496262, 3.6707653634948656e-05, 9.1416099166963249e-05, 7.0806716394145042e-05, 3.7127818359294906e-05, 4.0557897591497749e-05, 0.00028610590379685163, 6.2554587202612311e-05, 5.2791354391956702e-05, 0.00021115313575137407, 0.0001932557497639209, 9.4236183940665796e-06, 9.9777709692716599e-05, 0.00015551524120382965, 1.5559728126390837e-05, 0.00041364436037838459, 3.1315787055063993e-05, 8.2823178672697395e-05, 6.8153887696098536e-05, 0.0002193830005126074, 9.0240937424823642e-05, 8.6473128249053843e-06, 0.00017115306400228292, 8.1914709880948067e-05, 0.00020087107259314507, 9.4599148724228144e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-23,-7,-17,6,-39,-79,-68,-26,-51,9,63,34,-71,114,-43,-113,-85,37,-6,-1,-71,-111,-80,-34,-122,-64,-19,71,15,95,27,-127,-90,-7,55,19,48,-127,79,-77,-14,104,-109,-3,-34,-87,106, 75,11,-28,-28,57,-127,-127,-80,60,-76,-115,108,37,-82,-1,63,-52,-112,59,7,11,-112,-127,-71,-3,-127,-121,-39,-53,21,-57,54,30,-127,64,86,12,72,-92,127,-127,6,123,-127,1,-22,-127,93, -33,41,7,-4,-66,-109,-59,-17,87,-8,-127,38,7,-71,-101,-10,-127,-25,28,12,-15,-76,-36,-25,-11,-31,-59,-11,-9,17,-25,9,108,-86,69,32,13,36,-5,16,-79,4,6,-79,-17,7,-55,14, 
  /* [0][1][][] */ -85,-127,-44,-43,-11,55,98,-105,-26,-109,-21,111,89,-64,27,-98,-121,-93,91,-77,41,-88,-102,-127,42,-116,-78,-37,127,-60,127,84,-43,-84,-14,84,-36,-77,-107,90,42,59,105,-109,-92,-117,82,119, 127,-82,-127,-127,127,41,93,-127,101,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-120,127,-99,-127,-127,-119,-127,-71,127,29,-112,127,127,-69,-127,-95,90,61,127,127,-116,-114,-127,125,127, -53,29,-62,-84,-123,-23,31,-38,127,-21,-78,35,55,-70,-25,-44,-37,-31,56,-71,56,-81,-38,-25,47,-7,-46,-60,16,-90,-35,20,30,-97,117,22,-37,-62,2,-15,36,54,10,-74,-58,-37,65,36, 
  /* [0][2][][] */ -60,-106,-34,-33,-1,34,-5,-34,-38,-58,-18,58,76,-127,-127,-65,-43,-18,64,75,50,-33,-12,-59,32,-55,-10,-57,75,28,77,63,109,-25,-38,-10,-95,35,-17,30,10,38,15,-55,96,-77,3,31, 88,-73,-89,-85,81,19,6,-46,48,-70,-34,56,83,-26,15,92,-24,-31,77,118,80,-53,-18,-57,92,-69,-19,-98,-50,39,-46,112,-18,-47,66,5,-127,50,-14,-1,11,32,15,-66,127,-100,-12,40, -28,27,-43,-36,-82,-19,21,-11,59,-5,-13,32,30,-43,110,-30,-93,-5,32,60,72,-28,-2,-3,41,0,-4,-62,-14,28,-20,40,-91,-41,65,3,-20,21,28,-39,7,37,-6,-15,62,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038461405783891678, 0.0026040130760520697, 0.0059324586763978004, 0.00478318240493536, 0.0086280731484293938, 0.0076957754790782928, 0.0062818927690386772, 0.0023026640992611647, 0.0045909392647445202, 0.0013058189069852233, 0.0035113811027258635, 0.0011641043238341808, 0.0073774475604295731, 0.23551659286022186, 0.0027089533396065235, 0.011439516209065914, 0.1168077290058136, 0.00071098707849159837, 0.0037500425241887569, 0.0067471540533006191, 0.0045311893336474895, 0.0048009143210947514, 0.0060454430058598518, 0.001560075324960053, 0.0038851841818541288, 0.0030092853121459484, 0.0015779322711750865, 0.0017237105639651418, 0.012159500271081924, 0.0026585699524730444, 0.0022436324506998062, 0.0089740082621574402, 0.0082133691757917404, 0.00040050377720035613, 0.0042405524291098118, 0.0066093974746763706, 0.00066128844628110528, 0.017579885199666023, 0.0013309209607541561, 0.0035199851263314486, 0.0028965400997549295, 0.0093237776309251785, 0.0038352396804839373, 0.00036751077277585864, 0.0072740050964057446, 0.003481375053524971, 0.0085370205342769623, 0.0040204636752605438, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4480, 119, 11097, 6699, 7339, 7876, 9042, -30, -21, -376, 2575, 547, 14128, -90201416, 3263, 17473, -72815256, -120, -559, 10970, 4464, -21, -24, 535, 4095, -1066, 84, 649, 4850, 1862, 3073, 16929, 4216, 312, 282, -1898, 314, 4260, -165, 10900, 2487, 14444, -281, -87, 15077, 202, 8271, 4724, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0004657913523260504, 0.00050047721015289426, 0.00028648020816035569, 0.00027944022440351546, 0.00027199721080251038, 0.00026501680258661509, 0.00042000130633823574, 0.0013955887407064438, 0.00041240663267672062, 0.0020251092500984669, 0.00057208677753806114, 0.0015352373011410236, 0.00015501883171964437, 1.798016735499175e-09, 0.00080320087727159262, 0.00018847359751816839, 1.798016735499175e-09, 0.0060472991317510605, 0.00034757828689180315, 0.00035376439336687326, 0.00023397018958348781, 0.0041591329500079155, 0.00028723813011310995, 0.0012152106501162052, 0.00091637409059330821, 0.00053370511159300804, 0.0019624417182058096, 0.0019116925541311502, 0.00023269762459676713, 0.001580642769113183, 0.0009557770099490881, 0.00013991672312840819, 0.0001771032257238403, 0.010351921431720257, 0.00052391499048098922, 0.00061874906532466412, 0.004943047184497118, 0.00030103328754194081, 0.0022266947198659182, 0.00031985706300474703, 0.0011326180538162589, 0.00015637272736057639, 0.00054107257165014744, 0.0099026095122098923, 0.00033322849776595831, 0.0004201606207061559, 0.00033647922100499272, 0.00018560227181296796, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 12,-127,52,-45,28,-20,-47,20, 
  /* [1][0][][] */ 59,64,-27,-94,16,-8,-77,127, 
  /* [2][0][][] */ 33,2,-44,121,47,127,44,87, 
  /* [3][0][][] */ 80,76,-84,127,-100,-11,-3,15, 
  /* [4][0][][] */ -40,-90,61,18,12,33,-37,-127, 
  /* [5][0][][] */ 21,2,-35,40,1,-36,35,127, 
  /* [6][0][][] */ 65,-18,-127,-89,109,12,63,-33, 
  /* [7][0][][] */ 127,22,25,-25,37,-6,89,-66, 
  /* [8][0][][] */ 23,-103,17,106,0,25,-6,-127, 
  /* [9][0][][] */ 91,-127,8,-1,-1,14,-119,84, 
  /* [10][0][][] */ -127,-40,-119,25,-10,2,-101,52, 
  /* [11][0][][] */ -23,-39,-12,-111,-127,-32,50,-16, 
  /* [12][0][][] */ 15,4,-44,67,-79,-25,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-39,-6,11,45,127,44,47, 
  /* [15][0][][] */ 34,11,19,-127,66,36,-53,65, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,25,127,24,-23,-8,25,27, 
  /* [18][0][][] */ 82,-127,25,32,3,28,-115,4, 
  /* [19][0][][] */ -127,-7,34,85,-52,-62,-95,72, 
  /* [20][0][][] */ 34,27,-45,114,-28,-127,2,68, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -81,-13,-127,3,11,12,-103,0, 
  /* [23][0][][] */ -106,127,-15,-19,16,-9,122,-84, 
  /* [24][0][][] */ 7,-55,-49,79,-6,-58,92,127, 
  /* [25][0][][] */ 13,43,37,34,119,127,-65,-54, 
  /* [26][0][][] */ -91,-28,-127,-5,12,18,-101,-3, 
  /* [27][0][][] */ 2,-20,-30,13,-40,127,63,51, 
  /* [28][0][][] */ 3,-27,-30,38,17,127,61,73, 
  /* [29][0][][] */ 85,25,127,-3,-13,-11,69,-7, 
  /* [30][0][][] */ -87,127,-27,-32,7,-8,109,-45, 
  /* [31][0][][] */ -42,-90,-19,6,29,-64,127,107, 
  /* [32][0][][] */ 3,6,-53,127,-10,101,93,127, 
  /* [33][0][][] */ -4,65,-15,-108,12,-11,-5,127, 
  /* [34][0][][] */ -19,82,-3,-92,32,-5,16,127, 
  /* [35][0][][] */ 127,5,-35,-66,30,38,116,-59, 
  /* [36][0][][] */ -127,-12,19,56,-43,13,-105,83, 
  /* [37][0][][] */ -8,-32,-15,35,31,127,58,56, 
  /* [38][0][][] */ 11,18,6,79,127,-4,-22,34, 
  /* [39][0][][] */ 1,23,31,-115,29,-1,-38,127, 
  /* [40][0][][] */ 88,31,127,-7,-14,-11,98,-13, 
  /* [41][0][][] */ 4,-26,-26,82,47,127,67,95, 
  /* [42][0][][] */ -80,-2,127,27,-22,19,-28,57, 
  /* [43][0][][] */ -17,-55,8,101,-14,4,17,-127, 
  /* [44][0][][] */ 36,2,-68,-127,72,-18,-1,-111, 
  /* [45][0][][] */ -92,127,0,-50,8,-2,77,-58, 
  /* [46][0][][] */ -127,-24,51,30,-33,40,-89,46, 
  /* [47][0][][] */ 104,24,127,-7,31,-18,118,-22, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010199149837717414, 0.0010958645725622773, 0.00062728830380365252, 0.00061187328537926078, 0.00059557578060775995, 0.00058029120555147529, 0.00091965129831805825, 0.0030558358412235975, 0.00090302171884104609, 0.0044342586770653725, 0.0012526636710390449, 0.0033616158179938793, 0.00033943532616831362, 3.937008052901092e-09, 0.0017587201436981559, 0.00041268917266279459, 3.937008052901092e-09, 0.013241402804851532, 0.00076107104541733861, 0.00077461637556552887, 0.00051231030374765396, 0.0091070001944899559, 0.00062894786242395639, 0.0026608728803694248, 0.0020065286662429571, 0.0011686217039823532, 0.0042970394715666771, 0.004185916855931282, 0.00050952384481206536, 0.0034610372968018055, 0.0020928068552166224, 0.00030636714654974639, 0.00038779215537942946, 0.022666973993182182, 0.0011471848702058196, 0.0013548372080549598, 0.010823490098118782, 0.00065915432060137391, 0.0048756580799818039, 0.00070037157274782658, 0.0024800249375402927, 0.00034239984233863652, 0.001184753724373877, 0.021683141589164734, 0.00072965020081028342, 0.00092000019503757358, 0.00073676806641742587, 0.00040640201768837869, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -312, -42096, -7648, -13209, -31020, -1776, -24341, -27664, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022530951537191868, 0.0025492112617939711, 0.0025643592234700918, 0.0012042656308040023, 0.0012659613275900483, 0.0019144639372825623, 0.0015444128075614572, 0.0010443085338920355, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,7,3,119,0,-4,1,0,-127,-91,-3,0,117,-4,0, 
  /* [1][0][][] */ 0,-27,-5,86,75,13,20,9,1,-4,127,-42,0,30,-15,0, 
  /* [2][0][][] */ 0,-1,-4,-13,-60,4,13,2,0,2,-17,0,0,127,-7,0, 
  /* [3][0][][] */ 0,-8,-15,-127,82,21,66,16,0,64,-4,40,0,1,19,0, 
  /* [4][0][][] */ 0,48,-33,34,-57,32,127,12,0,-60,16,-12,0,-5,17,0, 
  /* [5][0][][] */ 0,-17,-14,-2,-22,-22,-12,16,0,10,-5,-45,0,-4,127,0, 
  /* [6][0][][] */ 0,16,3,5,47,-22,-30,-6,0,-110,113,65,0,127,59,0, 
  /* [7][0][][] */ 0,14,-8,127,6,-2,16,9,0,66,-54,74,0,-10,50,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.095756545662879944, 0.10834147781133652, 0.10898526757955551, 0.051181290298700333, 0.053803354501724243, 0.081364713609218597, 0.065637543797492981, 0.044383112341165543, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 23105, 49075, 11003, 11411, 3402, 14153, 539, -15803, 6402, 29374, 14171, -445, 25973, 12031, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00011411408922867849, 8.1898258940782398e-05, 0.00031671044416725636, 0.00015818624524399638, 0.00097340100910514593, 0.00036407524021342397, 0.0072238636203110218, 1.8358645320404321e-05, 0.00028337934054434299, 0.00020292314002290368, 0.00072803150396794081, 0.00072724185883998871, 0.00025347090559080243, 0.00017347297398373485, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,68,-95,77,-95,-27,4,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-42,-57,-15,-8,-25,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-25,33,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-7,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-28,-111, 21,-7,20,0,4,15,9,22,-115,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0048498488031327724, 0.0034806758631020784, 0.013460193760693073, 0.0067229154519736767, 0.041369542479515076, 0.015473197214305401, 0.30701419711112976, 0.00078024243703112006, 0.012043621391057968, 0.0086242333054542542, 0.03094133734703064, 0.030907778069376945, 0.010772513225674629, 0.0073726009577512741, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, -2489, -98224, 43745, 361216, 1343, 18786, -5450, -136570, 49834, 18106, 138000, -1073741824, 32411, 18255, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00041710055666044354, 0.00015293848991859704, 3.6244979128241539e-05, 9.8975278888246976e-06, 0.00016688980394974351, 0.00016363011673092842, 0.00023193552624434233, 3.2849227409315063e-06, 4.5709592086495832e-05, 0.00016101727669592947, 3.7688303564209491e-05, 1.1533876076441629e-09, 0.00012010898353764787, 0.00011947398161282763, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 60,7,44, 4,-15,27, -127,-113,-58, 
  /* [1][1][][] */ 12,5,10, -14,13,5, 9,-24,14, 
  /* [1][2][][] */ 6,29,10, 4,17,7, 47,-16,16, 
  /* [2][0][][] */ 25,-8,-5, 74,112,7, 40,-36,10, 
  /* [2][1][][] */ 5,8,0, 73,127,-19, 22,-2,-2, 
  /* [2][2][][] */ 44,-65,21, 77,-36,-11, 36,-47,20, 
  /* [3][0][][] */ 7,39,8, 26,93,17, -5,1,-9, 
  /* [3][1][][] */ 22,43,10, 62,127,21, -18,-23,-2, 
  /* [3][2][][] */ 6,8,5, 24,27,4, -4,-7,-2, 
  /* [4][0][][] */ 31,64,-13, 10,79,-6, -19,8,2, 
  /* [4][1][][] */ 39,88,50, 26,125,39, 26,54,-11, 
  /* [4][2][][] */ 47,83,40, 41,127,22, -24,26,23, 
  /* [5][0][][] */ 5,-3,-120, -6,-3,-103, -8,29,-23, 
  /* [5][1][][] */ 2,-43,-127, -4,-45,-114, -4,15,-17, 
  /* [5][2][][] */ -4,11,-13, -1,0,-2, -3,14,-6, 
  /* [6][0][][] */ 26,-63,35, 50,-86,42, 10,-19,10, 
  /* [6][1][][] */ 38,-96,63, 66,-127,74, 7,-28,17, 
  /* [6][2][][] */ 21,-35,14, 15,-44,27, -13,7,-1, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 121,127,110, 119,126,108, 119,124,106, 
  /* [8][1][][] */ 121,125,109, 118,123,106, 118,122,105, 
  /* [8][2][][] */ 119,123,108, 117,123,106, 118,122,105, 
  /* [9][0][][] */ -11,2,16, -11,-6,1, 5,4,-11, 
  /* [9][1][][] */ 105,122,-7, 74,127,13, -10,18,25, 
  /* [9][2][][] */ -32,-29,15, -6,-42,-7, 1,-6,-28, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -16,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,0,8, 
  /* [11][0][][] */ 6,-5,17, 26,-19,22, 24,-71,-29, 
  /* [11][1][][] */ -24,-21,0, -14,-39,-16, 3,-35,-30, 
  /* [11][2][][] */ 10,-18,-52, 119,127,72, -17,28,-24, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -9,-19,3, 1,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 44,-8,-38, 78,-27,-50, 33,-8,-19, 
  /* [14][1][][] */ 88,-18,-74, 127,-40,-88, 61,-17,-35, 
  /* [14][2][][] */ 56,-8,-43, 76,-20,-50, 28,-5,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.10636063665151596, 0.038999311625957489, 0.0092424694448709488, 0.0025238695088773966, 0.042556896805763245, 0.041725676506757736, 0.059143554419279099, 0.00083765527233481407, 0.011655945330858231, 0.041059404611587524, 0.0096105169504880905, 2.9411381774480105e-07, 0.030627788975834846, 0.030465863645076752, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.45669624209403992, } };
const TfArray<1, int> quant46_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.42647907137870789, } };
const TfArray<1, int> quant50_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45709002017974854, } };
const TfArray<1, int> quant53_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.55702865123748779, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.30749395489692688, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.2049952894449234, } };
const TfArray<1, int> quant61_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27721729874610901, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.19198617339134216, } };
const TfArray<1, int> quant65_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32078638672828674, } };
const TfArray<1, int> quant66_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.061610348522663116, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11652937531471252, } };
const TfArray<1, int> quant69_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
