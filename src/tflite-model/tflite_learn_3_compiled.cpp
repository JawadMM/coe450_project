/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 03.12.2024 14:38:38

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 21759, -32774, -28890, -30086, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.0002284743677591905, 0.00018505554180592299, 0.00020350147678982466, 0.0002059552789432928, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 65,-45,-65,-57,127,-37,0,-51,120,-44,64,87,-71,-37,60,-11,1,-77,-98,25,-11,40,-63,97,-2,28,-3,22,90,-48,37,7, 
  /* [1][0][][] */ 60,85,-89,-25,-46,45,127,43,-49,-66,-89,30,103,-54,69,-126,125,-112,21,-53,10,-84,-103,-25,-8,-109,68,-58,-65,-115,-21,-38, 
  /* [2][0][][] */ -22,99,22,85,-39,-11,85,40,-76,-117,87,-60,-86,80,-127,66,51,77,83,-64,-10,27,-21,-46,35,-55,83,-88,-34,18,71,58, 
  /* [3][0][][] */ 70,-73,80,14,-32,107,44,-4,-12,-106,23,97,70,-14,-127,-23,107,-101,107,1,-115,-17,-14,-40,96,-20,-93,86,-104,114,37,56, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0037556416355073452, 0.003041926771402359, 0.0033451395574957132, 0.003385474905371666, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -67, -138, -54, 120, 283, 44, -53, -125, 145, 484, -92, -70, 68, -194, 983, -19, -53, 200, -330, -280, -31, 295, -95, 1067, 278, 1128, -120, -321, 1281, -4, -347, -296, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3165833631064743e-05, 4.7343572077807039e-05, 4.3274336348986253e-05, 4.4720345613313839e-05, 4.1578216041671112e-05, 4.5393659092951566e-05, 4.1912539018085226e-05, 4.3579973862506449e-05, 4.5039712858851999e-05, 5.3201711125439033e-05, 4.3072835978819057e-05, 3.8888003473402932e-05, 5.0405658839736134e-05, 4.1695398977026343e-05, 4.9837050028145313e-05, 4.7795616410439834e-05, 4.2505555029492825e-05, 4.8385456466348842e-05, 4.1785919165704399e-05, 4.3491214455571026e-05, 4.6211207518354058e-05, 4.4542593968799338e-05, 4.7906920372042805e-05, 5.2557570597855374e-05, 4.6202552766771987e-05, 5.2701216191053391e-05, 4.0593862649984658e-05, 4.0860701119527221e-05, 5.1034505304414779e-05, 4.5206063077785075e-05, 4.264673771103844e-05, 4.4234340748516843e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -42,-63,103,12,86,-32,-88,-103,62,-107,-108,-9,40,7,-38,51,-64,-35,-78,-59,-77,-104,-4,106,-126,7,75,-50,104,-17,-29,-82,72,-65,-97,47,-127,-86,-94,30,70,-89,-97,86,51,-113,99,-21,7,-70,-50,86,-82,-55,-101,103,15,51,98,-111,-81,61,-61,40,-22,14,69,96,49,97,66,-122,88,-98,25,82,-107,4,-60,27,53,14,85,-7,-61,-46,-89,103,23,112,-8,-125,11,64,22,21, 
  /* [1][0][][] */ -37,34,-75,1,-45,64,30,10,73,-96,-96,94,82,-16,17,52,97,-44,23,83,-31,-8,29,22,10,22,-49,91,2,-15,91,-81,63,95,-18,31,33,59,-10,-56,-56,1,-18,-85,-42,39,-24,-53,-19,-98,127,38,-4,76,-90,-41,14,106,57,74,-36,92,-55,-89,-61,30,67,46,88,30,28,14,-96,80,-46,40,62,-50,-40,63,-79,88,-32,-106,23,110,-55,-61,81,78,91,-10,93,72,36,4, 
  /* [2][0][][] */ 32,48,-67,79,-50,-55,79,93,-111,96,-46,115,95,-24,81,-127,-50,-20,35,79,-95,-24,112,18,-39,67,102,4,-58,100,86,116,-72,-24,-102,-92,-77,99,103,-39,-112,-73,12,2,-79,118,-22,-73,98,55,80,-74,-29,60,41,20,-56,84,-60,-14,-30,77,-29,81,100,47,38,72,-82,66,26,-73,31,-83,47,21,-41,-22,-3,-2,45,-116,-12,-41,1,-99,-34,-30,93,116,-40,48,-64,-74,-44,-68, 
  /* [3][0][][] */ 85,10,31,-30,-119,53,-109,47,47,30,65,14,119,104,73,-1,111,101,-56,12,127,-83,-56,-105,-48,-103,-82,101,51,-90,95,8,-41,-28,-33,-2,-86,-14,45,47,-16,-83,-83,11,70,39,-37,-76,74,-80,57,5,98,34,94,-86,-105,-91,-108,-56,-80,37,-27,67,58,-25,-57,-33,-38,-53,25,107,32,-121,62,-43,32,98,95,-60,-79,-113,55,97,35,53,-30,-106,-64,56,-13,-112,103,-80,-70,54, 
  /* [4][0][][] */ 52,118,10,56,33,49,35,21,66,107,-4,71,49,-38,-5,-54,-13,1,-23,8,105,-88,103,32,29,-9,67,-55,-51,29,-65,-46,71,125,20,-84,-14,-3,-111,49,-48,-62,-71,-84,43,108,39,64,28,-48,-35,-69,-63,56,-74,13,80,-96,44,25,-2,-58,-44,-56,-32,60,7,-41,32,-97,-83,-92,-56,23,126,64,58,-1,-5,-42,8,-51,-110,-23,6,74,96,1,-127,-76,44,65,22,116,-106,-13, 
  /* [5][0][][] */ 80,-84,74,71,4,-116,26,55,97,-107,-4,-67,-4,91,37,21,59,60,-77,109,29,48,14,-25,-127,-57,-14,-85,52,39,17,-85,-30,1,-71,16,-110,-31,48,22,-81,-49,41,91,-22,24,33,-45,-100,108,2,33,38,11,42,-12,96,24,-68,-45,29,-56,37,-59,-27,97,-27,26,87,6,81,-67,-53,91,-20,-70,14,-49,12,56,107,31,25,104,-75,76,-13,39,67,-91,114,105,-19,28,73,-71, 
  /* [6][0][][] */ 31,-38,113,83,-112,-73,0,74,-11,-79,10,-86,99,65,121,-127,46,3,-6,101,-67,-119,112,63,-84,-74,-10,-58,-22,-118,54,-82,-77,-119,-49,-98,-15,48,-102,89,95,61,31,-10,-111,116,-83,-42,-78,15,-16,-67,57,-54,99,-15,2,3,-77,115,-83,-1,76,-80,-50,73,104,-40,91,4,-102,5,63,-57,-87,-41,-81,-106,-54,-35,40,-20,59,-21,-68,-82,-33,-90,97,105,106,4,-38,-63,90,-16, 
  /* [7][0][][] */ 127,73,-47,-41,-98,97,-23,1,113,5,-97,12,75,-81,43,62,51,12,-13,89,63,31,-9,83,-96,107,31,49,-79,84,-18,16,35,24,54,106,-115,89,-7,-25,96,-78,88,70,46,2,105,-112,56,-74,-95,-78,-38,84,9,37,102,-76,-4,-60,20,-18,85,-126,-72,-55,63,30,-101,27,72,90,87,30,60,55,-71,47,-100,37,89,-28,-5,-73,85,36,-102,94,88,10,92,32,-40,-51,7,-53, 
  /* [8][0][][] */ 1,27,-28,-83,93,35,-66,-22,14,36,44,99,-21,-48,-77,-53,-66,93,-41,30,19,-19,82,108,-80,82,53,84,-65,29,-89,127,79,-31,61,-8,124,-2,-16,66,74,100,-109,-115,-5,-33,-27,106,17,-82,-77,3,-42,-8,-29,-113,55,91,-79,107,94,51,29,112,-30,-43,-15,89,-96,43,23,-9,68,63,4,27,-41,109,82,80,35,74,-121,-82,26,36,67,-41,25,-42,-83,110,-89,-88,-56,45, 
  /* [9][0][][] */ 6,16,102,54,86,-63,-28,-92,47,55,9,44,-26,-56,-74,6,12,13,-69,-64,5,92,-74,-74,127,-6,-2,26,-12,-61,-72,85,66,25,35,-3,-42,18,-30,-27,46,-49,48,-70,73,20,-75,49,64,-17,-55,-42,68,-23,-61,79,115,-35,2,19,-71,79,74,-60,-52,14,97,48,-36,85,101,-74,14,69,-93,-65,-60,-77,-21,120,33,30,80,26,-26,-71,43,-3,80,32,-14,82,93,2,53,-25, 
  /* [10][0][][] */ -65,88,80,-77,-52,111,98,29,29,39,15,-62,118,83,-37,-3,-31,80,-99,-54,-11,19,56,-71,10,42,-127,-120,-42,85,-89,-79,91,94,104,80,-40,9,-33,24,-33,116,-112,-32,-101,-55,-1,-60,0,6,43,17,65,11,-55,-30,-95,-14,31,-60,1,85,112,38,110,-77,-108,-33,7,-24,-82,-64,90,44,-77,101,-26,62,58,11,77,-9,66,99,-102,70,95,-27,43,13,-18,-75,-53,-39,-40,-69, 
  /* [11][0][][] */ 127,3,-18,118,116,44,62,30,125,89,-84,120,-18,-90,30,-71,-67,-115,60,35,30,84,22,-121,-127,-114,-24,75,84,-30,19,-31,-94,-79,62,38,-77,81,-36,-63,-32,111,-87,-2,-48,-74,-104,-99,82,114,117,44,-111,-101,12,24,-67,-64,-40,-94,-86,88,90,3,15,93,-61,36,97,59,-99,-79,32,112,-119,54,-80,32,-49,96,-120,-25,-85,-60,48,-88,10,-33,-108,-12,14,-120,-90,-34,-89,-45, 
  /* [12][0][][] */ 8,54,-40,4,61,-1,-25,31,-61,41,-10,8,-66,11,47,-66,-85,-25,-47,-49,18,-4,12,85,-61,-31,91,-79,89,22,-34,104,-76,-59,-35,7,-7,-63,-11,44,101,35,-90,-39,-6,-70,-35,106,-39,-88,-79,87,30,-2,-67,82,-26,-65,31,61,50,98,1,54,97,31,-35,108,77,95,12,63,62,127,-19,-3,-22,26,-95,-87,-43,94,32,16,-28,28,45,101,-81,-93,93,53,93,-13,23,77, 
  /* [13][0][][] */ 117,-52,92,90,52,123,74,67,65,-97,5,-26,127,75,60,-59,-113,-77,-79,9,81,-38,124,-53,-85,30,-9,9,-95,-96,91,30,51,104,-37,51,-83,-28,25,62,-66,79,-58,23,-58,34,1,-35,41,93,-24,-106,-100,27,110,-84,-41,42,-15,-85,-23,124,-77,0,-67,-67,-105,80,-63,-19,126,1,-84,11,-67,-47,-118,70,76,-69,49,-106,114,18,-88,-103,97,120,-1,-49,-91,36,115,-50,77,-13, 
  /* [14][0][][] */ -47,-72,114,72,127,-10,10,-76,-59,-6,85,94,-17,-57,-57,-45,-27,-44,20,15,-34,60,23,77,-56,-39,-15,57,-86,-95,-62,23,88,-7,26,24,113,105,47,-90,1,-65,58,93,68,-94,55,-51,102,54,78,49,105,-6,-8,15,-28,11,78,108,-11,-42,-21,67,-69,-3,97,-98,-85,-58,-62,110,20,71,58,-28,57,-64,72,100,41,30,-102,-35,-87,-70,-72,93,98,7,84,-52,85,106,-28,74, 
  /* [15][0][][] */ 14,-11,-28,63,80,-68,53,-82,52,12,-65,19,127,6,-82,-104,92,12,-64,29,55,16,71,99,67,57,34,83,28,68,69,-80,12,9,-61,9,-48,108,100,-64,20,103,-38,-7,18,-62,-32,-70,-3,-49,10,41,-66,-87,-29,-6,69,64,-24,96,-37,-41,4,96,-28,92,-66,-2,-56,10,83,-63,30,-28,65,-95,4,56,93,73,-70,47,-82,-54,-106,-29,-78,38,87,73,-106,-25,47,113,-83,106, 
  /* [16][0][][] */ -64,4,102,-59,7,102,-53,45,51,50,-108,74,-18,-44,-50,-71,110,80,65,76,120,80,-42,55,-64,62,-69,65,-95,21,44,16,-96,78,53,64,-41,59,-43,-65,27,-46,78,93,69,108,106,-9,-54,-106,6,112,-43,113,73,57,18,90,54,9,127,110,38,60,56,18,-37,100,58,108,-36,-5,30,108,66,87,-8,95,-108,-27,20,-81,69,15,14,104,105,15,86,19,-7,118,81,-26,-74,35, 
  /* [17][0][][] */ 41,-88,30,69,-7,-92,-60,-81,33,-70,77,54,120,63,-101,38,40,53,94,94,-70,-10,24,-42,3,59,-71,31,96,-49,-20,65,-13,-14,20,19,-34,96,-77,-30,-81,-29,-8,2,-1,19,81,-97,85,96,6,25,-7,76,93,-63,-95,97,-53,-99,38,-69,74,91,-77,-64,40,-97,-119,3,125,37,25,-127,-44,68,103,-33,38,-49,9,-10,-53,-82,-98,73,80,-30,30,76,-90,-114,-5,86,16,20, 
  /* [18][0][][] */ -101,95,101,-76,-16,-112,-111,-1,-11,68,-115,-54,-42,29,55,-67,15,-30,55,-28,99,-54,14,-87,20,-104,-23,105,26,31,-5,40,40,-34,-111,-115,-42,30,-39,60,-46,-8,-56,-16,-122,10,21,-9,11,-27,68,27,-117,-13,-2,84,-48,31,-21,-127,82,103,9,32,-74,-127,-39,87,70,-83,-79,106,-105,-44,-95,-114,51,48,-8,-84,-63,-13,-33,-73,98,-40,66,65,-115,-81,-65,104,85,-59,45,-21, 
  /* [19][0][][] */ 16,26,74,36,73,-81,91,86,90,-62,25,-12,-93,29,-57,58,68,-102,127,62,-25,76,-56,9,100,-82,28,-60,-92,-117,-66,43,80,-83,33,-3,9,-71,-60,-102,40,-116,-84,6,-87,25,72,-94,-28,37,-44,40,-27,13,3,-13,24,93,9,-29,50,-57,94,60,-69,-6,-28,-4,-13,51,72,-52,-64,-119,-56,-80,-26,-111,12,105,54,-115,-34,73,-88,-11,5,-8,84,26,-6,69,-36,111,64,-48, 
  /* [20][0][][] */ 12,68,66,113,-47,86,20,56,27,9,-73,1,12,84,36,-42,-47,-33,-47,-41,23,-37,-66,-65,103,-64,-96,44,16,5,-37,99,90,49,-9,55,38,-29,-15,-92,-77,-32,-77,-93,-29,-56,-61,96,57,-120,-77,33,43,116,41,-5,86,95,99,98,110,-60,-60,-34,-24,-60,-42,34,-80,-64,-53,74,-48,-81,24,23,100,75,104,127,76,29,79,-19,55,109,3,69,18,89,39,50,31,20,-2,17, 
  /* [21][0][][] */ 83,82,70,-105,116,-59,69,14,-6,-47,-73,43,30,38,-49,-88,-86,-18,37,5,109,-47,82,-77,60,-95,-27,74,20,24,8,6,15,24,-90,-99,127,96,-122,-39,-4,13,27,-4,-100,-78,-74,92,-13,-59,-3,105,48,68,-74,22,-17,59,-37,114,46,-56,10,6,76,31,-34,-77,-112,-3,86,80,42,-49,79,69,-98,-10,59,105,16,84,38,-72,28,-91,62,-84,-94,81,94,-83,-54,-34,64,-28, 
  /* [22][0][][] */ 37,-51,-70,-70,97,-27,97,46,-77,74,-69,-105,100,-104,-105,-51,33,78,-104,-41,76,-68,28,24,127,-6,-83,84,-60,-55,-61,-95,42,59,61,10,-1,-15,-64,-84,0,-15,1,82,49,-107,82,-24,-58,-45,3,-21,-67,-69,-47,26,-11,-25,-3,-20,94,-76,-67,-99,-58,14,-103,-22,119,95,-25,-6,-64,33,57,-84,42,-48,55,96,93,-91,-72,-108,69,75,87,-32,-54,28,-16,72,16,24,-29,99, 
  /* [23][0][][] */ 46,-63,35,68,123,-79,28,-70,69,-44,95,75,-6,-76,39,-5,87,-12,-73,73,67,-42,108,-4,22,-2,92,40,68,40,65,-18,-37,50,46,33,110,0,-79,20,-74,20,15,-74,-35,-70,98,41,73,-84,-85,-29,81,-40,-36,69,-48,-25,101,59,-105,-54,-47,0,34,47,-71,-79,43,-11,91,-53,4,-24,-19,-52,51,10,100,127,-31,-26,-3,-77,95,18,104,-7,-80,39,100,-24,80,-35,-44,63, 
  /* [24][0][][] */ -84,-27,-93,-80,-113,-119,-65,-80,55,127,79,40,98,60,-29,-117,-69,50,13,-36,91,-73,-44,-31,24,-31,71,51,99,51,13,-33,-29,19,17,44,-39,-68,62,-26,-57,-85,106,15,36,-27,51,75,-88,-47,-43,22,63,61,80,-63,-1,71,4,-1,76,7,35,97,-93,99,-44,-100,-95,60,-48,-30,-36,44,105,97,57,-61,-96,-90,-62,-103,-63,-102,10,65,-12,-85,28,-92,-8,-46,-30,35,-88,39, 
  /* [25][0][][] */ -64,-30,-37,10,104,-23,-61,60,56,-61,-7,35,59,11,-68,9,-39,73,42,-69,61,92,19,-24,49,-36,-57,51,75,-45,51,127,86,-65,61,71,118,-35,-7,1,-52,102,-75,25,98,46,68,48,-62,92,-54,37,53,5,-26,13,14,48,-62,82,96,54,55,66,21,81,9,4,-78,1,-2,-82,49,-96,82,43,84,94,35,54,60,49,-41,86,-41,-20,-72,-58,-11,-17,93,52,-97,13,-14,-66, 
  /* [26][0][][] */ 78,-115,-31,-3,-90,-10,-12,-9,-109,-123,116,93,-52,-37,9,-18,122,29,-90,-94,30,77,108,16,38,79,5,44,8,-13,-93,-22,-18,-61,-109,-98,-77,95,-50,124,-101,108,68,40,-83,86,-36,107,-16,14,19,93,-5,-48,-17,-105,93,89,64,33,22,-109,76,-36,116,-19,-58,75,-98,92,109,113,96,-104,-87,12,36,-116,-101,13,-33,96,107,-77,85,8,-33,17,-75,127,23,-19,-35,114,67,103, 
  /* [27][0][][] */ 7,4,-72,-112,-125,-67,-78,-22,40,100,34,-116,-31,54,80,-35,63,-22,69,-82,-103,6,-35,-30,-112,41,-119,-9,61,35,-39,-8,60,67,-94,-96,-98,-73,-121,87,-104,14,23,13,98,20,66,103,90,65,57,-78,-99,-94,-10,-41,106,-30,-122,-87,-65,-69,-43,54,42,-53,-123,104,44,3,-127,4,59,-61,-14,-97,46,-74,87,103,84,-33,115,-63,-83,-92,-40,28,-56,-9,-46,-45,53,21,85,51, 
  /* [28][0][][] */ 92,11,105,69,-40,4,-50,-52,0,-65,84,80,-77,-55,25,127,98,116,-50,45,-21,51,-58,-33,-48,77,-41,-29,-58,-80,14,-6,-76,35,102,71,61,-78,-26,44,103,64,-68,64,-75,2,27,59,42,-58,-74,-4,-62,34,50,28,99,0,101,77,-9,-20,-83,13,54,82,15,82,-84,26,-60,-20,83,23,4,-52,-89,-14,-43,77,-49,-60,76,-10,75,-74,78,-54,-88,-49,-23,-71,-33,52,-97,-61, 
  /* [29][0][][] */ 39,60,53,-59,-110,20,-114,10,85,0,-91,-79,100,-105,-40,-58,-85,106,28,-36,-67,-38,55,9,-51,-3,-35,-25,-85,17,108,22,45,-1,-79,-40,0,105,-4,81,53,108,-41,88,8,105,-47,-17,17,13,45,-73,89,-94,127,52,-74,40,-46,85,-119,104,-81,-30,-48,-53,43,72,92,-79,47,-65,102,66,71,20,123,-54,-32,20,7,-99,-6,-68,65,112,27,82,-27,100,52,117,-113,28,3,55, 
  /* [30][0][][] */ 19,-74,-70,29,-99,25,-72,-22,107,-19,-10,-51,-101,9,51,4,-12,36,84,-102,33,-109,-121,5,-115,24,-70,110,-19,-109,-99,1,-84,-74,-116,-62,8,-19,-14,17,82,-77,-20,89,97,-54,99,53,-74,75,17,-105,86,-55,-12,102,-89,-56,-82,-63,-113,-5,-74,-28,-109,-96,-102,85,-62,104,47,-33,-90,100,38,-94,-59,-80,-84,-67,22,21,-114,-30,-115,21,-118,99,-46,-127,72,53,-40,-4,-2,-69, 
  /* [31][0][][] */ 78,-90,34,84,33,56,-62,-99,-38,-25,-81,-84,93,-115,-47,98,-63,-87,25,56,70,30,-36,101,30,-111,36,37,-69,-65,44,111,10,16,-100,-6,89,-29,-68,-110,59,-66,-26,29,7,-49,-39,22,66,28,96,-30,-117,-60,-72,32,-122,54,-5,102,-34,-9,88,-81,57,110,-49,-88,70,-115,-127,16,-107,-40,-6,3,-52,-52,46,84,-71,-53,62,72,54,94,-102,21,24,-48,-79,-49,16,102,0,-32, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018345479620620608, 0.0020121017005294561, 0.0018391592893749475, 0.001900614588521421, 0.0017670741071924567, 0.001929230522364378, 0.0017812829464673996, 0.0018521487945690751, 0.0019141876837238669, 0.0022610726300626993, 0.0018305954290553927, 0.0016527400584891438, 0.0021422405261546373, 0.0017720544710755348, 0.0021180745679885149, 0.0020313137210905552, 0.0018064860487356782, 0.0020563818980008364, 0.0017759015318006277, 0.0018483765888959169, 0.0019639763049781322, 0.0018930602818727493, 0.0020360441412776709, 0.002233696635812521, 0.0019636084325611591, 0.0022398016881197691, 0.0017252390971407294, 0.0017365798121318221, 0.0021689664572477341, 0.0019212575862184167, 0.0018124863272532821, 0.0018799594836309552, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2354, 4446, 10344, 3518, -4481, -5271, 24332, 3117, 4181, -2099, 12403, -279, -10172, 2597, 16779, 8219, 14946, 6347, -5611, -7958, 5835, 34878, 21504, 22918, 1768, 1478, 5126, 3922, 2853, -5237, 6240, -2846, -398, 6405, 251, 1456, 10500, 5608, -2330, 6202, 12305, 7156, 6140, 13746, 4885, 6526, 2444, 11439, 5586, -5539, -8113, 556, -325, -1630, 3090, 0, 225, -1169, -5852, 13591, -1100, 1637, -1473, -2402, -4887, 10482, 32627, 2583, -3021, 1047, 2048, 2411, 2012, -1314, 930, 13677, -542, 18837, 22958, -1031, 10793, 2288, -586, 1475, 22551, 9302, 5936, 1738, 6729, 4788, -414, -8014, 914, -2030, -2133, -2372, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00027002833667211235, 0.00035098360967822373, 0.00023190210049506277, 0.00025539129273965955, 0.00022252305643633008, 0.00028626990388147533, 0.00013578700600191951, 0.0002274142752867192, 0.00014522952551487833, 0.00030998970032669604, 0.00016138938372023404, 0.00018155066936742514, 0.00024714224855415523, 0.0010630679316818714, 0.00018358978559263051, 0.00014113022189121693, 0.00012505394988693297, 0.00023025734117254615, 0.00035070523153990507, 0.00021391094196587801, 0.00010905388626269996, 7.7936929301358759e-05, 0.00014273346459958702, 7.3131413955707103e-05, 0.00012675762991420925, 0.0003198552003595978, 0.00058205821551382542, 0.0002723789366427809, 0.00018117456056643277, 0.00036966108018532395, 0.00023581890854984522, 0.00026454281760379672, 0.00016608623263891786, 0.00017826454131864011, 0.00024938501883298159, 0.00017944219871424139, 0.00018316306523047388, 0.00019200319366063923, 0.00026751172845251858, 0.00028664048295468092, 0.0001043412703438662, 0.00036333466414362192, 0.00024365453282371163, 0.00016882475756574422, 0.00039445588481612504, 0.00015444187738467008, 0.0002093235234497115, 0.00018986217037308961, 0.00024301069788634777, 0.00023437650816049427, 0.00019121762306895107, 0.00013779602886643261, 0.00041578401578590274, 0.00018349546007812023, 0.00025162054225802422, 0.00031909829704090953, 0.00031257391674444079, 0.00022260037076193839, 0.00026475428603589535, 0.00013842350745107979, 0.00068696169182658195, 0.00039619457675144076, 0.00018227180407848209, 0.00030982214957475662, 0.0003845209430437535, 0.00018382021517027169, 6.6558517573866993e-05, 0.00015441088180523366, 0.00037569290725514293, 0.00031033522100187838, 0.00021038473641965538, 0.00021364643180277199, 0.00067880790447816253, 0.00029521767282858491, 0.00020813026640098542, 0.00015760000678710639, 0.00024559843586757779, 0.00010024724178947508, 7.9644589277449995e-05, 0.00015784031711518764, 0.00013424541975837201, 0.00015139483730308712, 0.00013204732385929674, 0.00016994097677525133, 8.0524478107690811e-05, 0.00025570715661160648, 0.00039758312050253153, 0.00016237220552284271, 0.00010412897972855717, 0.00042313724406994879, 0.00019508578407112509, 0.00024340407981071621, 0.00024254214076790959, 0.00051753252046182752, 0.00029403410735540092, 0.00016296385729219764, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -27,89,-2,-127,-54,-35,-25,-65,-27,30,-5,100,32,-66,-20,44, 
  /* [1][0][][] */ -44,20,-56,3,-23,-18,14,-91,58,64,-53,10,-2,5,43,-127, 
  /* [2][0][][] */ 11,2,-41,39,50,13,-56,-70,127,-21,-14,14,-6,96,-79,10, 
  /* [3][0][][] */ 59,-61,-11,-125,2,-44,-5,-5,127,-19,71,44,-1,38,33,101, 
  /* [4][0][][] */ -73,67,-41,36,-6,-33,-1,43,-41,20,-5,-63,-127,-32,-34,45, 
  /* [5][0][][] */ 2,56,113,6,15,79,-63,88,-54,85,-27,-27,47,-46,-127,34, 
  /* [6][0][][] */ 48,-60,123,-127,48,-7,-33,110,-91,-105,44,-25,17,95,-26,77, 
  /* [7][0][][] */ 52,127,-30,-60,112,4,-7,-71,122,93,-47,9,45,-31,72,37, 
  /* [8][0][][] */ 20,-97,9,-87,26,-58,21,-77,18,75,67,-11,23,127,73,59, 
  /* [9][0][][] */ 5,-20,-1,127,49,-5,30,-65,-64,97,36,-29,-10,-61,-7,-7, 
  /* [10][0][][] */ -21,17,-60,-127,-5,13,-5,57,51,-38,34,-16,-37,-48,-19,41, 
  /* [11][0][][] */ 4,16,14,-28,74,-39,96,-57,-78,27,2,37,0,127,-66,-31, 
  /* [12][0][][] */ 93,-14,-127,4,21,-68,43,7,2,60,-102,-29,-4,103,-3,7, 
  /* [13][0][][] */ -18,9,-25,20,3,-127,0,17,4,-9,3,0,13,-10,16,6, 
  /* [14][0][][] */ 38,-19,102,-43,62,-10,-127,-109,-25,-69,14,20,22,-74,0,-38, 
  /* [15][0][][] */ -92,7,-39,-52,-23,-1,127,42,-15,22,83,-16,2,73,46,9, 
  /* [16][0][][] */ 32,64,127,88,-16,-6,119,74,-98,-6,-94,16,32,4,21,-91, 
  /* [17][0][][] */ -35,-108,-16,29,-61,-21,-59,7,-127,-16,10,-50,0,36,52,-40, 
  /* [18][0][][] */ 4,48,8,65,55,14,18,-3,67,43,-33,-40,18,127,55,25, 
  /* [19][0][][] */ 11,-43,41,19,122,23,-90,-92,-77,-83,-42,-127,-42,-47,21,-66, 
  /* [20][0][][] */ 91,-36,-44,-46,6,-127,25,17,-30,20,-99,-3,42,11,46,-14, 
  /* [21][0][][] */ 50,-24,66,-15,-11,2,-25,99,23,-127,82,36,-17,96,32,87, 
  /* [22][0][][] */ -5,43,-43,127,-38,-5,91,53,-23,53,-28,32,11,3,13,-11, 
  /* [23][0][][] */ 69,11,127,-99,74,-20,-28,41,26,-5,15,-32,-10,-7,-104,36, 
  /* [24][0][][] */ -127,47,0,-31,-4,106,34,-29,0,20,123,-9,-81,25,59,-31, 
  /* [25][0][][] */ 29,21,9,25,13,9,75,-55,-9,-127,-19,-19,-11,-35,2,18, 
  /* [26][0][][] */ -49,-2,7,10,-39,0,-51,-34,-100,-38,13,-45,-1,127,-34,54, 
  /* [27][0][][] */ -1,24,0,65,29,-31,-8,-26,60,7,-27,6,12,127,-9,13, 
  /* [28][0][][] */ 7,75,64,57,127,-7,25,43,-79,-33,-40,-29,9,96,49,-28, 
  /* [29][0][][] */ 9,2,3,6,36,6,-14,15,-33,-2,-22,-127,5,-7,0,-4, 
  /* [30][0][][] */ -12,80,-48,71,-31,-21,45,-127,-52,72,-25,-8,67,33,72,79, 
  /* [31][0][][] */ -42,-3,-18,-68,-16,3,-60,-105,16,66,-6,-127,-39,-42,14,21, 
  /* [32][0][][] */ -127,-78,-3,64,44,42,-12,14,8,-35,-90,50,64,3,50,64, 
  /* [33][0][][] */ -4,-49,-52,-6,-105,-16,-71,3,57,27,5,-42,43,-127,116,24, 
  /* [34][0][][] */ 50,-16,57,32,50,22,-53,75,-83,-56,70,19,8,-8,-27,127, 
  /* [35][0][][] */ -55,51,-93,7,-28,-29,47,-118,110,98,-72,15,7,-4,90,-127, 
  /* [36][0][][] */ -57,43,19,127,33,48,111,44,4,24,1,9,-44,40,-81,-28, 
  /* [37][0][][] */ 22,-4,5,-68,3,-20,-23,-42,-92,5,-16,8,19,-127,51,-46, 
  /* [38][0][][] */ 37,94,-10,-39,127,7,17,-40,92,74,-21,-13,6,-29,40,14, 
  /* [39][0][][] */ -26,70,-3,-127,-3,6,-49,23,39,-65,-30,-24,15,69,37,27, 
  /* [40][0][][] */ -17,-29,51,-121,16,-10,-32,-64,-126,-22,17,-44,-32,-125,127,-68, 
  /* [41][0][][] */ -7,-21,-51,-16,6,-32,26,-12,-40,27,-54,-11,-127,8,14,33, 
  /* [42][0][][] */ 127,84,-27,-24,-70,-58,-15,-50,7,10,72,-43,-51,45,99,-105, 
  /* [43][0][][] */ 3,106,-65,-2,84,-23,91,-56,32,91,-63,-14,36,-127,-79,-55, 
  /* [44][0][][] */ -32,-7,19,-45,73,13,-111,-127,-8,-17,20,-5,-6,-33,71,-65, 
  /* [45][0][][] */ 5,52,-127,-33,37,-96,22,-80,-11,43,-19,-83,54,-35,49,-34, 
  /* [46][0][][] */ 6,2,-15,-88,-7,20,13,-39,-123,-26,14,14,-21,-127,69,-31, 
  /* [47][0][][] */ 14,48,27,-16,127,-9,-30,18,-46,32,6,23,-1,5,114,-23, 
  /* [48][0][][] */ -127,-84,-34,39,51,21,15,-12,0,-8,-102,47,56,9,66,44, 
  /* [49][0][][] */ 19,11,59,69,108,5,28,17,-127,-22,-53,-82,14,89,2,-37, 
  /* [50][0][][] */ 50,-16,-98,-10,32,-127,-29,-8,-28,-6,-23,-30,56,-23,-11,4, 
  /* [51][0][][] */ 2,35,47,14,20,4,11,33,-116,52,17,-112,13,-127,-25,95, 
  /* [52][0][][] */ 9,63,6,51,52,-4,8,28,64,80,-32,-59,39,127,66,15, 
  /* [53][0][][] */ 2,-43,-26,-21,-97,-17,-72,-2,42,13,7,-56,36,-127,112,11, 
  /* [54][0][][] */ 74,-29,-58,8,127,87,-118,-42,-105,26,-54,-69,17,-54,-7,-53, 
  /* [55][0][][] */ 33,-8,13,5,45,-26,-78,-127,-28,-75,-48,0,-16,-23,20,0, 
  /* [56][0][][] */ -26,8,26,-17,-9,-17,-92,73,-2,127,4,-7,22,8,0,10, 
  /* [57][0][][] */ 15,16,-57,-16,-52,-59,127,83,-41,39,-28,1,40,17,102,-12, 
  /* [58][0][][] */ 35,21,-127,39,85,108,-39,72,-100,-48,11,24,-53,23,-7,-8, 
  /* [59][0][][] */ -104,75,111,18,-78,-63,127,125,33,-2,39,-22,13,13,77,1, 
  /* [60][0][][] */ -3,-7,-44,-6,21,-127,-29,-7,-2,-25,9,-22,15,-9,11,11, 
  /* [61][0][][] */ 27,-6,25,127,94,20,22,-6,-115,7,10,32,-5,21,50,-70, 
  /* [62][0][][] */ -41,127,17,-55,-34,-22,-65,52,-20,-75,-96,-46,3,-98,-47,-50, 
  /* [63][0][][] */ -37,28,-25,127,-66,16,-73,-44,-61,-17,-21,-57,20,63,31,31, 
  /* [64][0][][] */ 7,0,9,43,11,14,-23,56,23,-4,-17,-48,-15,-127,47,9, 
  /* [65][0][][] */ -16,-33,21,-127,51,-28,49,-43,-7,39,12,-114,-16,6,23,-45, 
  /* [66][0][][] */ 43,-17,66,-37,-20,-6,-8,127,24,-110,47,46,6,125,40,86, 
  /* [67][0][][] */ -2,60,-11,-127,-2,2,-69,30,83,-107,-28,-13,26,81,78,32, 
  /* [68][0][][] */ -22,45,127,8,22,-8,-19,-25,-54,-31,-30,-53,23,-23,100,-45, 
  /* [69][0][][] */ 127,84,5,-7,-81,-39,-32,-43,22,8,96,-58,-64,68,85,-97, 
  /* [70][0][][] */ 55,2,-66,-13,-31,16,59,127,-39,94,-49,6,24,61,-29,13, 
  /* [71][0][][] */ 12,2,-11,3,-4,-101,7,30,-28,7,-83,15,-127,1,50,53, 
  /* [72][0][][] */ 15,21,-127,15,16,14,19,88,-48,-11,2,-15,23,11,-6,5, 
  /* [73][0][][] */ -35,36,45,-1,51,-46,-82,-127,10,-74,24,-25,26,-49,45,-24, 
  /* [74][0][][] */ -2,45,42,127,28,5,-94,77,-76,29,-43,28,10,-117,30,-89, 
  /* [75][0][][] */ -1,38,-63,11,14,-20,27,-31,111,33,-29,-1,25,127,-51,-7, 
  /* [76][0][][] */ 0,-7,-10,22,-3,-11,-13,64,11,-24,-21,-127,-7,-8,-2,9, 
  /* [77][0][][] */ -20,25,-6,127,-28,48,63,76,7,56,-1,17,-18,-9,-13,-7, 
  /* [78][0][][] */ -2,-4,27,-102,50,-17,-31,51,27,-28,15,-28,19,127,-2,52, 
  /* [79][0][][] */ -23,-97,-78,-54,-88,2,20,-82,127,26,38,47,18,43,55,-62, 
  /* [80][0][][] */ -57,-9,127,-59,34,5,-15,-92,-62,79,-34,-114,13,100,71,-57, 
  /* [81][0][][] */ -47,52,-121,24,65,-127,-17,57,2,-58,68,-2,24,7,12,-1, 
  /* [82][0][][] */ 123,-9,-9,10,5,-127,-11,12,-9,-19,-105,2,116,0,5,23, 
  /* [83][0][][] */ -39,77,-92,-71,-16,0,18,-127,56,36,-38,-124,3,53,54,96, 
  /* [84][0][][] */ -57,34,72,-55,-9,-36,78,-127,-33,34,7,-52,33,70,82,16, 
  /* [85][0][][] */ -73,126,26,-127,-63,-41,-26,-17,-54,-13,-84,14,17,-15,-85,-37, 
  /* [86][0][][] */ -18,-4,-25,3,-21,-17,127,24,-1,-15,7,1,0,30,95,-22, 
  /* [87][0][][] */ -26,-30,11,-108,16,-28,38,-14,-1,10,-4,-127,-23,9,13,-38, 
  /* [88][0][][] */ 103,-24,36,-9,21,-115,16,17,-40,36,-127,-28,48,14,74,-16, 
  /* [89][0][][] */ 33,-23,-44,-44,16,-21,-10,-13,-48,12,22,-48,127,-4,24,-46, 
  /* [90][0][][] */ 4,-50,36,-72,64,-16,-73,80,54,-100,-45,-33,-8,112,34,-127, 
  /* [91][0][][] */ -28,6,-10,-36,24,1,-50,-91,0,48,-22,-127,-11,-10,12,-12, 
  /* [92][0][][] */ -21,23,43,14,-3,-127,16,11,10,-31,0,-4,6,-23,21,5, 
  /* [93][0][][] */ 34,-20,127,-6,-55,54,32,-18,-16,21,-63,-10,-22,2,34,7, 
  /* [94][0][][] */ 29,8,-10,-23,18,-17,-11,-1,-22,-28,12,-47,127,-16,33,-29, 
  /* [95][0][][] */ 127,92,10,27,-89,-33,-59,4,-15,-31,89,-36,-40,31,84,-70, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00091513694496825337, 0.0011894976487383246, 0.00078592560021206737, 0.00086553138680756092, 0.000754139618948102, 0.00097018032101914287, 0.00046018767170608044, 0.00077071617124602199, 0.00049218873027712107, 0.0010505676036700606, 0.00054695515427738428, 0.00061528256628662348, 0.00083757512038573623, 0.0036027804017066956, 0.00062219321262091398, 0.00047829601680859923, 0.00042381288949400187, 0.00078035145998001099, 0.0011885542189702392, 0.0007249528425745666, 0.00036958802957087755, 0.00026413140585646033, 0.00048372949822805822, 0.00024784530978649855, 0.00042958671110682189, 0.0010840022005140781, 0.0019726187456399202, 0.00092310324544087052, 0.00061400793492794037, 0.0012527963845059276, 0.00079919979907572269, 0.0008965463493950665, 0.00056287297047674656, 0.00060414575273171067, 0.0008451758767478168, 0.00060813687741756439, 0.00062074704328551888, 0.00065070658456534147, 0.00090660806745290756, 0.00097143620951101184, 0.00035361677873879671, 0.0012313558254390955, 0.00082575506530702114, 0.00057215394917875528, 0.0013368269428610802, 0.00052340974798426032, 0.00070940586738288403, 0.00064345059217885137, 0.0008235730929300189, 0.00079431146150454879, 0.0006480442825704813, 0.00046699630911462009, 0.0014091088669374585, 0.00062187353614717722, 0.00085275218589231372, 0.0010814369888976216, 0.0010593256447464228, 0.00075440166983753443, 0.00089726300211623311, 0.00046912286779843271, 0.0023281408939510584, 0.0013427194207906723, 0.00061772653134539723, 0.0010499998461455107, 0.0013031570706516504, 0.00062297412659972906, 0.00022556949988938868, 0.00052330474136397243, 0.00127323844935745, 0.0010517386253923178, 0.00071300240233540535, 0.00072405638638883829, 0.0023005073890089989, 0.0010005045915022492, 0.00070536189014092088, 0.00053411279805004597, 0.00083234300836920738, 0.00033974196412600577, 0.00026991873164661229, 0.0005349272396415472, 0.0004549631557893008, 0.00051308324327692389, 0.00044751371024176478, 0.00057593686506152153, 0.00027290071011520922, 0.00086660194210708141, 0.0013474252773448825, 0.00055028597125783563, 0.00035289733204990625, 0.0014340291963890195, 0.00066115363733842969, 0.00082490628119558096, 0.0008219851297326386, 0.00175393873360008, 0.0009964935015887022, 0.00055229110876098275, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -3020, 28142, -16931, -13727, -10963, 5797, 21698, -53613, -5282, 14766, 21420, 7424, -6392, 7829, -3019, 3547, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00068974721943959594, 0.00045131085789762437, 0.00017774371372070163, 0.00018146670481655747, 0.00044705794425681233, 0.00037803215673193336, 0.00037510241963900626, 0.00031156835029833019, 0.00034611104638315737, 0.00028300794656388462, 0.00069234933471307158, 0.00066315260482951999, 0.00035001442302018404, 0.0002291000128025189, 0.00055145664373412728, 0.00050453492440283298, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -19,-21,13,-37,13,-19,-41,7,8,-2,-17,2,-5,-13,-28,13,-8,-5,-3,-13,15,-34,5,11,1,15,-2,127,32,-38,40,-9,1,-1,8,-12,-19,7,-40,-7,-19,11,-7,44,8,8,17,8,23,0,-2,6,12,-34,-21,93,0,6,-37,-38,-7,28,-1,-24,-38,-76,-17,38,3,20,13,-12,1,-34,-15,-26,-19,18,-8,6,-8,-32,19,25,-3,-5,-10,-101,-3,-19,9,-10,54,-39,-46,-7, 
  /* [1][0][][] */ 34,-83,-68,-75,127,-29,83,53,-36,-97,-64,-6,10,-12,-61,53,-69,-13,44,34,27,53,-27,-53,7,2,-24,-89,30,-28,-76,34,-12,23,6,-22,-13,-20,-1,16,-48,24,-54,-18,-52,84,19,19,20,-76,27,-40,-34,23,47,14,-74,-13,-46,-49,27,-6,7,-32,-78,102,-14,-17,-8,-18,-25,24,56,-119,-48,-1,47,-55,47,18,12,-35,33,5,-66,46,-28,22,23,-49,2,5,34,-2,21,125, 
  /* [2][0][][] */ -18,72,-93,-24,89,94,47,106,-17,-125,0,-21,3,-12,32,57,20,-25,-74,71,36,-8,75,27,46,52,-19,-51,45,-7,60,-76,49,52,-9,67,-127,-70,11,32,6,-80,12,-24,15,-61,2,86,-31,28,-6,-32,91,4,-28,65,6,14,28,-8,26,33,43,-31,15,6,-29,-19,-59,-16,-17,-54,-41,-99,12,76,81,69,25,2,46,-51,12,-3,-31,60,23,35,-19,30,14,-35,12,-60,-56,22, 
  /* [3][0][][] */ 64,29,82,20,59,-12,22,-39,7,-64,24,-47,-11,49,51,87,27,31,28,21,114,-13,43,5,67,-36,9,29,37,43,3,85,-111,30,20,26,-8,-21,22,43,-72,-34,93,7,18,68,-57,-115,-58,-42,-92,59,13,-109,20,8,-94,79,80,58,21,100,-21,-62,42,85,-10,-41,43,-41,3,-83,51,-42,69,-15,5,-5,69,45,-44,-69,30,-26,-34,-11,32,63,41,26,25,53,31,127,68,-63, 
  /* [4][0][][] */ 38,2,6,-3,127,45,6,-29,-41,-47,-30,-17,-55,16,-6,44,29,-78,-42,81,-11,29,27,-31,0,-1,6,-57,10,-18,50,-39,84,8,-32,14,32,7,8,10,-35,-15,-23,-46,-14,-53,-13,13,38,10,-21,16,-3,-31,9,-45,36,-7,-30,10,12,70,55,41,41,56,-8,0,-43,-10,42,61,24,-73,-42,-8,18,26,86,-31,1,-40,13,-10,-71,10,28,58,-43,32,1,-34,15,19,21,-8, 
  /* [5][0][][] */ 7,-16,-20,22,36,-3,30,-36,-9,-36,-12,-1,-7,35,-4,-1,-8,7,24,5,25,8,-32,58,17,-14,28,-91,-7,31,17,34,-15,4,0,-47,43,25,5,9,4,2,33,-20,0,12,0,-30,-16,-22,-6,-13,5,-17,1,-53,12,8,-13,22,72,6,-6,36,-4,58,-1,70,13,80,13,26,1,20,8,67,-29,-19,23,3,-11,-6,-2,12,-17,1,-10,127,0,33,-10,-10,-3,28,-54,-3, 
  /* [6][0][][] */ 17,-69,8,-14,-26,21,25,2,18,-6,-24,-81,-36,6,-32,11,12,16,7,1,-48,24,23,6,-12,-12,-3,-4,-12,13,43,-4,40,16,57,10,13,-6,31,-85,-14,105,9,-29,15,-14,-23,8,-15,33,-40,64,-7,-53,-8,7,16,-68,-2,25,-19,42,32,-93,28,-31,-4,-22,-1,6,127,2,-45,11,-19,4,-82,-12,20,-6,22,44,14,-4,-24,-16,41,23,14,14,44,-38,-18,7,-22,-35, 
  /* [7][0][][] */ -9,127,57,17,104,48,25,-32,-22,-45,26,-36,-9,21,13,28,17,-27,15,25,27,-54,48,11,-4,14,12,23,25,-11,22,20,29,9,-31,23,44,36,2,82,-39,50,6,43,-3,-29,23,-31,-26,-22,25,-12,5,-38,-45,79,36,-6,-22,9,-27,-60,-4,-25,-60,68,-46,-83,-19,-22,-3,71,-14,-26,7,-7,53,70,32,-24,-55,-40,-18,-1,0,50,2,-18,-26,23,-34,-55,-34,-24,43,-18, 
  /* [8][0][][] */ -13,1,63,26,-127,-20,43,-8,29,82,64,5,-7,16,20,14,-54,16,20,2,-41,-11,-104,73,10,-25,54,2,8,22,5,58,65,-20,15,10,-9,-5,7,37,17,-23,38,16,-35,-4,38,3,-106,18,24,9,-53,-35,-46,67,10,-64,-91,-14,10,-51,-33,-19,-5,75,-12,-66,15,-22,-48,-14,42,67,64,-16,-18,-44,-16,15,-89,7,-23,-5,32,22,71,36,29,-38,46,40,8,1,50,6, 
  /* [9][0][][] */ 4,-98,-31,40,88,72,-19,-42,37,-32,82,82,-20,18,82,-111,22,-17,4,7,-43,-30,35,-12,-2,3,-6,20,-16,6,2,-12,-3,19,-109,20,0,3,-9,62,28,-53,-7,50,-14,-10,-57,-39,24,39,-36,-71,72,13,1,-59,21,75,-6,16,20,-54,-29,127,-73,-12,-4,-1,5,32,-66,-74,41,5,8,22,51,-68,12,-2,-5,-16,-4,28,-3,-84,19,6,2,-18,-60,35,-53,10,-4,-57, 
  /* [10][0][][] */ -48,-14,-35,-48,-27,6,64,-23,33,22,24,27,26,-6,-10,9,-13,34,-37,-5,-3,28,15,17,-12,-14,11,-127,28,-50,61,-42,4,18,3,14,7,46,-4,-9,18,-46,17,-56,11,-14,28,19,-9,31,-20,-30,-36,-7,-6,-57,16,9,-3,-51,21,16,-5,-1,-45,102,-15,-35,22,-39,5,-21,-26,-10,32,60,-15,52,-16,11,-25,-1,14,24,14,-8,-14,115,-2,-5,17,16,25,-49,57,-36, 
  /* [11][0][][] */ -86,24,4,9,18,-51,-28,-5,-36,-6,0,5,30,29,-25,-6,48,13,-60,-38,15,-20,-8,1,69,2,74,13,-16,31,-26,10,-14,27,-5,2,2,18,21,11,0,0,5,18,81,20,66,7,49,39,-11,25,19,-54,22,14,-60,-22,-30,-29,-13,-24,-1,4,-3,-23,22,-6,21,7,-4,21,-21,11,35,4,-12,82,-121,56,-40,0,-66,-64,127,14,50,-9,16,46,-28,-61,-25,42,-13,-15, 
  /* [12][0][][] */ 3,-27,-35,5,77,-3,3,-15,-14,33,25,2,-5,-29,42,-13,-32,-31,29,-27,-10,-13,-42,57,-17,50,-25,107,-23,37,-48,12,-16,23,5,-1,-38,-40,23,6,-10,-5,-12,14,-20,8,17,22,-13,-5,-4,-20,-26,-19,-9,-12,-7,-7,13,24,-23,-24,9,67,53,-112,10,72,-38,-127,-14,71,-5,12,-6,101,19,-22,-7,8,-10,22,-45,6,2,-20,-1,-58,-17,12,1,-4,-46,49,-35,33, 
  /* [13][0][][] */ -80,72,-12,6,-65,9,-12,6,-38,-37,45,11,85,5,-26,-1,-9,46,-40,-6,22,-15,60,-60,61,33,7,-6,20,-30,-31,-103,-102,-24,5,25,1,35,40,-9,-9,94,10,12,34,11,1,-1,73,-6,38,70,60,-51,72,-19,-14,51,40,12,13,23,-20,4,-10,-10,6,11,20,10,34,-127,22,-22,-79,-5,42,56,-47,-42,86,-18,-7,-31,52,-36,91,14,-17,5,-5,26,42,-38,-6,-8, 
  /* [14][0][][] */ -20,15,-23,-54,34,0,9,30,-95,6,20,33,-35,-61,-76,-28,-85,-21,73,13,36,11,16,-103,-43,21,-57,-38,6,-24,-13,-34,-59,-38,12,2,-31,-15,12,-4,-6,73,-79,-31,-58,28,6,24,127,-26,40,4,29,52,-101,-4,-28,39,-106,0,12,42,45,53,12,33,2,6,-52,22,61,36,36,-10,-37,28,52,-73,-23,-90,23,-39,20,34,28,-69,-55,11,-42,17,34,61,11,42,17,-1, 
  /* [15][0][][] */ -43,-69,-11,-31,13,16,-16,-70,-18,21,-1,-43,39,-6,40,-18,-89,7,-14,21,-22,-1,-57,-45,-3,-8,1,29,-14,-12,66,-82,-14,34,23,20,7,31,-87,7,37,-61,8,28,-15,-43,48,22,55,15,-19,-127,6,54,0,49,44,-19,-12,48,3,-10,36,-19,-2,-4,-19,-7,-21,18,10,33,-45,9,14,-29,-35,-11,4,4,-12,48,-11,69,-11,-49,-26,-21,-38,60,26,82,-43,1,7,-22, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.029314257204532623, 0.019180711358785629, 0.0075541078113019466, 0.0077123348601162434, 0.018999962136149406, 0.01606636680662632, 0.015941852703690529, 0.013241654261946678, 0.014709719456732273, 0.012027837336063385, 0.029424846172332764, 0.028183985501527786, 0.01487561222165823, 0.0097367502748966217, 0.023436905816197395, 0.021442733705043793, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 21861, 64661, -1591, -322, 16308, -4759, 717, -1795, 5843, 10861, -5730, -502, 736, 6561, 5222, -9285, -4434, 3, -957, 18291, -10489, 19756, -2401, 11431, 27656, -394, -5703, 17647, 14324, -19169, 1726, 21533, 24272, -9716, 1761, 86, 301, -1174, 4282, -8341, -5989, -939, -7185, 100, 30679, -1428, 12656, -673, -15132, 461, 103, -316, -3173, 18888, -4080, 12768, 21989, -443, 33715, 355, -9470, -606, 1608, -322, -1957, 13925, -1163, -4487, -2795, 4198, 806, -4092, -23, 115, -1774, -5577, -893, -2350, 42868, -9785, -6443, -11500, 146, -12, 59728, -13719, -10729, -27296, -6861, 9750, -2937, 32976, -788, -2471, -3084, 672, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00010793311230372638, 8.8077940745279193e-05, 0.00010124916298082098, 0.00020784653315786272, 0.00021316729544196278, 0.00016697353566996753, 5.9045709349447861e-05, 9.2101370682939887e-05, 0.00024868338368833065, 0.00022510655981022865, 0.00023510612663812935, 0.00010945216490654275, 0.00026779776089824736, 0.00021567288786172867, 0.0003704018599819392, 0.00015614810399711132, 0.00019614063785411417, 0.00018528768850956112, 0.0001665326562942937, 5.8231431466992944e-05, 7.8844743256922811e-05, 5.7787132391240448e-05, 0.00013588028377853334, 6.8953500885982066e-05, 8.4938546933699399e-05, 8.884537237463519e-05, 0.00015343123232014477, 0.00017970797489397228, 7.5368501711636782e-05, 0.00050150050083175302, 0.00037773366784676909, 0.00025382119929417968, 0.00012350761971902102, 0.00017529810429550707, 0.00022386468481272459, 0.00043320844997651875, 0.00049007608322426677, 0.000152671302203089, 0.00020559628319460899, 0.00010475119051989168, 0.0002035087818512693, 0.00019876926671713591, 0.00037742051063105464, 0.00010112322343047708, 0.00040694884955883026, 9.6933224995154887e-05, 0.00010803020995808765, 0.00031171395676210523, 0.00063234235858544707, 0.0001069210484274663, 0.00047231678036041558, 0.00015134172281250358, 0.00016579555813223124, 0.00014950292825233191, 0.00020325071818660945, 0.00013731654325965792, 0.00012348426389507949, 0.00036662229103967547, 4.9906295316759497e-05, 0.00016461513587273657, 0.0002884468121919781, 0.00025473636924289167, 0.00010977600322803482, 0.00015697427443228662, 0.00012936291750520468, 0.00013047394168097526, 0.00027988746296614408, 0.0004956898046657443, 0.0001911696745082736, 0.00010354119149269536, 0.00016658523236401379, 9.6747069619596004e-05, 0.00026716239517554641, 0.00013454505824483931, 0.00039422360714524984, 0.00033691700082272291, 0.00013383517216425389, 8.949448965722695e-05, 5.968203186057508e-05, 0.00012683299428317696, 0.00018631918646860868, 0.00021721964003518224, 0.00017021030362229794, 0.00027688065893016756, 5.9296158724464476e-05, 0.0001031052233884111, 7.9927798651624471e-05, 0.00052153918659314513, 0.00024935384863056242, 0.00012189448898425326, 0.00031385492184199393, 3.599338378990069e-05, 0.00015223106311168522, 0.00011209176591364667, 0.00033983931643888354, 0.00031142611987888813, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-8,127,22,72,73,-57,-14,-18,-15,-2,-30,1,37,1,-8,-45,27,23,20,-127,127,5,-83,7,49,-30,-126,-127,38,24,12,27,61,-18,-30,-10,29,-8,-12,27,-106,73,24,-66,38,45,-17,52,-23,19,5,-5,18,51,-91,-50,-61,-21,-11,-1,10,38,68,-26,75,15,-8,18,19,127,25,23,23,-3,-11,19,127,-8,-14,13,-27,21,123,20,-73,-17,-1,-33,-15,-41,3,-23,-15,26, 127,-127,79,106,-43,127,40,-114,70,4,-17,127,127,-97,-13,16,10,127,127,-110,127,-79,80,66,-127,-118,-66,-34,-56,45,-60,-20,-89,55,-127,-84,-42,-15,-55,61,0,127,127,86,-51,-111,-112,-52,-15,-127,45,85,69,-30,46,85,-47,41,-83,-114,-44,-43,-62,68,74,-62,27,32,-82,33,-18,91,121,127,13,17,2,61,-33,51,65,127,127,-22,-8,77,-110,127,-122,-100,5,-127,-87,-127,-38,107, -75,-13,32,-82,15,-26,63,-6,80,-34,-27,18,-19,-7,-9,-13,-8,-18,8,-3,-22,-104,28,-3,-124,102,7,-55,117,49,-15,9,0,13,15,-29,-8,33,18,12,25,13,-116,69,17,-18,37,12,-14,12,-14,5,-9,1,-4,23,-66,6,-33,52,2,41,32,-1,-7,-40,-30,24,10,2,-4,35,11,-26,-4,2,-12,-6,-85,0,-21,-26,-18,3,-108,9,-29,-23,-52,25,-26,-32,30,-26,-13,2, 
  /* [0][1][][] */ -64,-74,73,-36,-48,94,18,127,-53,-21,-1,-116,26,-113,79,31,-3,-61,-17,88,51,-63,47,48,-101,-12,127,-22,-24,63,122,-104,-127,91,-86,-56,-35,31,-29,94,-48,-26,-6,45,-48,127,-23,65,15,97,19,-2,14,-54,28,32,127,122,-70,-87,127,-35,-36,127,71,-39,-14,2,127,38,127,95,-40,101,-5,10,15,15,-31,10,-43,126,-79,110,0,35,-54,30,78,-127,-32,-9,127,-65,-22,1, 67,125,59,-114,127,81,89,39,-127,127,127,-37,-66,-127,-127,127,127,-63,-124,-50,102,93,-124,127,-112,-92,-42,127,-127,108,-127,-127,-87,127,108,127,127,-127,-106,127,-63,-96,107,-127,-127,-35,-127,-127,127,-111,84,43,127,127,127,-127,99,-127,-127,127,20,-81,-127,-98,-127,127,-127,127,-127,-127,-109,-83,-127,-80,127,127,-127,127,-78,127,127,31,-41,-127,58,127,93,46,127,13,127,1,-65,37,127,-127, -54,-13,-49,38,-57,-99,35,-25,18,-34,-28,93,1,88,13,9,-3,63,-6,127,0,-79,-43,7,-79,111,-69,-19,-70,-16,17,-63,-71,37,6,-17,-27,45,-68,42,127,-3,-39,29,-40,-58,16,44,8,120,-11,7,-38,-73,4,20,95,2,1,20,-35,127,90,-50,-43,13,38,-10,-80,120,-19,-85,1,-55,-14,-19,27,15,75,-36,-70,-43,56,14,-47,-18,71,22,15,62,-44,19,-41,98,-26,-4, 
  /* [0][2][][] */ -68,0,-5,-20,12,-45,63,25,55,-28,-37,-2,18,18,-26,3,-7,63,7,1,-56,-78,2,-7,-24,-58,36,-68,90,39,25,27,16,-8,-11,-47,-7,35,-3,-1,-15,-6,-67,105,4,31,11,36,-16,-29,9,-20,21,-1,9,14,-69,27,-11,13,15,1,-22,-6,-1,-46,-46,14,-34,12,26,30,15,-20,25,3,17,5,-77,-10,-8,-9,16,14,-127,9,13,-43,-59,-50,-28,-52,10,60,-18,-8, 120,32,-127,-35,-73,-25,41,31,-64,-28,-19,-105,-78,109,-14,36,4,-51,-8,-125,88,-58,-39,2,-112,127,-51,21,-36,-20,-10,-4,-63,16,28,5,-22,-29,127,53,12,-13,68,-38,-39,76,-68,-43,-33,-5,-127,-127,-52,-27,1,39,-64,-4,13,40,-6,-17,7,-47,-55,33,63,-24,115,108,-23,-68,13,-58,4,2,100,4,52,24,13,-99,-51,2,1,7,127,41,-61,40,-19,-111,42,81,-10,26, -56,11,-16,27,14,-69,-127,3,-12,-8,-15,4,14,-27,19,-2,-6,-15,6,17,-49,-69,14,2,14,-96,20,4,-49,-38,-6,16,40,-22,-5,-25,-35,5,41,-40,24,-2,-48,-35,3,66,21,15,-10,-2,9,-8,17,5,-3,-7,-59,-10,5,-38,-11,10,82,-11,34,-2,-2,29,1,4,-4,20,-16,15,2,16,36,0,75,-8,4,-8,-8,-18,72,1,42,-38,59,39,-17,-56,-6,2,-15,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0045871571637690067, 0.0037433125544339418, 0.0043030893430113792, 0.0088334772735834122, 0.0090596098452806473, 0.007096374873071909, 0.0025094426237046719, 0.0039143082685768604, 0.010569043457508087, 0.0095670288428664207, 0.0099920099601149559, 0.004651716910302639, 0.011381404474377632, 0.0091660972684621811, 0.015742078423500061, 0.0066362945362925529, 0.0083359768614172935, 0.0078747263178229332, 0.0070776380598545074, 0.0024748358409851789, 0.0033509014174342155, 0.0024559530429542065, 0.0057749119587242603, 0.002930523594841361, 0.0036098880227655172, 0.0037759284023195505, 0.0065208273008465767, 0.0076375887729227543, 0.0032031612936407328, 0.021313771605491638, 0.016053680330514908, 0.010787401348352432, 0.0052490737289190292, 0.0074501694180071354, 0.0095142489299178123, 0.018411358818411827, 0.020828234031796455, 0.0064885299652814865, 0.0087378416210412979, 0.0044519254006445408, 0.0086491229012608528, 0.0084476936608552933, 0.016040371730923653, 0.0042977370321750641, 0.017295325174927711, 0.0041196621023118496, 0.0045912838540971279, 0.013247842900454998, 0.026874549686908722, 0.0045441444963216782, 0.020073462277650833, 0.006432022899389267, 0.0070463111624121666, 0.0063538742251694202, 0.0086381556466221809, 0.0058359531685709953, 0.0052480809390544891, 0.015581446699798107, 0.0021210175473242998, 0.0069961431436240673, 0.012258988805115223, 0.010826295241713524, 0.0046654799953103065, 0.0066714067943394184, 0.0054979235865175724, 0.0055451421067118645, 0.011895217001438141, 0.02106681652367115, 0.0081247109919786453, 0.0044005005620419979, 0.00707987230271101, 0.0041117505170404911, 0.011354401707649231, 0.0057181650772690773, 0.016754502430558205, 0.014318971894681454, 0.0056879948824644089, 0.0038035158067941666, 0.0025364863686263561, 0.0053904019296169281, 0.007918565534055233, 0.0092318346723914146, 0.0072339377366006374, 0.011767428368330002, 0.0025200867094099522, 0.004381971899420023, 0.0033969313371926546, 0.022165415808558464, 0.010597538203001022, 0.0051805158145725727, 0.013338834047317505, 0.0015297187492251396, 0.0064698201604187489, 0.0047638998366892338, 0.01444317027926445, 0.013235609978437424, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1275, 8611, 13242, 29305, 19547, -3312, -1796, 5070, 31394, -4574, 12768, 3672, 9070, 11747, 35375, 1529, 2768, 9774, 14968, 6819, -134, 592, 13909, -1164, 5166, -79, 15058, 7360, 6793, 50391, 49154, 18308, 7181, -936, 9519, 2574, 1970, 3868, 19754, -1167, 10542, 10471, 38102, -3700, 30618, 7708, 6915, 18090, 76711, 12043, -593, 7632, -4408, -193, -2812, 6201, -612, 15490, 7329, 8607, 4792, 17856, 7432, 4367, 12039, 8709, 5887, -7484, 7065, -3472, 5906, 11132, 24088, 6348, -6148, -4442, 5292, 248, 2700, -1325, 16834, 15488, 3983, 15903, 3074, 109, 12485, 66995, 9778, 12175, 6900, -177, 6433, 8962, 4676, 10842, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00028543511871248484, 0.00017059878155123442, 0.00014297448797151446, 7.8096687502693385e-05, 0.00015334703493863344, 0.00030981193413026631, 0.00045716998283751309, 0.00031590333674103022, 7.5211377406958491e-05, 0.00029291078681126237, 0.0002084821171592921, 0.00023547885939478874, 0.00014274723071139306, 0.00019771445658989251, 6.7497014242690057e-05, 0.00037211948074400425, 0.00017827306874096394, 0.00012971260002814233, 0.00014620440197177231, 0.00017868517898023129, 0.00034057738957926631, 0.00047427829122170806, 0.0001463545486330986, 0.00055281253298744559, 0.00050189578905701637, 0.00030396279180422425, 0.00014808843843638897, 0.00019612754113040864, 0.00023867667187005281, 7.0275222242344171e-05, 5.8205212553730235e-05, 0.00013346743071451783, 0.00023077921650838107, 0.0002626183268148452, 0.00021063389431219548, 0.00021177387679927051, 0.00025650253519415855, 0.0003852937079500407, 0.00013820231833960861, 0.00047654955415055156, 0.00017649562505539507, 0.00014908476441632956, 7.1455353463534266e-05, 0.00029705985798500478, 0.00010622703848639503, 0.0002013953635469079, 0.00024952820967882872, 0.00014812441077083349, 5.3722826123703271e-05, 0.00017357776232529432, 0.00018443370936438441, 0.00022345437901094556, 0.00024199203471653163, 0.00023415304895024747, 0.00036495068343356252, 0.00017470362945459783, 0.00018682719382923096, 0.00012012496881652623, 0.0002781843941193074, 0.00017152617510873824, 0.00032924336846917868, 7.6715456089004874e-05, 0.00020080065587535501, 0.0002199321606894955, 0.00020758558821398765, 0.00022184911358635873, 0.00021973786351736635, 0.00017700278840493411, 0.00023862328089307994, 0.00020973439677618444, 0.00018731009913608432, 0.00014303390344139189, 8.6850093794055283e-05, 0.00016389261872973293, 0.00024800215032882988, 0.00030303929816000164, 0.00031612580642104149, 0.00028413196559995413, 0.00028019046294502914, 0.00027880462585017085, 0.00012044648610753939, 0.00010628057498252019, 0.00021928883506916463, 0.00012281631643418223, 0.00036511712823994458, 0.00028731816564686596, 0.00018758822989184409, 5.7443488913122565e-05, 0.00014379537606146187, 0.00018800336692947894, 0.00018594105495139956, 0.0003979380417149514, 0.00022503791842609644, 0.00017380435019731522, 0.00023565963783767074, 0.00015325535787269473, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 16,64,1,66,27,9,10,-5,40,28,-75,107,20,-102,30,-127, 
  /* [1][0][][] */ 16,34,-9,-15,36,-14,127,-114,-18,98,-35,-16,20,-61,25,-9, 
  /* [2][0][][] */ -127,36,-38,-8,-14,-23,56,96,-57,58,70,-16,-66,32,33,-52, 
  /* [3][0][][] */ -81,39,44,82,-77,50,71,126,-3,88,-127,-1,45,-50,-83,-58, 
  /* [4][0][][] */ -5,-9,52,78,-18,84,-6,47,12,-16,8,7,20,-5,-127,-26, 
  /* [5][0][][] */ -8,-33,55,-16,0,-24,-3,34,-64,103,-30,-127,-12,28,-52,-30, 
  /* [6][0][][] */ 21,-6,34,-26,50,65,-78,-87,-10,-7,54,-32,127,-21,-26,-41, 
  /* [7][0][][] */ 8,-10,127,9,-35,-34,5,-16,-88,38,-57,-60,0,1,54,-33, 
  /* [8][0][][] */ 32,26,87,57,-57,77,15,55,62,6,38,-127,-40,16,-123,-75, 
  /* [9][0][][] */ 45,-127,42,62,16,-53,-39,8,124,-28,58,-21,-29,18,-124,-24, 
  /* [10][0][][] */ -44,-89,-7,-23,-124,-33,-12,62,88,127,44,-34,-25,56,93,-23, 
  /* [11][0][][] */ 71,-4,13,-118,23,-14,-127,-124,-34,52,1,-14,48,-29,13,-63, 
  /* [12][0][][] */ -23,-10,18,-28,-31,-63,-74,-20,-29,-51,11,7,9,127,104,38, 
  /* [13][0][][] */ -52,-104,-44,19,4,-63,-2,-38,45,-1,-24,3,30,16,127,13, 
  /* [14][0][][] */ 10,-72,67,26,18,16,6,127,15,42,-3,-38,33,52,-63,114, 
  /* [15][0][][] */ 18,-25,-1,49,16,-11,89,-8,9,-127,11,-41,-2,-16,-3,-27, 
  /* [16][0][][] */ 31,-81,-62,28,-3,-5,42,-100,113,64,107,-2,-6,90,75,127, 
  /* [17][0][][] */ -60,-26,91,79,127,48,36,-3,112,-58,-12,-73,50,75,-86,-20, 
  /* [18][0][][] */ -13,16,4,8,-83,10,-8,43,-73,-25,-16,-17,30,-127,66,-21, 
  /* [19][0][][] */ 52,-91,18,-106,95,34,-79,83,120,-69,101,38,-30,44,80,127, 
  /* [20][0][][] */ 49,-22,55,-72,0,-8,-30,41,-12,-64,90,-25,13,10,-27,127, 
  /* [21][0][][] */ -98,-22,12,-24,24,27,-96,-69,-26,69,8,28,-127,-52,46,-3, 
  /* [22][0][][] */ 38,-19,26,-36,19,-72,-5,-21,-127,17,-14,-46,-14,-7,71,-17, 
  /* [23][0][][] */ 10,21,13,-4,-2,10,-5,7,-15,-3,46,-6,127,-10,6,-43, 
  /* [24][0][][] */ -25,1,5,-75,-36,-13,69,20,-42,23,-14,-127,3,-113,58,18, 
  /* [25][0][][] */ -127,7,10,25,60,-15,-41,-111,10,41,-7,-64,-80,-36,38,-16, 
  /* [26][0][][] */ 43,-28,78,-113,94,-15,-5,5,127,-40,46,-4,-8,61,14,69, 
  /* [27][0][][] */ 112,-43,30,-27,-42,-49,-8,-20,-24,27,-127,4,8,-5,-5,49, 
  /* [28][0][][] */ -127,-13,-123,-75,51,-2,80,-48,-6,64,-58,20,48,3,-39,37, 
  /* [29][0][][] */ -85,-30,-11,127,-10,7,4,-53,-17,-2,-95,49,29,-87,29,-58, 
  /* [30][0][][] */ 59,-22,127,-18,30,29,-37,41,-27,-69,45,-24,-24,18,-52,43, 
  /* [31][0][][] */ 1,-105,11,-46,-9,-50,24,-27,-6,33,127,20,-37,86,75,123, 
  /* [32][0][][] */ -5,78,-39,34,-127,15,-84,-52,-58,-44,-9,46,15,58,41,69, 
  /* [33][0][][] */ 25,-2,22,127,41,-6,25,-49,-119,43,70,-36,-3,27,9,100, 
  /* [34][0][][] */ 32,-3,13,6,72,-29,-127,-14,-41,76,-49,2,-23,11,-5,12, 
  /* [35][0][][] */ 80,5,-35,3,21,-127,-27,-11,-35,11,-108,12,80,7,-11,42, 
  /* [36][0][][] */ 50,7,-127,25,51,10,-62,37,-31,-44,-13,-22,3,22,-28,10, 
  /* [37][0][][] */ 3,10,127,-37,-73,8,30,-63,-4,23,-47,39,31,1,52,-1, 
  /* [38][0][][] */ -127,52,-10,37,18,83,14,0,3,-32,96,-18,-28,21,-27,-5, 
  /* [39][0][][] */ -22,-5,16,40,30,-8,-127,38,17,29,4,-30,-6,-25,-8,0, 
  /* [40][0][][] */ -18,51,-37,127,11,25,34,28,-84,-47,-39,51,6,52,-59,-19, 
  /* [41][0][][] */ 8,24,-40,-29,-45,2,127,104,-59,79,-52,27,22,73,60,-33, 
  /* [42][0][][] */ 30,-28,-1,-27,-9,21,-83,57,28,-127,78,26,-34,13,-67,-13, 
  /* [43][0][][] */ -127,-22,45,-26,35,15,-65,-85,-26,73,3,-4,-92,-20,64,-39, 
  /* [44][0][][] */ 22,0,-17,5,-18,-22,-3,-38,127,-10,6,58,26,72,8,50, 
  /* [45][0][][] */ -68,-90,-2,-69,7,-38,-12,50,-4,-84,-21,-37,13,109,-10,127, 
  /* [46][0][][] */ -41,17,-36,93,-90,-26,0,-72,-127,38,-54,-17,0,36,0,-23, 
  /* [47][0][][] */ -27,-3,-105,127,-23,53,18,-36,2,78,91,65,-50,-27,44,-29, 
  /* [48][0][][] */ -28,14,41,-127,32,-17,3,17,-41,18,47,2,-22,76,121,58, 
  /* [49][0][][] */ -23,27,50,127,-13,39,-66,4,11,-60,-72,-4,-6,-14,-100,-112, 
  /* [50][0][][] */ 12,49,18,-127,70,1,-24,40,115,-36,-33,4,10,-49,16,-39, 
  /* [51][0][][] */ 14,-29,18,-4,47,7,-50,-127,14,-54,-6,1,-12,-13,-10,-7, 
  /* [52][0][][] */ 21,27,-11,30,38,-22,-69,101,-76,127,-38,-29,86,121,24,-38, 
  /* [53][0][][] */ -5,90,2,-72,-42,9,22,-33,-67,-47,-57,58,15,-127,-78,-14, 
  /* [54][0][][] */ -9,21,23,28,45,-19,3,-26,-1,25,-8,-17,-8,127,-37,-10, 
  /* [55][0][][] */ -103,127,70,-22,53,-6,-18,-13,-31,6,71,-3,-6,-22,91,-12, 
  /* [56][0][][] */ 63,19,7,-95,61,12,1,28,42,-56,44,127,-13,-11,91,29, 
  /* [57][0][][] */ -37,-17,19,98,-19,8,50,127,-7,17,27,-47,-22,74,-2,19, 
  /* [58][0][][] */ 15,111,-15,-127,-5,33,-3,25,103,0,-12,101,16,-108,47,69, 
  /* [59][0][][] */ 19,69,50,-122,-40,8,12,-14,8,11,37,-70,-30,-127,-72,28, 
  /* [60][0][][] */ 45,-18,97,-37,-27,127,33,-42,-3,46,-61,1,12,2,40,-8, 
  /* [61][0][][] */ -19,9,-75,-53,-86,-22,98,127,13,64,-10,25,15,104,36,-32, 
  /* [62][0][][] */ -19,13,-2,-9,-76,28,-52,22,-19,-25,4,-54,18,-127,89,-4, 
  /* [63][0][][] */ 23,-42,5,-73,42,2,-99,-127,-73,99,-40,-4,65,-17,10,-43, 
  /* [64][0][][] */ -10,-8,31,47,63,-15,-34,-127,18,-108,-6,-46,1,-25,-18,6, 
  /* [65][0][][] */ -127,27,8,-58,12,67,41,-54,-79,22,23,3,8,10,-14,-33, 
  /* [66][0][][] */ 50,-10,84,20,-55,24,-18,61,-60,-7,58,-96,-13,49,-127,-28, 
  /* [67][0][][] */ 69,-41,-48,84,67,-39,-51,-127,37,-66,-107,-40,-81,-8,-88,-5, 
  /* [68][0][][] */ 21,-32,-53,39,-47,-73,-9,-57,-17,1,43,-40,-7,49,127,-22, 
  /* [69][0][][] */ -53,50,-66,74,4,-115,34,98,55,22,72,-4,127,56,-25,-3, 
  /* [70][0][][] */ 24,24,-37,-51,-38,11,127,109,-11,58,-25,19,15,57,22,9, 
  /* [71][0][][] */ -3,-7,-28,-48,33,6,13,51,-36,-44,-23,11,12,-127,84,3, 
  /* [72][0][][] */ 67,57,3,11,51,-39,-61,-127,33,41,-57,33,61,70,11,52, 
  /* [73][0][][] */ -56,-127,-31,-60,-91,-28,41,-33,-21,14,-35,-29,10,-35,64,-3, 
  /* [74][0][][] */ -18,37,69,99,14,-2,-127,87,20,-40,-43,-61,-2,2,-30,-18, 
  /* [75][0][][] */ -31,22,-35,29,-25,78,62,119,2,72,-24,-51,-127,95,4,4, 
  /* [76][0][][] */ 11,-14,-34,4,21,-78,-127,-82,-32,-24,-12,-19,29,3,48,-17, 
  /* [77][0][][] */ -44,5,-34,-28,-54,-3,-8,-41,127,0,-48,-2,-11,41,35,-76, 
  /* [78][0][][] */ -78,-127,-30,79,47,45,-36,50,-3,-75,-120,65,69,-20,91,59, 
  /* [79][0][][] */ 36,0,37,-60,127,17,57,16,69,33,8,38,-7,-41,16,-43, 
  /* [80][0][][] */ 0,-28,59,-110,-10,-47,-7,7,-77,-54,-17,-44,11,127,-41,20, 
  /* [81][0][][] */ 41,-7,40,45,-4,40,-22,2,16,-26,16,-44,-2,56,-127,20, 
  /* [82][0][][] */ -49,-11,31,-127,-12,-33,-5,-40,1,-21,-30,-55,5,-116,-100,30, 
  /* [83][0][][] */ -3,15,-27,-63,-40,0,-13,48,-81,4,6,-76,24,-127,12,51, 
  /* [84][0][][] */ 127,30,27,65,-50,-3,-54,34,-11,-16,98,11,-60,33,71,-78, 
  /* [85][0][][] */ -19,-1,9,-44,45,-30,-25,91,-69,-127,-47,-38,-19,56,82,-112, 
  /* [86][0][][] */ 11,23,17,-19,-32,65,-53,13,-75,-66,31,-18,-18,-127,-23,21, 
  /* [87][0][][] */ 127,-37,22,-11,-48,-40,2,-13,-1,6,-111,-4,37,-9,12,16, 
  /* [88][0][][] */ 55,75,-15,20,-19,-39,-29,-8,80,9,20,29,-8,-25,112,-127, 
  /* [89][0][][] */ 51,76,-85,-18,-24,-26,16,-66,29,37,13,-41,-45,-9,-26,-127, 
  /* [90][0][][] */ -17,-25,-6,-84,-70,24,127,-79,110,-85,18,-82,28,-11,-39,-2, 
  /* [91][0][][] */ 2,19,-19,-97,-24,-14,17,-47,-46,10,58,46,5,-12,26,127, 
  /* [92][0][][] */ 9,7,1,23,51,0,-71,-127,38,-45,14,-48,-50,-15,0,-25, 
  /* [93][0][][] */ 83,-3,33,-127,-50,-10,-25,57,54,-81,93,-26,-44,114,-13,43, 
  /* [94][0][][] */ -52,52,-120,10,56,-127,-6,9,-14,-36,55,-39,46,-11,-22,-6, 
  /* [95][0][][] */ -17,75,23,-127,5,20,-31,12,33,-57,-51,-41,16,6,-78,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00099192257039248943, 0.00059285201132297516, 0.00049685413250699639, 0.00027139569283463061, 0.00053290004143491387, 0.0010766349732875824, 0.0015887225745245814, 0.0010978033533319831, 0.00026136889937333763, 0.0010179014643654227, 0.00072450126754119992, 0.00081831833813339472, 0.00049606437096372247, 0.00068708235630765557, 0.00023456051712855697, 0.001293161534704268, 0.00061952107353135943, 0.00045076743117533624, 0.00050807849038392305, 0.00062095321482047439, 0.0011835488257929683, 0.0016481761122122407, 0.00050860026385635138, 0.0019210923928767443, 0.0017441503005102277, 0.0010563085088506341, 0.00051462574629113078, 0.00068156758788973093, 0.00082943111192435026, 0.00024421513080596924, 0.00020227035565767437, 0.00046381590072996914, 0.00080198649084195495, 0.00091263133799657226, 0.00073197897290810943, 0.00073594058630988002, 0.00089137820759788156, 0.0013389436062425375, 0.00048027024604380131, 0.001656068954616785, 0.00061334425117820501, 0.00051808811258524656, 0.00024831623886711895, 0.0010323199676349759, 0.00036915217060595751, 0.00069987395545467734, 0.00086714152712374926, 0.00051475077634677291, 0.00018669350538402796, 0.00060320430202409625, 0.0006409300840459764, 0.00077653175685554743, 0.00084095244528725743, 0.00081371096894145012, 0.0012682490050792694, 0.00060711684636771679, 0.00064924772595986724, 0.00041744922054931521, 0.00096672540530562401, 0.00059607479488477111, 0.0011441616807132959, 0.0002665957435965538, 0.00069780723424628377, 0.00076429161708801985, 0.00072138576069846749, 0.00077095325104892254, 0.00076361640822142363, 0.00061510672094300389, 0.00082924560410901904, 0.0007288531051017344, 0.00065092591103166342, 0.00049706059508025646, 0.00030181487090885639, 0.00056954723550006747, 0.00086183828534558415, 0.001053099287673831, 0.0010985764674842358, 0.00098739389795809984, 0.00097369670402258635, 0.00096888071857392788, 0.00041856651660054922, 0.00036933823139406741, 0.00076205597724765539, 0.0004268019984010607, 0.0012688274728134274, 0.00099846639204770327, 0.00065189244924113154, 0.00019962327496614307, 0.00049970683176070452, 0.00065333506790921092, 0.00064616830786690116, 0.0013828842202201486, 0.00078203476732596755, 0.00060399173526093364, 0.00081894657341763377, 0.00053258141269907355, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -4251, 7021, -8909, 23996, 30776, 5816, -6530, -6776, 22289, 538, 27157, 21778, -9992, 10312, 41130, -35887, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00049450772348791361, 0.00023258999863173813, 0.0002891331969294697, 0.00022374435502570122, 0.00036327258567325771, 0.0003273434704169631, 0.0002656031574588269, 0.00047745250049047172, 0.00019079171761404723, 0.0002168421633541584, 0.00036334674223326147, 0.00062491820426657796, 0.0004625413566827774, 0.00041348414379172027, 0.00041160473483614624, 0.00028463636408559978, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -6,10,-9,14,41,73,-31,-20,38,6,12,11,-8,0,21,60,8,-8,-3,-11,98,-53,2,-24,-23,-27,-42,-101,1,-2,55,41,106,-8,2,-11,-2,-19,-26,17,-24,17,19,-32,-3,-30,-9,25,-7,27,-3,-3,-28,-8,-8,-11,34,32,-19,-23,-58,18,-10,-13,4,7,48,-3,2,1,-12,-20,-56,-6,-19,0,-3,-80,14,-27,35,-25,-52,-47,29,-6,19,20,-5,1,15,-41,23,25,-11,127, 
  /* [1][0][][] */ 79,-91,33,73,-24,-49,-20,-65,-34,-108,3,12,23,-77,-36,-53,-73,-15,27,8,-25,-114,-55,6,127,-77,-83,17,-36,102,5,58,5,11,-41,25,-13,1,29,-46,20,-80,61,-35,-57,6,69,-22,35,19,-18,-76,78,-100,32,-23,6,24,-19,-99,44,-77,30,-55,-21,-116,33,51,29,45,-65,9,-106,45,-33,67,21,101,5,-26,53,5,-84,40,-90,71,10,64,-54,-5,24,19,2,-55,28,-2, 
  /* [2][0][][] */ 17,10,7,-23,13,1,6,29,51,-11,0,70,15,10,54,0,-1,-11,20,2,-26,-49,4,-42,-11,-10,-21,26,-4,11,95,-57,19,-67,-17,46,21,127,-34,-16,-3,-12,-2,30,-31,-45,-52,30,14,29,-30,-31,24,11,3,-24,-16,5,-10,25,-9,8,68,92,3,-76,6,-62,-6,-7,-19,23,-27,-6,-20,22,15,58,12,25,14,84,27,-27,-3,-5,16,-6,18,2,9,-48,-29,3,-6,68, 
  /* [3][0][][] */ 0,-36,-29,43,16,-30,-11,-4,-4,24,16,5,-6,-3,45,-9,38,-56,15,8,-23,-23,-28,19,-10,19,10,-8,28,-40,62,-19,9,-24,-9,59,-11,-30,4,35,2,-70,30,-41,-7,11,-8,6,-117,48,-11,14,-127,-56,-25,-27,31,9,-3,48,-2,30,5,24,-3,-95,-26,20,58,25,-6,8,-19,31,0,-52,-37,-54,33,-49,12,-19,23,80,38,50,32,31,44,-11,-18,-11,-33,-7,-13,-35, 
  /* [4][0][][] */ -15,-28,22,-76,-4,-3,-53,-9,-9,-48,-24,-17,9,81,-3,16,56,-24,13,-2,-4,23,66,5,-11,-14,14,0,16,-7,-6,-9,-45,16,20,28,42,-33,-8,-13,23,1,-104,-31,22,-7,1,-13,1,83,-27,-17,-24,-14,10,6,9,-32,16,33,1,13,4,-19,45,-127,24,-17,-53,15,-3,-4,-12,6,-29,23,-18,50,54,-5,12,3,123,-41,47,-35,-21,-18,75,17,-6,28,-38,19,-4,-42, 
  /* [5][0][][] */ -4,8,4,-6,-13,-20,-2,103,68,-19,4,-30,-28,26,26,30,-29,-11,-10,-29,-43,-14,-12,-40,9,7,18,90,59,13,54,50,-46,29,-6,3,-47,-66,-21,-21,-38,-19,-4,1,74,4,0,20,15,0,-8,4,-26,-25,-2,-2,-29,-32,-2,36,-43,38,-21,-41,10,16,-15,3,0,22,16,-10,31,7,25,-9,-10,25,9,122,-8,-47,24,44,-1,9,10,-25,-4,-15,20,-107,-41,-28,-14,-127, 
  /* [6][0][][] */ -28,-4,-3,-53,-9,-37,-9,9,0,25,-15,-1,23,-59,2,-14,-18,-60,21,14,-2,2,-14,36,78,-9,-9,22,8,2,-3,-11,-14,7,-35,6,14,2,30,21,-12,-31,-46,-17,18,-20,23,-127,23,27,43,8,8,-2,-7,-54,21,-21,3,9,36,21,1,6,43,79,30,-31,-20,-9,22,-36,17,9,57,-6,-38,32,5,10,-18,-9,60,-27,-5,66,12,-11,16,16,-35,-3,-27,0,-9,7, 
  /* [7][0][][] */ 24,9,28,-20,1,-9,2,-20,-14,-8,-21,-4,-13,-77,39,-1,-12,-22,-20,-2,6,-15,-28,0,-24,-8,13,-6,6,4,0,1,-9,1,-19,-22,-2,10,-19,18,-3,0,-14,34,8,17,-13,71,1,26,-1,-27,-24,7,2,-56,25,-4,9,2,7,-4,-19,2,-24,36,18,-17,-9,-5,8,50,-15,1,-2,14,44,22,-1,-9,5,-34,43,-5,-33,127,-3,9,-40,-28,-3,21,-24,2,-6,7, 
  /* [8][0][][] */ -74,40,-57,2,45,-27,-8,18,7,74,-48,18,5,32,72,-29,-21,53,-85,31,20,37,-13,5,-45,-25,12,20,58,-92,-19,-8,35,15,2,-3,-26,44,-31,47,6,15,8,-127,-33,-4,49,-20,-49,23,14,83,-117,85,7,-8,14,-26,-38,-15,-1,-41,12,15,-22,42,32,-23,-2,4,50,88,-25,33,41,30,5,-92,-8,-24,-16,-20,20,5,-67,26,9,-39,4,49,-27,16,26,-7,-20,-9, 
  /* [9][0][][] */ 29,-77,-29,-24,7,10,-25,21,25,-8,0,17,-71,-23,-2,15,-21,10,43,-22,-27,6,-26,-52,41,9,23,-7,-38,-36,-25,-4,-6,9,11,40,-1,21,-36,20,6,12,-14,-100,15,-5,15,-124,-38,2,6,26,-24,-8,-9,13,-36,10,-6,16,14,16,2,23,19,127,42,49,3,-16,14,-38,-15,4,-33,7,80,-14,15,10,-23,5,24,-40,1,39,-18,8,-37,38,-36,-1,-7,-6,12,-20, 
  /* [10][0][][] */ 27,55,-6,35,60,-111,-9,-34,3,43,25,-1,-6,17,13,-66,3,34,-14,37,-89,2,-2,-15,-72,-25,-58,67,22,3,-7,30,-6,-18,20,-4,89,-11,-3,-14,-22,68,40,-14,-41,-21,-37,20,-11,-20,-34,-10,-6,-2,-2,5,10,18,-30,-21,2,14,-15,30,20,34,44,32,39,3,46,61,-57,-22,-42,-23,-7,38,-33,17,25,-6,-67,-39,58,-55,81,-13,-24,9,15,0,75,35,-11,-127, 
  /* [11][0][][] */ 49,38,-24,21,-4,0,50,9,-10,-6,-25,-11,-10,5,36,-2,-10,-2,-104,5,-3,11,6,3,-44,-22,0,13,6,23,-6,-11,-5,5,0,23,4,15,2,21,-2,26,61,-101,33,-33,-3,1,-127,12,27,-48,21,18,-14,7,-19,-21,11,-1,24,-13,-7,12,-46,59,-18,13,14,3,24,10,-52,-27,21,30,0,-31,-47,9,11,-2,89,52,1,-7,-18,0,5,27,-22,-6,-6,8,-20,6, 
  /* [12][0][][] */ -29,4,-2,-3,-19,42,19,11,127,7,-11,4,1,0,-35,-40,31,24,4,59,59,26,-17,-28,13,14,21,-38,-96,8,41,-35,8,-3,2,-18,2,-1,28,-4,-32,-17,0,16,-7,32,0,-22,11,13,-34,8,1,-12,15,-6,69,-17,19,19,21,-23,13,-22,-20,33,-34,6,-12,0,-36,-36,11,16,-66,14,30,-15,21,-72,-9,4,47,44,-21,-2,-19,-22,11,18,1,45,-12,-13,14,18, 
  /* [13][0][][] */ 34,-11,-25,36,39,-11,4,-2,-10,2,-1,-5,3,-5,18,-17,13,-64,-28,18,-10,-14,14,11,4,10,2,-2,-10,-42,-15,17,-6,8,-1,39,20,-1,18,15,-8,10,23,36,16,15,-16,-127,26,-1,10,8,-17,4,21,3,-14,12,18,9,2,19,-11,16,-6,-18,-19,-55,12,18,-1,-25,-11,36,-4,22,-29,7,12,10,20,-8,-12,15,17,24,13,22,-9,6,23,-10,1,19,-7,-7, 
  /* [14][0][][] */ -124,-59,36,48,45,-20,-34,8,-29,9,-14,16,88,4,-127,7,83,-14,-2,36,-7,-5,43,16,-116,3,40,-20,-45,-83,-28,4,12,11,33,-77,46,57,-10,31,20,29,-4,-45,11,124,73,55,-123,40,18,41,-46,-1,33,12,3,8,59,60,46,46,20,54,-2,-20,-53,43,5,87,-63,-72,-86,-5,-11,52,-18,53,92,-2,63,25,26,22,39,-2,49,22,29,50,71,-20,13,22,26,-39, 
  /* [15][0][][] */ 93,-14,51,4,3,59,23,-18,-16,54,6,7,-106,-7,-21,26,-2,56,50,-10,3,17,-78,83,25,6,51,9,37,38,-77,-74,5,-47,39,4,32,-41,-40,-119,-21,33,-2,41,3,60,-28,-28,112,-32,-32,22,45,-127,64,-116,22,-63,16,17,-120,2,11,22,90,0,-51,50,-21,80,-6,17,55,22,24,-1,35,-54,69,-3,-20,-3,33,92,-24,11,-7,-46,4,1,59,-12,-75,66,35,-15, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.021016577258706093, 0.009885074570775032, 0.012288160622119904, 0.0095091350376605988, 0.015439084731042385, 0.013912097550928593, 0.011288134381175041, 0.020291730761528015, 0.0081086475402116776, 0.0092157917097210884, 0.015442236326634884, 0.026559023186564445, 0.019658006727695465, 0.017573075369000435, 0.017493201419711113, 0.01209704577922821, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11249, -8896, 3319, 55404, -1169, -4481, -11180, 3644, -2419, 1102, 3049, -1743, 913, -5920, 5823, -5902, -785, 16662, 26354, 2274, 4174, -3216, -651, -377, 17863, -1593, -1038, -3746, -5568, -7665, 5370, -9490, 367, -957, -802, 14873, 1490, -3347, 18394, 1017, -348, 2067, -9663, -7657, -7300, 68266, 569, 16903, 39700, -12940, -306, 8084, 7520, -325, -7893, 1812, -12737, 1429, 2325, -7094, -1207, -1107, -12893, -236, 2234, 15019, 28763, 21027, -11595, -195, -11651, -1370, 37329, 8376, -75, 952, 18216, 34379, -951, -5837, -1357, -5236, 720, -2761, 756, 2089, 1311, -670, 2197, -3101, 334, -1131, -511, -30, 426, 50523, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016660650726407766, 0.00011643875041045249, 0.00024319585645571351, 3.8332553231157362e-05, 0.00014621262380387634, 0.00016256954404525459, 0.00028582956292666495, 7.7288445027079433e-05, 0.00020666082855314016, 0.00041948223952203989, 0.00014253756671678275, 0.00033874259679578245, 0.00011084305879194289, 0.00038370053516700864, 0.00016904767835512757, 0.00016617312212474644, 9.3780239694751799e-05, 0.0003025805635843426, 6.008148193359375e-05, 0.00025915264268405735, 4.1581442928873003e-05, 0.00016769544163253158, 0.00012769261957146227, 0.00034603962558321655, 0.00019222244736738503, 0.00021574037964455783, 0.00013054082228336483, 0.00017426804697606713, 0.0001218539327965118, 0.00010240220581181347, 0.00014073969214223325, 0.00016062091162893921, 0.00011802325025200844, 0.00011509464093251154, 0.00017715507419779897, 0.00015765463467687368, 0.0003334071661811322, 0.00012407309259288013, 5.0522125093266368e-05, 0.00013515002501662821, 0.00019918312318623066, 0.00029881464433856308, 0.00037116982275620103, 0.00016848085215315223, 0.00018833865760825574, 4.9471094826003537e-05, 0.00019722995057236403, 0.00020241575839463621, 6.7709341237787157e-05, 0.00019273378711659461, 0.00018544208433013409, 0.00014703835768159479, 0.00022000294120516628, 0.00026419828645884991, 0.00017727728118188679, 0.00047790553071536124, 0.00030765999690629542, 0.00019767733465414494, 0.00010189082968281582, 7.4007446528412402e-05, 0.00030845482251606882, 0.00013462181959766895, 0.00028063490753993392, 0.00011748412362067029, 0.00023056867939885706, 0.00019839993910863996, 9.1916292149107903e-05, 8.2516424299683422e-05, 0.00035127252340316772, 0.00021752044267486781, 0.00016741701983846724, 0.00013039512850809842, 0.00015626322419848293, 0.00014907943841535598, 0.00014298270980361849, 0.00024293777823913842, 0.00052781426347792149, 5.0651386118261144e-05, 0.00024918315466493368, 0.00033640355104580522, 0.00014920641842763871, 0.00041047611739486456, 0.00012905504263471812, 0.00013518292689695954, 0.00012156595767010003, 9.4615767011418939e-05, 0.00011905020801350474, 0.00015689872088842094, 0.00019976131443399936, 0.00011487289884826168, 0.00018176998128183186, 0.00010224635479971766, 0.00013305676111485809, 0.00044815277215093374, 0.0029503293335437775, 7.5795302109327167e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,6,-20,106,-18,24,-62,-54,16,-8,98,-9,5,-9,-4,59,6,16,-35,3,73,1,33,-33,2,17,44,47,21,13,24,48,-7,27,9,-14,5,49,-56,-25,20,9,27,17,-84,-56,25,-5,-10,-21,-7,-7,51,6,-8,2,-3,-35,28,-31,27,-2,127,27,-14,-12,8,-52,66,36,2,-7,78,-32,70,1,18,-127,31,66,-1,16,127,-16,38,30,-30,-17,34,-6,-15,81,-1,18,-2,15, -49,12,-9,10,52,-7,-10,-127,36,13,-127,-5,-14,-14,4,97,18,-30,-17,-17,78,-97,127,26,-61,-31,-105,-15,28,36,-48,18,117,11,-14,0,-24,127,-60,-127,8,-19,-29,13,46,-127,127,-44,-75,51,49,7,40,-63,32,58,36,43,-102,84,127,34,2,-21,41,-39,-97,-2,36,-30,-17,47,-48,-47,106,-5,-29,-60,-30,63,-70,61,-17,8,-11,49,55,-41,-28,54,-14,72,-127,-33,24,-127, 0,-5,-23,-73,7,19,37,21,-5,-2,5,61,2,-13,-11,8,-13,17,-18,17,8,24,26,-32,1,-30,10,12,-8,5,46,-78,44,16,9,-22,11,5,-28,-21,7,3,-15,6,24,-30,21,0,8,-8,5,-6,6,5,-4,9,-8,46,6,-3,11,-19,2,-17,-28,-18,31,-50,-109,-7,43,-16,-127,-23,-11,15,11,-11,7,11,-16,23,-37,-4,-42,21,26,36,-27,-16,24,-12,21,6,-2,-45, 
  /* [0][1][][] */ -40,58,-17,38,-86,-15,-10,-45,26,94,-46,-21,-29,-25,-7,63,127,-24,-90,-14,60,-127,-28,16,-34,-47,-127,-6,36,36,-49,28,-127,-75,-58,4,64,-3,-50,48,-20,85,0,-3,33,-55,-12,-32,127,43,-4,22,45,10,-36,-17,32,9,-124,127,-35,-88,23,127,-59,-35,-89,125,-38,127,-19,55,-35,-53,37,7,-34,-72,127,50,127,37,6,-2,127,27,-99,49,-38,-34,-103,41,96,102,28,-58, 127,127,127,127,-46,-127,127,22,127,-127,16,-127,-103,127,127,127,-15,-127,-61,-127,127,24,-66,127,127,127,-56,-127,127,127,-127,127,-10,-127,-125,127,-127,-44,97,113,-127,-127,127,127,127,-121,-107,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-106,-29,-71,-68,127,127,-69,127,127,-106,-127,127,-42,127,-127,-127,-127,125,-73,127,-45,127,80,127,-38,-127,-26,-108,-127,-126,-23,-127,-22,-127,-127,115, -23,65,-38,3,127,72,-22,47,6,25,-12,-5,-24,-31,-14,-7,-104,-22,-127,38,35,78,-11,-115,-33,-41,125,73,9,35,74,9,124,-49,127,-2,56,6,-94,15,35,23,-22,1,-23,-54,-13,-42,81,15,-12,41,-5,-4,-74,-12,26,21,127,-90,3,127,0,-36,-112,-28,-74,99,15,-16,117,25,-19,-56,12,46,-28,-10,-43,-4,-48,7,47,25,-91,34,127,-49,31,-22,127,-9,-112,35,34,17, 
  /* [0][2][][] */ -5,-38,-21,-60,-6,14,39,30,-3,11,-21,53,25,-35,-7,8,41,3,8,20,-8,31,-15,-26,2,-25,8,4,-8,-6,50,-74,-39,66,-29,-25,31,-36,-65,16,9,9,-35,18,12,-80,-13,-1,-9,6,17,-6,7,1,-21,7,0,44,-49,34,-7,-11,4,17,-7,-10,23,-54,-57,11,-22,-15,-118,-31,-1,18,14,-11,58,21,21,21,-41,16,11,24,-22,9,4,26,23,-5,20,40,-7,-31, -29,-8,-27,24,-46,73,-25,64,3,-6,54,-11,127,-7,-18,-20,0,-38,-62,23,-23,81,-43,-112,-47,-48,101,71,14,43,55,-1,-123,63,-15,-23,-27,-29,-127,-4,45,-13,-15,35,-26,-46,-19,-48,-61,29,68,25,-11,-80,30,53,18,27,73,-56,19,-57,-8,0,18,-26,-127,-56,-11,-26,-62,21,34,-45,-32,-7,-44,25,-53,5,50,36,19,12,5,61,-93,127,14,127,-31,-18,115,-21,46,81, -9,-31,-26,29,13,65,-44,12,3,-6,1,16,14,-51,-11,-13,-44,-5,13,18,-20,7,-19,3,-5,19,-3,54,-1,-5,37,29,15,43,19,-22,-5,-28,-30,7,11,-11,21,8,-72,-36,-13,5,-1,-16,-1,-4,-9,8,-17,-4,-1,-49,12,-30,-23,51,10,-30,-12,-3,36,-56,47,7,56,-23,29,-55,-20,22,11,12,-3,23,-31,33,90,-13,-17,53,40,-10,107,13,2,-18,10,-23,-7,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0070807766169309616, 0.0049486467614769936, 0.010335823521018028, 0.0016291334759443998, 0.0062140366062521935, 0.0069092055782675743, 0.012147756293416023, 0.0032847588881850243, 0.0087830852717161179, 0.017827995121479034, 0.0060578463599085808, 0.014396560378372669, 0.0047108298167586327, 0.016307272017002106, 0.0071845259517431259, 0.0070623578503727913, 0.0039856601506471634, 0.012859673239290714, 0.0025534629821777344, 0.01101398654282093, 0.0017672112444415689, 0.007127055898308754, 0.0054269363172352314, 0.014706684276461601, 0.0081694535911083221, 0.0091689657419919968, 0.0055479849688708782, 0.0074063921347260475, 0.0051787919364869595, 0.0043520936742424965, 0.0059814369305968285, 0.0068263886496424675, 0.005015987902879715, 0.004891522228717804, 0.0075290906243026257, 0.0067003220319747925, 0.014169804751873016, 0.0052731060422956944, 0.002147190272808075, 0.0057438760995864868, 0.0084652826189994812, 0.012699621729552746, 0.015774717554450035, 0.0071604358963668346, 0.008004392497241497, 0.0021025214809924364, 0.008382272906601429, 0.0086026694625616074, 0.0028776470571756363, 0.0081911860033869743, 0.0078812884166836739, 0.0062491297721862793, 0.0093501247465610504, 0.011228427290916443, 0.0075342841446399689, 0.020310984924435616, 0.013075550086796284, 0.0084012867882847786, 0.0043303603306412697, 0.0031453163828700781, 0.013109329156577587, 0.005721427034586668, 0.0119269834831357, 0.0049930750392377377, 0.0097991684451699257, 0.008431997150182724, 0.0039064423181116581, 0.0035069480072706938, 0.014929082244634628, 0.0092446189373731613, 0.007115222979336977, 0.0055417926050722599, 0.0066411867737770081, 0.0063358759507536888, 0.0060767647810280323, 0.010324855335056782, 0.022432105615735054, 0.002152683911845088, 0.010590284131467342, 0.014297151006758213, 0.0063412729650735855, 0.017445234581828117, 0.0054848394356667995, 0.0057452740147709846, 0.0051665529608726501, 0.0040211700834333897, 0.0050596338696777821, 0.0066681955941021442, 0.0084898555651307106, 0.0048820981755852699, 0.0077252238988876343, 0.0043454701080918312, 0.0056549124419689178, 0.019046492874622345, 0.12538899481296539, 0.0032213001977652311, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18406, 1138, 9713, -742, 6065, 5670, 15225, 5854, -1501, 22943, 6956, 1746, 9154, 44868, -471, -2530, 12450, 15267, 2075, -205, -830, 14834, 4887, 3229, 11046, 4126, 5077, 5495, 92, -24, 6918, 11926, 16415, 1656, 7775, -523, 18638, 6761, 1117, 4844, 916, 11680, 15345, 4138, 3425, 13399, 19641, 5287, 5108, 3627, 340, -847, 21406, 7646, 10474, 19341, -206, 6177, 3665, 4924, 17159, 7230, 3495, 7511, 7322, 5141, 4840, -1011, 21973, 6752, 15115, -1396, -1766, 3150, 1283, 4510, 26707, 21446, 17229, -2424, 7819, -7424, -2180, 518, 7493, 6451, 6775, 5056, 13357, 4775, 7239, 4600, 15306, 21782, -9531, 14028, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001418935862602666, 0.000268784468062222, 0.00013938693155068904, 0.00077756494283676147, 0.00026910522137768567, 0.00016557806520722806, 0.0002062682033283636, 0.00060677388682961464, 0.00031935668084770441, 7.8969060268718749e-05, 0.00020637198758777231, 0.00045313153532333672, 0.00029927922878414392, 0.00010792686225613579, 0.00018091588572133332, 0.00026046071434393525, 0.00017934887728188187, 0.00015284774417523295, 0.00021377987286541611, 0.00058206921676173806, 0.00038019588100723922, 0.0001691522920737043, 0.00029970021569170058, 0.00024357423535548151, 0.00016020752082113177, 0.00050290086073800921, 0.00027990355738438666, 0.00016918592154979706, 0.0006508255610242486, 0.00034025285276584327, 0.00021103420294821262, 0.00015614797302987427, 0.0001201612176373601, 0.00064785580616444349, 0.00021790493337903172, 0.00054553104564547539, 0.00012068920477759093, 0.0003832707297988236, 0.00040095843723975122, 0.00018916558474302292, 0.00051767256809398532, 0.00016319048881996423, 0.00013990531442686915, 0.00017747408128343523, 0.00032399271731264889, 0.0002429413580102846, 0.00014465532149188221, 0.00027222360949963331, 0.00031148092239163816, 0.0002554425154812634, 0.00044233020162209868, 0.00077645573765039444, 0.00012556751607917249, 0.00021020325948484242, 0.00022108371194917709, 9.6390889666508883e-05, 0.00038501617382280529, 0.00027956170379184186, 0.00021502916933968663, 0.00032996342633850873, 9.8551252449396998e-05, 0.00019328042981214821, 0.00029855119646526873, 0.00036577152786776423, 0.00015037003322504461, 0.00021837609529029578, 0.00039912239299155772, 0.00034760806011036038, 0.00012193230213597417, 0.00016944952949415892, 0.00012909327051602304, 0.00033543023164384067, 0.0002251268015243113, 0.00041463598608970642, 0.00032633953378535807, 0.00028484052745625377, 8.8187094661407173e-05, 0.00020738564489874989, 9.6799332823138684e-05, 0.00049606454558670521, 0.0001439186162315309, 0.00027765755658037961, 0.0001790651585906744, 0.00046666531125083566, 0.00021126375941094011, 0.00023804428928997368, 0.00023851191508583724, 0.00027673051226884127, 0.00012579254689626396, 0.00033254516893066466, 0.00019773509120568633, 0.0003742600092664361, 0.00013681879499927163, 0.00012659862113650888, 0.00030664668884128332, 0.00023497820075135678, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 58,-39,107,118,60,-31,35,-15,127,-46,-78,-77,48,79,-59,-82, 
  /* [1][0][][] */ 22,95,-23,-10,76,7,14,21,62,64,-6,115,10,-45,127,-67, 
  /* [2][0][][] */ 16,-57,-1,19,-54,66,-37,97,-66,-71,7,84,-5,-127,68,-102, 
  /* [3][0][][] */ 127,120,-9,34,-126,-22,-64,-25,-8,-11,102,-87,-50,98,-29,-35, 
  /* [4][0][][] */ -9,-4,12,7,-34,38,-14,61,-58,-47,-2,-10,4,-127,26,11, 
  /* [5][0][][] */ 113,-43,-20,19,-16,-83,-7,29,-7,15,-127,12,14,-7,4,23, 
  /* [6][0][][] */ -127,-56,-16,77,-44,2,-41,22,-106,-64,-60,-36,29,39,-6,97, 
  /* [7][0][][] */ -15,29,-82,38,42,-127,-9,33,19,-31,22,-13,3,0,-29,1, 
  /* [8][0][][] */ 29,-52,1,-11,21,38,-61,-65,-8,18,-69,17,-127,1,2,10, 
  /* [9][0][][] */ 37,-62,82,127,5,18,-14,-50,121,-103,-11,-6,-2,68,-96,28, 
  /* [10][0][][] */ -82,-66,-53,-46,81,25,34,93,127,-58,-110,9,104,-92,-94,84, 
  /* [11][0][][] */ 58,-15,-127,22,60,35,-30,47,-20,-26,-17,3,-7,22,-41,-5, 
  /* [12][0][][] */ 127,-92,1,34,-37,-57,-70,-16,30,3,-117,-17,-67,-9,-23,73, 
  /* [13][0][][] */ 91,-66,28,-76,95,25,-108,-126,76,-127,14,43,47,11,25,35, 
  /* [14][0][][] */ -44,27,-106,-48,58,-127,59,-60,37,43,-3,-108,24,90,-22,42, 
  /* [15][0][][] */ 28,-9,81,50,63,-36,-54,-10,19,-68,-67,5,-127,-46,-30,40, 
  /* [16][0][][] */ -106,69,13,26,-6,106,67,95,-4,42,127,10,3,15,20,-43, 
  /* [17][0][][] */ -11,-7,-57,-30,-44,10,52,68,-18,127,-16,5,1,76,70,2, 
  /* [18][0][][] */ -17,127,-54,-15,-6,7,69,-61,27,118,-28,98,1,-58,31,-85, 
  /* [19][0][][] */ 4,-10,32,18,0,48,5,18,11,14,-42,-5,-127,-8,-14,39, 
  /* [20][0][][] */ 93,-60,0,-83,-34,28,28,-84,-52,32,-127,-27,57,-8,42,-8, 
  /* [21][0][][] */ 37,2,127,30,-1,59,21,5,8,26,-7,-5,-23,81,2,-15, 
  /* [22][0][][] */ 26,7,36,-2,-8,7,18,127,25,-18,19,34,14,37,22,30, 
  /* [23][0][][] */ -22,29,-77,5,12,-127,17,49,3,-26,-25,2,-48,10,-7,46, 
  /* [24][0][][] */ 39,-53,13,-60,68,7,-46,-19,42,26,64,99,-59,93,127,41, 
  /* [25][0][][] */ -127,-75,-50,5,16,2,16,-39,-56,15,-79,7,13,39,24,55, 
  /* [26][0][][] */ 11,15,31,-15,-8,17,-35,47,-82,-63,0,3,-3,-127,30,-9, 
  /* [27][0][][] */ -108,45,-36,30,45,-10,-13,20,33,-50,127,38,-26,15,-4,-7, 
  /* [28][0][][] */ -15,7,4,27,-7,-5,19,65,15,15,-32,-15,-127,-19,-5,35, 
  /* [29][0][][] */ -11,61,38,-39,46,-16,23,-28,-127,34,-28,12,0,32,-93,3, 
  /* [30][0][][] */ -3,-6,-127,-19,27,-78,1,15,-14,-17,-19,-18,-37,-21,17,11, 
  /* [31][0][][] */ 127,-31,-115,7,46,4,-39,58,-23,-11,-85,-34,18,-20,-73,32, 
  /* [32][0][][] */ -127,55,14,40,8,83,35,33,17,10,102,25,-20,4,-12,-27, 
  /* [33][0][][] */ 11,-11,127,-30,-82,23,17,-40,-15,19,-1,26,3,20,32,36, 
  /* [34][0][][] */ -36,-3,-30,-121,53,35,8,-27,-22,-58,-28,-127,-17,12,51,20, 
  /* [35][0][][] */ 15,-37,38,46,39,-21,16,-8,-108,32,-15,22,-6,127,-38,-25, 
  /* [36][0][][] */ -127,51,-22,-15,-4,22,19,81,-24,14,115,-11,0,16,-1,-27, 
  /* [37][0][][] */ -30,23,127,-50,-50,-63,13,-37,37,9,5,2,4,-51,61,7, 
  /* [38][0][][] */ 5,-27,-8,28,65,-57,-94,2,-14,-35,95,-15,127,54,-3,-6, 
  /* [39][0][][] */ -18,-15,-4,-70,-44,-127,45,84,-55,-37,8,-69,14,49,35,82, 
  /* [40][0][][] */ 64,-15,-16,-9,-16,98,-20,17,25,-5,15,3,127,20,-33,-8, 
  /* [41][0][][] */ -2,12,-14,-127,26,-15,-22,-49,-6,-38,14,-52,-3,-8,-12,22, 
  /* [42][0][][] */ 57,36,12,107,-82,-7,-99,1,-59,-75,57,-71,-46,127,-17,-1, 
  /* [43][0][][] */ 15,110,-28,127,36,26,30,-78,-30,73,-7,27,-5,-35,34,24, 
  /* [44][0][][] */ -14,-25,-127,22,57,87,-48,57,-13,-19,34,-16,-6,-23,-77,2, 
  /* [45][0][][] */ 4,6,-25,-127,-34,0,49,-8,-24,21,-32,14,12,-102,31,-36, 
  /* [46][0][][] */ 1,30,76,-21,29,34,-55,42,21,-61,-15,15,-5,127,46,-21, 
  /* [47][0][][] */ 3,-28,28,-26,-39,30,-60,58,-21,-23,22,35,15,-127,33,14, 
  /* [48][0][][] */ 4,-8,11,-127,-2,-13,-1,5,14,-15,20,-14,5,40,-1,53, 
  /* [49][0][][] */ 26,-35,-4,127,104,13,5,43,-53,21,38,52,-17,32,123,-7, 
  /* [50][0][][] */ -31,-20,57,-39,8,92,-21,-69,44,-30,127,22,86,1,-4,-51, 
  /* [51][0][][] */ 35,43,14,15,25,1,-48,16,51,-2,-3,127,17,36,37,-59, 
  /* [52][0][][] */ -15,56,127,-10,13,-58,5,-56,-35,-7,17,23,4,98,-116,-11, 
  /* [53][0][][] */ -21,-14,-40,-127,-52,3,21,-32,-19,35,11,-14,28,-18,46,14, 
  /* [54][0][][] */ 3,11,-34,-54,32,13,-18,13,82,-29,11,-24,-12,127,13,24, 
  /* [55][0][][] */ 3,-25,-36,-23,41,-48,-40,-127,26,-96,3,8,-37,-59,-54,-37, 
  /* [56][0][][] */ 38,45,28,64,2,-16,19,127,17,-22,4,-26,75,-17,-56,34, 
  /* [57][0][][] */ 79,-19,127,-28,-52,-41,-15,-42,29,10,-88,18,38,-23,45,12, 
  /* [58][0][][] */ 87,107,-8,91,-127,-3,-13,29,-37,10,94,-32,-84,-76,-40,-67, 
  /* [59][0][][] */ 127,-50,-5,12,-44,-15,7,20,-28,44,-119,-16,2,-7,-2,23, 
  /* [60][0][][] */ -127,25,10,-19,18,-8,4,32,24,-4,121,-15,-28,5,20,-6, 
  /* [61][0][][] */ -79,51,35,17,27,4,-72,-19,127,-94,63,-25,51,-8,-71,-45, 
  /* [62][0][][] */ -32,-49,-127,74,108,87,-38,111,45,-88,56,-16,-113,22,-111,-25, 
  /* [63][0][][] */ -42,33,127,-49,-66,-43,45,-32,4,26,18,6,-13,-57,63,3, 
  /* [64][0][][] */ 32,67,-6,36,57,-22,60,-127,-31,82,-11,-11,-34,-104,-9,26, 
  /* [65][0][][] */ 25,16,14,-32,73,-4,-17,-127,-22,-84,-37,-49,3,-24,47,22, 
  /* [66][0][][] */ -127,1,-14,8,-44,22,13,-37,-70,-29,-74,43,56,26,49,71, 
  /* [67][0][][] */ -5,-59,19,127,14,7,-34,36,53,5,6,-1,-15,-27,-86,-32, 
  /* [68][0][][] */ 1,-10,-21,127,-46,-21,6,-18,-49,26,7,-20,-24,-62,-10,-33, 
  /* [69][0][][] */ 92,85,29,122,33,-2,54,-127,1,110,25,72,8,-37,51,-1, 
  /* [70][0][][] */ -31,-95,56,-80,127,-24,25,7,73,-25,118,-22,30,115,124,114, 
  /* [71][0][][] */ 18,49,9,92,55,-127,-37,99,48,-95,16,20,11,-50,-58,32, 
  /* [72][0][][] */ -127,-68,-19,44,21,31,-35,14,-51,-44,-99,32,53,25,4,102, 
  /* [73][0][][] */ -13,-9,-12,48,42,-22,-8,-30,76,-3,-2,4,9,127,-52,-40, 
  /* [74][0][][] */ 51,-44,20,-6,-42,-24,41,-2,-28,8,-96,6,-127,3,27,38, 
  /* [75][0][][] */ -28,-20,-21,127,-36,8,-2,-21,-68,24,-14,-29,-13,-51,-3,-22, 
  /* [76][0][][] */ -16,-6,10,47,44,20,-4,-120,31,-127,23,22,-36,-14,49,-58, 
  /* [77][0][][] */ 127,-41,55,80,-48,31,-29,10,53,11,-60,87,41,16,-64,25, 
  /* [78][0][][] */ -13,2,54,16,12,6,-37,48,58,-13,-15,-43,2,127,43,-41, 
  /* [79][0][][] */ 0,26,51,16,43,59,-63,-52,7,-41,72,-8,127,-23,-32,-32, 
  /* [80][0][][] */ -127,-42,-91,108,-9,19,45,-25,-92,27,-58,-6,27,-100,-9,37, 
  /* [81][0][][] */ 76,26,-75,11,93,75,-49,-39,-17,-127,-21,-112,-30,-13,-107,44, 
  /* [82][0][][] */ 112,115,7,46,-123,-11,-78,-30,-87,6,127,-52,-62,92,-12,-44, 
  /* [83][0][][] */ 127,39,10,-26,13,-16,-11,28,38,11,73,-30,-47,-26,-19,-75, 
  /* [84][0][][] */ 21,-51,-44,-26,48,22,4,-127,-28,-47,22,5,-13,-11,1,-28, 
  /* [85][0][][] */ -36,16,-43,-49,9,2,91,51,-11,127,10,-38,9,38,71,-33, 
  /* [86][0][][] */ 62,-47,12,11,6,-18,-8,-6,11,-11,-127,13,17,27,0,34, 
  /* [87][0][][] */ -27,26,1,-32,-20,58,-22,62,-27,-34,25,11,9,-127,12,18, 
  /* [88][0][][] */ 0,-7,-101,-58,88,0,-33,-127,2,-33,-12,-29,-38,-15,15,-21, 
  /* [89][0][][] */ 31,-13,22,-127,22,-4,-52,113,68,-72,32,8,5,56,28,62, 
  /* [90][0][][] */ 5,7,-51,53,68,-19,108,-86,79,127,-75,20,46,-4,-6,-14, 
  /* [91][0][][] */ 61,-24,-34,-19,6,-127,-17,4,-13,-17,-60,2,46,-18,8,27, 
  /* [92][0][][] */ 41,0,127,102,55,-4,9,28,-77,49,-78,24,20,88,6,-24, 
  /* [93][0][][] */ 127,-7,-33,-16,-33,-47,11,39,-26,40,-111,-17,-21,21,-22,57, 
  /* [94][0][][] */ 21,-11,35,71,110,-36,-24,38,-4,-33,-10,46,-18,127,-22,-77, 
  /* [95][0][][] */ -105,20,31,42,12,20,12,1,1,5,127,-9,-30,24,-14,-14, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00050102599197998643, 0.00094907742459326982, 0.00049217499326914549, 0.0027455803938210011, 0.00095021002925932407, 0.00058465584879741073, 0.00072833261219784617, 0.0021425173617899418, 0.0011276478180661798, 0.00027883960865437984, 0.00072869908763095737, 0.0016000065952539444, 0.0010567543795332313, 0.00038108954322524369, 0.00063881365349516273, 0.00091968628112226725, 0.00063328054966405034, 0.00053970509907230735, 0.00075485632987692952, 0.0020552852656692266, 0.0013424708740785718, 0.00059727643383666873, 0.0010582408867776394, 0.00086006015771999955, 0.00056569243315607309, 0.0017757420428097248, 0.0009883389575406909, 0.0005973951774649322, 0.0022980638314038515, 0.0012014321982860565, 0.00074516137829050422, 0.00055135821457952261, 0.00042428902816027403, 0.0022875776048749685, 0.00076942192390561104, 0.0019262691494077444, 0.00042615336133167148, 0.001353328232653439, 0.001415783422999084, 0.00066794332815334201, 0.0018279007636010647, 0.00057622528402134776, 0.00049400539137423038, 0.00062666065059602261, 0.001144017674960196, 0.00085782544920220971, 0.00051077763782814145, 0.00096122099785134196, 0.0010998385259881616, 0.00090196705423295498, 0.0015618670731782913, 0.0027416637167334557, 0.00044337863801047206, 0.00074222730472683907, 0.00078064616536721587, 0.00034035605494864285, 0.0013594913762062788, 0.00098713184706866741, 0.00075926759745925665, 0.0011651002569124103, 0.00034798428532667458, 0.00068247283343225718, 0.0010541836963966489, 0.0012915385887026787, 0.00053095631301403046, 0.00077108555706217885, 0.0014093003701418638, 0.0012274034088477492, 0.00043054271372966468, 0.00059832597617059946, 0.00045582806342281401, 0.0011844035470858216, 0.00079492229269817472, 0.001464078901335597, 0.0011523042339831591, 0.0010057713370770216, 0.00031138845952227712, 0.00073227833490818739, 0.00034179826616309583, 0.0017516029765829444, 0.00050817633746191859, 0.00098040828015655279, 0.00063227873761206865, 0.0016477942699566483, 0.00074597191996872425, 0.0008405339322052896, 0.00084218510892242193, 0.00097713491413742304, 0.00044417325989343226, 0.001174216391518712, 0.00069820223143324256, 0.0013215113431215286, 0.00048310687998309731, 0.00044701949809677899, 0.0010827688965946436, 0.00082970759831368923, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -39291, 8053, 1880, -7935, 1142, -5791, -7270, -46318, 3576, 24690, 36758, -10365, -1532, -21166, 38832, -51206, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.000735293491743505, 0.00077157712075859308, 0.00090823357459157705, 0.00098209537100046873, 0.00078141828998923302, 0.0010694088414311409, 0.0011553231161087751, 0.00061414774972945452, 0.00059722643345594406, 0.00075335626024752855, 0.00087894289754331112, 0.00068063754588365555, 0.00099130591843277216, 0.0012126417132094502, 0.00056823209160938859, 0.00061674497555941343, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -14,3,-27,8,16,-4,0,104,-49,18,34,-5,17,-21,-11,12,14,-13,-8,-3,65,-3,22,127,-19,87,-9,-17,23,-14,23,-32,-19,52,21,-45,23,47,19,-15,-109,-26,14,39,38,28,-126,-51, 
  /* [1][0][][] */ -33,-16,22,16,-25,6,0,53,-65,-33,3,-52,-18,-20,-1,-3,-22,127,-8,19,3,10,-25,-12,23,-40,16,24,-34,-92,-39,13,-25,-2,28,-3,-8,-37,-1,20,-14,-36,127,12,16,-4,19,-8, 
  /* [2][0][][] */ -22,-9,-13,-36,0,-61,5,-22,0,17,16,25,19,8,-16,8,-1,-15,-22,-13,-3,4,-1,-127,-14,68,-14,10,1,-17,-4,-6,-2,47,6,-3,18,10,27,5,-39,8,-24,-8,-3,-10,18,6, 
  /* [3][0][][] */ -9,29,-2,-25,0,0,5,-4,-18,-5,-3,41,-127,6,0,-1,2,2,-17,-1,-26,6,7,17,-3,-12,5,24,-9,16,5,20,2,6,16,20,-10,20,40,0,11,5,21,-27,13,-4,2,18, 
  /* [4][0][][] */ 34,-36,7,11,20,28,23,-19,-36,7,-13,-23,2,18,3,17,23,-4,-83,-2,-10,5,14,72,3,-23,4,51,8,-80,19,6,9,-33,28,-127,10,36,2,17,-20,17,6,-25,-6,-24,4,12, 
  /* [5][0][][] */ 30,1,-18,64,1,-10,7,22,8,-9,38,12,0,53,4,-2,-24,20,26,2,9,-3,3,-25,1,-51,1,-23,-7,-11,5,9,64,-127,6,33,-9,-17,9,-1,-92,59,22,-2,-6,-1,-106,-4, 
  /* [6][0][][] */ 27,-5,10,5,-12,-7,5,-16,-4,-1,-1,-1,-14,8,4,6,0,-12,127,8,6,8,16,-32,9,0,25,-17,-7,-6,-2,12,-1,-9,31,-38,1,-41,61,12,1,-9,-2,13,-11,3,6,-11, 
  /* [7][0][][] */ -44,-11,-3,39,-2,83,-4,41,5,24,1,127,79,-11,-15,-5,-4,-27,1,-8,-24,-1,-18,69,6,-45,-47,-35,-10,-5,-12,-8,14,-6,-16,6,11,-60,96,1,29,37,-55,-57,9,-5,12,-6, 
  /* [8][0][][] */ -50,-49,7,2,-7,4,0,36,-2,-69,4,41,52,6,0,5,-6,61,-28,-2,-53,15,-8,-15,4,2,2,37,-10,118,-9,27,-3,1,-20,-127,-114,71,33,28,18,-2,113,-24,3,34,23,30, 
  /* [9][0][][] */ -27,12,-3,27,20,-33,-4,-4,62,-43,14,63,-58,5,17,4,-16,18,-38,-21,56,4,-9,-21,2,7,50,-26,17,14,13,5,-3,18,79,-104,-7,-127,-99,2,-37,28,60,9,5,5,-14,-44, 
  /* [10][0][][] */ -19,-16,-29,-127,48,86,12,-19,-12,39,24,2,55,-45,-43,22,45,-36,55,-32,28,-26,39,54,-50,-110,2,-33,44,28,50,-38,-27,-80,18,-6,12,-42,6,-32,-32,-61,-11,10,15,15,17,-37, 
  /* [11][0][][] */ -5,52,-2,60,39,-61,-78,-15,11,58,-10,8,-9,52,-13,-79,15,39,10,-4,-51,-106,16,-2,19,-39,21,-22,59,-33,28,-70,50,-27,-34,-94,90,15,4,-127,-7,72,97,-70,-18,-51,37,25, 
  /* [12][0][][] */ 127,-3,-19,13,-3,20,2,101,24,-11,-57,-19,-2,10,-8,-8,-7,9,-5,-3,3,2,-1,18,-3,12,2,6,-1,16,-1,-5,7,-66,-9,11,-17,-18,-34,-6,-15,-80,6,-125,-62,-16,79,-9, 
  /* [13][0][][] */ 9,1,1,4,5,-8,3,0,-1,9,6,22,-4,7,3,0,7,1,10,3,13,-12,11,-4,0,0,17,127,13,-1,7,-2,5,0,-40,18,6,-2,7,-13,-15,-3,1,6,1,1,-7,-13, 
  /* [14][0][][] */ 65,-22,53,-69,50,27,37,-96,-53,-52,-7,117,-67,-5,65,19,51,28,-51,69,21,22,66,-16,24,57,-29,-109,30,-33,69,50,-6,70,-127,-53,-49,50,89,16,-34,7,53,1,-8,-4,19,-27, 
  /* [15][0][][] */ -12,-48,-69,-40,48,33,80,-39,-4,21,-14,-30,81,31,-113,62,57,47,78,-93,-103,-34,57,-18,-100,53,29,50,64,57,48,-38,29,58,105,125,-16,-117,-4,-39,92,68,127,-55,-10,-25,-19,64, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.031249972060322762, 0.032792028039693832, 0.038599926978349686, 0.041739050298929214, 0.033210277557373047, 0.045449875295162201, 0.049101229757070541, 0.026101280003786087, 0.02538212388753891, 0.032017640769481659, 0.037355072796344757, 0.028927095234394073, 0.042130500078201294, 0.051537271589040756, 0.024149863049387932, 0.026211660355329514, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 4859, 32101, -1708, 52801, 5545, 137075, -2808, 47413, 3040, 29715, 23406, 3776, 908, 30327, 342, -2133, -363, 181, 3079, -1796, 965, -1518, -666, -17213, -4269, 41026, 130404, 98741, 2930, 1182, -1922, -369, 25063, 1052, 34163, -7818, 52773, -2005, 54134, 1471, 1575, 61171, -1253, 3324, 46228, -639, 215, 41332, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7062203015666455e-05, 3.6487443139776587e-05, 0.00014559210103470832, 4.4903135858476162e-05, 0.00013393453264143318, 5.2875340770697221e-05, 0.00012992860865779221, 0.00012599260662682354, 8.2743630628101528e-05, 4.1399722249479964e-05, 4.3380736315157264e-05, 8.7456042820122093e-05, 4.4383770728018135e-05, 3.8914065953576937e-05, 0.00016228806634899229, 0.00017219225992448628, 0.00016463985957670957, 7.7967677498236299e-05, 0.0001019906485453248, 0.00015468086348846555, 7.341768650803715e-05, 0.00019671120389830321, 7.8887722338549793e-05, 0.00010857957386178896, 0.00010985003609675914, 0.00010902147914748639, 2.7911313736694865e-05, 7.3963114118669182e-05, 0.00011895695934072137, 0.00012899919238407165, 0.0001033777734846808, 0.00014235101116355509, 4.7086639824556187e-05, 0.00012230293941684067, 2.8923579520778731e-05, 6.4880536228884012e-05, 0.00010836726141860709, 0.00011808777344413102, 0.00010457695316290483, 0.00010218579700449482, 0.00010062225192086771, 9.509388473816216e-05, 0.000105528328276705, 8.9307846792507917e-05, 3.1319999834522605e-05, 0.00014032644685357809, 0.00011658910079859197, 2.7182944904780015e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-88,96,73,51,-34,107,-64,62,-88,-79,48,52,-42,-73,-90,102,78,50,77,67,-76,-82,51,-34,-41,-65,-66,-68,63,-61,-115,-14,41,70,64,-65,53,-50,-21,50,-75,58,62,-94,11,75,-33, 83,-96,127,87,-79,-69,-58,-84,97,-102,-64,74,80,-110,-97,92,-39,94,82,127,85,-118,54,71,-53,-78,-70,-82,55,81,-30,-127,-87,78,82,84,-81,83,-82,-15,75,-95,82,88,-73,-127,93,-102, 34,-45,70,37,16,-43,-50,-38,43,-34,5,34,29,-80,-55,-1,-55,36,36,70,33,-56,31,25,-30,-46,-46,-24,30,31,89,-90,-86,44,36,34,-29,41,-38,-9,41,-40,35,42,-6,-9,38,-73, 
  /* [0][1][][] */ 93,-111,-41,94,54,-81,127,-90,87,-113,-72,82,83,-109,-14,-127,127,109,75,-39,85,107,-127,74,72,-75,-95,-99,-127,87,-68,-9,-89,70,107,96,-85,79,-80,90,83,-102,87,91,-88,107,93,-92, 127,-127,-64,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,96,-67,127,127,-51,127,127,68,127,127,-127,-127,-127,53,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 62,-75,-32,68,36,-62,-50,-62,57,-43,-61,58,48,-55,-15,11,-63,50,58,-30,58,65,50,65,66,-64,-63,-45,36,55,127,15,-64,70,47,49,-48,61,-59,56,61,-56,52,61,-64,-67,61,-57, 
  /* [0][2][][] */ 44,-51,-45,51,27,-53,63,-44,42,-71,-4,39,55,-72,82,-78,73,51,34,-31,25,-10,-77,31,-23,-45,-50,-48,-75,32,-41,89,-74,36,49,43,-26,36,-41,-87,47,-50,41,45,-24,15,41,-72, 72,-74,-47,82,-56,-65,-73,-67,51,-77,-66,60,74,-47,127,33,-48,59,62,-45,55,-17,41,67,-49,-66,-80,-61,31,61,-25,117,-55,64,57,59,-49,61,-65,-106,69,-68,60,63,-87,49,64,-52, 40,-40,-26,46,28,-21,-19,-34,15,-26,-51,27,30,5,68,25,-35,22,29,-33,28,1,37,42,-24,-27,-50,-24,34,33,62,67,2,34,15,23,-23,30,-28,-55,28,-33,25,30,-66,9,33,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028501434717327356, 0.0015507162315770984, 0.0061876643449068069, 0.001908383215777576, 0.0056922174990177155, 0.0022472019772976637, 0.005521965678781271, 0.0053546857088804245, 0.0035166041925549507, 0.0017594881355762482, 0.001843681326135993, 0.0037168818525969982, 0.00188631028868258, 0.0016538477502763271, 0.0068972427397966385, 0.0073181707412004471, 0.0069971941411495209, 0.0033136261627078056, 0.0043346025049686432, 0.0065739364363253117, 0.0031202514655888081, 0.0083602257072925568, 0.0033527282066643238, 0.0046146316453814507, 0.0046686264686286449, 0.0046334126964211464, 0.0011862308019772172, 0.003143432317301631, 0.0050556706264615059, 0.0054824654944241047, 0.004393555223941803, 0.0060499180108308792, 0.0020011821761727333, 0.0051978747360408306, 0.001229252084158361, 0.0027574228588491678, 0.0046056085266172886, 0.0050187301822006702, 0.0044445204548537731, 0.0043428963981568813, 0.0042764456011354923, 0.0040414901450276375, 0.0044849538244307041, 0.0037955832667648792, 0.0013311000075191259, 0.0059638740494847298, 0.0049550365656614304, 0.0011552751529961824, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 550, 882, 2197, 477, 7022, 15175, 2486, 0, -642, -569, 1030, 884, 2908, 1071, 18988, 2827, 1707, -995, -236, 3428, -1214, 11115, 10266, 9073, 4154, 194, 3206, 3661, 8048, -441, 6853, 5832, 545, -162, 4603, 2768, -1759, 357, -568, 4498, 957, -542, -936, 62, 898, 2650, 711, 825, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00044477733899839222, 0.00077393633546307683, 0.00026631107903085649, 0.0003551435365807265, 0.00031450900132767856, 0.00026883304235525429, 0.00045768675045110285, 0.00029053597245365381, 0.00042293101432733238, 0.00071001035394147038, 0.00097187544452026486, 0.00034483373747207224, 0.00042148077045567334, 0.00071474566357210279, 0.00018733162141870707, 0.00044596384395845234, 0.00027945116744376719, 0.00039506141911260784, 0.00022364927281159908, 0.00027215303271077573, 0.00049336341908201575, 0.00022916763555258512, 0.00035712058888748288, 0.00017145978927146643, 0.00038527292781509459, 0.00031213311012834311, 0.002171823987737298, 0.00051158375572413206, 0.00021214687149040401, 0.00044581896509043872, 0.00037612224696204066, 0.00021439722331706434, 0.00074164621764793992, 0.00026958479429595172, 0.00080324313603341579, 0.00066363788209855556, 0.00079349725274369121, 0.00033734299358911812, 0.0002996633411385119, 0.00041012550354935229, 0.00017150251369457692, 0.00028900528559461236, 0.00030436250381171703, 0.00027786201098933816, 0.0021818648092448711, 0.00051579525461420417, 0.00033681589411571622, 0.0013961141230538487, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-5,70,-34,38,21,-24, 
  /* [1][0][][] */ 29,43,45,26,8,-38,98,127, 
  /* [2][0][][] */ -45,-1,5,5,-127,-21,20,9, 
  /* [3][0][][] */ 94,-9,-8,-127,-125,16,24,-24, 
  /* [4][0][][] */ -127,52,-13,-16,47,-11,56,28, 
  /* [5][0][][] */ -100,-23,21,-10,-127,10,13,86, 
  /* [6][0][][] */ -23,-127,27,-17,11,10,-9,22, 
  /* [7][0][][] */ -63,-1,11,93,127,-34,-37,5, 
  /* [8][0][][] */ 84,9,3,-127,12,-25,-55,-41, 
  /* [9][0][][] */ -17,-127,-7,-1,-1,86,-56,103, 
  /* [10][0][][] */ -94,6,15,19,-127,71,67,-23, 
  /* [11][0][][] */ 118,8,39,14,-54,-39,-37,-127, 
  /* [12][0][][] */ 2,6,45,-8,17,-69,127,54, 
  /* [13][0][][] */ 63,-26,-3,-11,127,122,124,-42, 
  /* [14][0][][] */ 106,56,-17,4,-127,3,-34,-43, 
  /* [15][0][][] */ -15,-127,12,-10,-1,-5,0,34, 
  /* [16][0][][] */ -59,-14,3,1,-127,4,11,12, 
  /* [17][0][][] */ -36,109,-111,-3,15,-127,109,-88, 
  /* [18][0][][] */ 127,-34,-47,19,-64,31,11,117, 
  /* [19][0][][] */ 127,-62,-17,-3,49,-13,41,38, 
  /* [20][0][][] */ 102,25,-25,127,7,34,7,-44, 
  /* [21][0][][] */ 17,43,-75,10,-35,101,-127,-108, 
  /* [22][0][][] */ -127,10,21,-15,-24,12,-61,-32, 
  /* [23][0][][] */ -40,-58,4,19,-127,56,65,-19, 
  /* [24][0][][] */ 127,3,-8,-10,-58,-13,3,-4, 
  /* [25][0][][] */ 18,-19,0,-28,127,58,47,-31, 
  /* [26][0][][] */ 6,-123,-1,-48,1,-127,89,-58, 
  /* [27][0][][] */ -18,-127,21,-14,-3,-51,33,-6, 
  /* [28][0][][] */ -73,31,-26,32,-5,-41,127,116, 
  /* [29][0][][] */ -8,42,5,0,3,43,-101,-127, 
  /* [30][0][][] */ 127,-24,0,7,-81,5,-32,-21, 
  /* [31][0][][] */ 3,-6,66,-10,8,-117,127,34, 
  /* [32][0][][] */ -94,31,8,4,-127,-95,-100,42, 
  /* [33][0][][] */ -27,14,1,23,-127,-57,-46,23, 
  /* [34][0][][] */ 6,-127,47,-6,-9,81,-74,61, 
  /* [35][0][][] */ -22,-51,-127,-10,-5,-63,40,-57, 
  /* [36][0][][] */ 4,127,62,8,-6,10,-20,-38, 
  /* [37][0][][] */ -127,37,34,-13,55,-37,-10,-106, 
  /* [38][0][][] */ -127,-10,-42,-11,39,18,25,101, 
  /* [39][0][][] */ 0,-23,75,-14,34,-72,127,73, 
  /* [40][0][][] */ -31,-23,-10,-38,-127,112,110,-29, 
  /* [41][0][][] */ -127,55,18,-66,-92,-99,-85,54, 
  /* [42][0][][] */ -41,-127,-101,-1,-19,60,-107,-73, 
  /* [43][0][][] */ -79,9,-8,-127,103,63,70,1, 
  /* [44][0][][] */ 127,-10,11,-98,34,-33,-15,50, 
  /* [45][0][][] */ -17,-127,-14,-14,-6,-67,75,5, 
  /* [46][0][][] */ 104,1,-3,-23,127,-37,-25,5, 
  /* [47][0][][] */ 127,-1,-2,123,-6,25,17,-42, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00077784486347809434, 0.0013534915633499622, 0.00046573573490604758, 0.00062108959536999464, 0.00055002624867483974, 0.00047014627489261329, 0.00080042134504765272, 0.00050810124957934022, 0.00073963910108432174, 0.0012416952522471547, 0.0016996556660160422, 0.00060305936494842172, 0.00073710287688300014, 0.0012499765725806355, 0.00032761323382146657, 0.00077991985017433763, 0.00048871565377339721, 0.00069089961471036077, 0.00039112701779231429, 0.00047595237265340984, 0.00086281419498845935, 0.00040077776066027582, 0.0006245471304282546, 0.0002998559211846441, 0.00067378109088167548, 0.00054587121121585369, 0.0037981746718287468, 0.00089467869838699698, 0.00037101114867255092, 0.0007796664722263813, 0.00065777800045907497, 0.00037494665593840182, 0.00129702128469944, 0.00047146095312200487, 0.0014047445729374886, 0.0011605971958488226, 0.0013877005549147725, 0.00058995926519855857, 0.00052406353643164039, 0.00071724428562447429, 0.00029993063071742654, 0.00050542427925392985, 0.0005322816432453692, 0.00048593647079542279, 0.003815734526142478, 0.00090204388834536076, 0.00058903743047267199, 0.0024415815714746714, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -41456, 27681, -13235, -11941, 20620, -4997, 33146, 45531, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00055968156084418297, 0.00070316193159669638, 0.0014624471077695489, 0.0017067904118448496, 0.00075546407606452703, 0.00052970659453421831, 0.00067250319989398122, 0.00098581530619412661, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -42,-15,-34,14,2,-16,-1,2,-119,127,-22,104,90,7,66,-17,-4,-30,5,7,-5,-7,-9,-23,18,-80,9,57,-5,14,12,-32,-8,-72,110,17,6,-2,0,-12,92,-2,48,-5,-23,15,-6,-14, 
  /* [1][0][][] */ -2,27,126,4,-7,-37,1,-82,37,0,24,2,-21,9,-13,-127,9,-58,11,0,-38,34,19,-30,-20,-4,21,6,11,-2,13,-8,-8,11,18,17,-11,-36,67,-63,6,51,-12,32,-10,7,24,-9, 
  /* [2][0][][] */ 6,-48,17,-39,36,24,-5,-28,8,-2,-2,13,-11,56,8,0,-34,127,-24,-35,-15,23,-38,-11,120,4,1,-6,-28,-12,5,-44,-9,-17,0,12,-7,1,-14,3,16,-18,-21,4,0,25,-24,-37, 
  /* [3][0][][] */ -5,-82,-3,7,4,-7,-6,-4,-11,-10,21,20,14,-9,44,2,-10,-23,2,21,-5,20,-21,6,7,51,2,12,-7,3,127,3,10,8,1,-4,-21,-17,-2,9,-11,8,-6,30,-7,-1,2,29, 
  /* [4][0][][] */ -99,7,-6,-5,-1,-41,-2,2,31,-31,22,-19,-41,3,-15,-15,4,4,2,19,4,-22,14,3,-8,50,4,109,-4,1,-7,-29,4,-127,-24,13,1,-5,2,0,-52,-1,-12,25,-54,-7,9,3, 
  /* [5][0][][] */ -30,29,29,2,-44,18,-8,44,20,6,20,3,-7,-42,1,29,-13,-93,19,-5,49,-53,9,36,11,10,-79,-34,-32,-32,20,4,-5,-61,-1,-67,56,15,-34,22,29,-38,4,16,127,-8,-38,-7, 
  /* [6][0][][] */ -22,-22,-16,-12,42,-28,1,-23,-7,-9,32,-21,-11,46,-3,-52,1,6,1,-28,-33,42,-4,-78,7,-8,-53,-70,24,42,-14,-3,4,-71,-14,64,-67,-55,15,-52,-6,1,12,41,127,-35,38,14, 
  /* [7][0][][] */ 12,34,-74,29,-18,13,5,56,-2,-5,68,-31,2,-29,-8,-3,-16,-127,36,-49,61,41,18,-62,25,-20,24,2,-21,27,-8,0,-4,34,-1,-25,-13,-55,-44,-72,-8,-29,36,66,-35,-21,-2,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.023786464706063271, 0.029884381219744682, 0.062154002487659454, 0.072538591921329498, 0.032107222825288773, 0.022512529045343399, 0.028581386432051659, 0.04189714789390564, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52327, -283, 10379, 695, 5673, -5126, 1350, 34652, 702, 23386, -1638, 14844, -6144, -900, 20360, 12676, 431, 19650, 27144, 11664, -474, -207, 616, 11113, -7862, 25723, 46224, 34352, 3155, 612, 182, 1066, 747, 16038, -6747, 17633, -11871, 23122, -22383, 127952, 24843, 22963, 11496, -1488, 15590, 3177, 1978, -537, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031054884311743081, 0.00031711620977148414, 0.0001644881849642843, 0.00032119525712914765, 0.00016049956320784986, 9.7704651125241071e-05, 0.00091684435028582811, 0.00010079338244395331, 0.00014162903244141489, 0.00019947803230024874, 0.00010168246808461845, 0.00028400824521668255, 0.00025124888634309173, 0.00023916664940770715, 0.00012007875193376094, 0.00012300175148993731, 0.0001613177009858191, 0.00019696251547429711, 8.6235362687148154e-05, 0.00016537330520804971, 0.00026855897158384323, 0.00021812175691593438, 0.00017243827460333705, 0.00018353173800278455, 0.00015480942965950817, 0.00014201865997165442, 0.00057501252740621567, 9.5597264589741826e-05, 0.00019827325013466179, 0.0012882561422884464, 8.9350680354982615e-05, 0.00018584280041977763, 0.001100303023122251, 0.00017814956663642079, 0.00021040873252786696, 0.00014631661179009825, 0.00031963546643964946, 0.00011610924411797896, 0.00025832222308963537, 1.9330220311530866e-05, 0.00012933649122714996, 6.1804632423445582e-05, 0.00014330499107018113, 0.00018129422096535563, 0.00015113136032596231, 0.00013130527804605663, 0.00016344973118975759, 0.00013224118447396904, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,108,4,81,-2,28,18,9,9,8,-9,-9,-44,8,-3,8,-22,-115,-6,-23,127,-10,-3,7,-6,9,-5,4,15,98,21,28,38,-28,1,34,-3,2,18,-67,-9,-9,17,3,-6,-10, 127,10,15,-127,28,86,10,10,127,127,7,44,-52,-23,7,7,127,-56,-57,-57,-99,25,-110,15,17,71,-32,-84,24,20,9,-123,5,-61,127,10,-39,-47,-6,116,-79,-97,-31,3,-35,-8,-127,23, -32,-3,7,14,0,65,4,17,30,9,-14,32,-16,-3,17,3,-105,28,-2,76,-30,-12,-18,-6,-5,-60,-3,30,-16,5,4,-21,8,-23,16,-19,0,47,41,-12,50,39,-16,11,-43,3,-2,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-26,34,-16,11,10,-13,54,-8,-1,18,-32,-1,-49,-58,-85,11,-74,-125,-18,5,99,-15,-127,-9,32,12,-107,17,-52,-2,127,-2,58,-43,41,-62,-127,39,-89,-45,-14,-13,-5, 26,-127,-127,113,-127,-127,-127,-127,-126,-94,127,-127,127,127,36,-127,-84,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,93,127,-127,127,-27,-42,127,-127,127,127,127,-80,127,127,127,-122,101,107, 54,5,48,-15,6,-60,43,18,-22,15,-106,-7,-1,-39,127,4,62,-65,-70,85,15,-47,11,-33,1,6,-37,69,20,40,0,4,32,-44,9,66,-5,64,68,-10,-81,9,-85,-31,27,-16,-11,6, 
  /* [0][2][][] */ -53,-6,25,-17,7,35,-38,22,10,-22,11,33,6,-6,-36,17,4,22,-12,106,7,-32,-16,-13,-3,23,-1,52,-10,3,47,-31,-18,-43,-31,-41,-1,31,7,-23,9,-5,41,-37,-36,17,-12,18, 68,126,75,20,16,-20,123,35,20,-2,43,27,-6,-1,-89,24,-59,-56,-34,123,-36,48,12,19,31,-62,-41,31,76,1,127,22,85,-25,9,-37,-25,-17,-13,119,-28,-14,-42,46,21,-33,7,-127, -42,-4,6,-4,5,-6,-62,7,-17,-9,-41,-39,19,-9,-8,11,33,24,-8,-127,25,-11,4,-9,-7,11,-10,-54,-15,8,5,9,-20,87,-36,-24,-4,37,25,-61,4,7,-38,7,-43,127,-6,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013198325410485268, 0.013477438129484653, 0.0069907475262880325, 0.013650798238813877, 0.0068212314508855343, 0.0041524474509060383, 0.03896588459610939, 0.0042837187647819519, 0.006019233725965023, 0.0084778163582086563, 0.0043215048499405384, 0.012070350348949432, 0.010678078047931194, 0.010164582170546055, 0.0051033468917012215, 0.0052275741472840309, 0.0068560023792088032, 0.0083709070459008217, 0.0036650027614086866, 0.0070283650420606136, 0.01141375582665205, 0.00927017442882061, 0.0073286262340843678, 0.0078000989742577076, 0.0065794005058705807, 0.0060357931070029736, 0.024438032880425453, 0.0040628835558891296, 0.0084266131743788719, 0.054750885814428329, 0.0037974037695676088, 0.0078983185812830925, 0.046762876212596893, 0.0075713563710451126, 0.0089423712342977524, 0.0062184557318687439, 0.013584506697952747, 0.0049346429295837879, 0.010978694073855877, 0.00082153431139886379, 0.0054968008771538734, 0.0026266968343406916, 0.0060904617421329021, 0.0077050039544701576, 0.0064230826683342457, 0.0055804741568863392, 0.0069466135464608669, 0.005620250478386879, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 61315, 8023, 6435, 9134, 1819, 11724, -1880, -261, 968, 2299, 3724, 398, 1910, -953, 1003, -2187, 4529, 10987, -342, 31266, 2847, 3903, 7242, -584, 4231, 5348, 29767, 11865, -110, -2806, 141, 2404, -2207, 11074, 3076, 8679, 7919, 4313, 31248, 2492, -760, 2825, 1106, 3926, 5422, 2198, -1345, 2836, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.0270834839902818e-05, 0.00028248425223864615, 0.00023692473769187927, 0.00035269709769636393, 0.0012267362326383591, 0.00042900460539385676, 0.0010141707025468349, 0.0010264537995681167, 0.00059170828899368644, 0.00058251363225281239, 0.00060974591178819537, 0.00042029027827084064, 0.00053846061928197742, 0.0004766420170199126, 0.00047579803504049778, 0.0016676733503118157, 0.00036276612081564963, 0.00038848031545057893, 0.0015647037653252482, 8.6654501501470804e-05, 0.00040108489338308573, 0.0002632977266330272, 0.00055247335694730282, 0.0008371829753741622, 0.00028495091828517616, 0.00021796178771182895, 0.00013636947551276535, 0.00030983792385086417, 0.00073620548937469721, 0.00091985490871593356, 0.00050449848640710115, 0.00034031129325740039, 0.00088592211250215769, 0.00019834592239931226, 0.00032962806290015578, 0.00021448948245961219, 0.00046413659583777189, 0.00031382605084218085, 7.6237934990786016e-05, 0.0018324537668377161, 0.00077694287756457925, 0.00097033701604232192, 0.0004268151824362576, 0.00038041602238081396, 0.00022256892407312989, 0.00050538673531264067, 0.00084699870785698295, 0.00093621201813220978, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 88,24,-6,-12,127,17,-44,-20, 
  /* [1][0][][] */ -12,-3,5,127,7,-9,5,20, 
  /* [2][0][][] */ 28,-127,-16,51,-19,-83,87,7, 
  /* [3][0][][] */ 127,-30,-8,25,-23,-37,31,5, 
  /* [4][0][][] */ 3,-43,127,-11,-15,-46,10,-89, 
  /* [5][0][][] */ 62,6,9,2,127,24,-4,-4, 
  /* [6][0][][] */ -17,98,-6,127,15,42,-63,-54, 
  /* [7][0][][] */ -1,127,-5,3,1,-13,14,-2, 
  /* [8][0][][] */ 127,56,-10,4,-65,-27,-5,-46, 
  /* [9][0][][] */ -127,10,-2,21,58,28,-10,-2, 
  /* [10][0][][] */ -74,-4,27,127,36,19,-15,9, 
  /* [11][0][][] */ -127,0,11,-70,29,19,-25,-45, 
  /* [12][0][][] */ 127,25,5,19,-51,-13,5,-39, 
  /* [13][0][][] */ -3,72,-127,0,9,107,-82,70, 
  /* [14][0][][] */ -70,-29,-19,127,5,24,-14,-39, 
  /* [15][0][][] */ -1,127,2,-2,1,-16,12,-48, 
  /* [16][0][][] */ -11,-127,-19,13,-26,-113,119,-30, 
  /* [17][0][][] */ 21,127,-8,-14,4,78,-93,-22, 
  /* [18][0][][] */ -1,55,-127,-2,8,59,-25,64, 
  /* [19][0][][] */ -70,22,1,4,-127,-6,33,42, 
  /* [20][0][][] */ -127,-29,-6,-1,62,-34,47,20, 
  /* [21][0][][] */ -94,7,-2,3,-127,1,23,10, 
  /* [22][0][][] */ -127,-27,11,5,97,-13,38,54, 
  /* [23][0][][] */ -24,-19,1,-6,-4,84,-127,-101, 
  /* [24][0][][] */ -6,41,-127,0,12,45,-16,83, 
  /* [25][0][][] */ 91,-48,-8,127,-77,-3,10,-57, 
  /* [26][0][][] */ 1,-24,-8,2,-16,113,127,-25, 
  /* [27][0][][] */ 73,1,3,18,127,32,35,-24, 
  /* [28][0][][] */ 2,127,-64,5,2,72,-28,123, 
  /* [29][0][][] */ -14,15,-6,-10,1,95,-127,-90, 
  /* [30][0][][] */ 3,-4,1,-127,-5,-4,-1,-10, 
  /* [31][0][][] */ -56,0,5,10,-127,4,11,1, 
  /* [32][0][][] */ -11,46,18,-127,-6,40,-78,-106, 
  /* [33][0][][] */ -58,-13,0,6,-127,44,43,2, 
  /* [34][0][][] */ -127,82,13,44,71,-5,16,-2, 
  /* [35][0][][] */ -14,127,-4,-16,3,-114,88,-16, 
  /* [36][0][][] */ 4,55,10,-32,5,120,-127,-41, 
  /* [37][0][][] */ 14,-74,3,34,28,-114,127,-18, 
  /* [38][0][][] */ 8,-127,15,9,18,95,-82,51, 
  /* [39][0][][] */ 0,-127,-9,-6,-3,0,-56,-110, 
  /* [40][0][][] */ 127,40,-10,-16,-51,92,-123,-107, 
  /* [41][0][][] */ 4,-120,9,-3,-1,72,-55,127, 
  /* [42][0][][] */ 45,-4,2,-127,-66,-5,-9,-46, 
  /* [43][0][][] */ -92,-29,8,-127,55,5,-17,-5, 
  /* [44][0][][] */ 10,-34,-13,11,-15,89,127,-11, 
  /* [45][0][][] */ -127,-31,-4,12,6,-2,22,-14, 
  /* [46][0][][] */ 17,79,127,4,-1,17,11,15, 
  /* [47][0][][] */ 1,-2,6,127,7,-2,4,5, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018415374506730586, 0.00074028625385835767, 0.00062089168932288885, 0.00092428800417110324, 0.003214819822460413, 0.0011242616456001997, 0.0026577645912766457, 0.0026899541262537241, 0.0015506475465372205, 0.0015265517868101597, 0.0015979175223037601, 0.0011014246847480536, 0.0014111051568761468, 0.0012491015950217843, 0.0012468898203223944, 0.0043703522533178329, 0.00095067522488534451, 0.0010180625831708312, 0.0041005071252584457, 0.00022708925826009363, 0.0010510944994166493, 0.00069000548683106899, 0.0014478274388238788, 0.0021939454600214958, 0.00074675050564110279, 0.00057119684061035514, 0.00035737370490096509, 0.00081197009421885014, 0.0019293209770694375, 0.0024105978664010763, 0.0013221030822023749, 0.00089182943338528275, 0.0023216726258397102, 0.00051979097770527005, 0.00086383265443146229, 0.00056209723697975278, 0.0012163295177742839, 0.00082242145435884595, 0.00019979130593128502, 0.0048021804541349411, 0.0020360786002129316, 0.0025428927037864923, 0.0011185240000486374, 0.00099692901130765676, 0.00058327044826000929, 0.0013244308065623045, 0.002219668822363019, 0.0024534638505429029, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -2652, -24529, 27125, 22340, 4782, 2931, 35663, 9443, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013890223344787955, 0.00076914072269573808, 0.0013384640915319324, 0.0012330806348472834, 0.0010888171382248402, 0.0012596771121025085, 0.00082765519618988037, 0.00084621802670881152, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -16,-8,12,-98,10,29,8,5,3,5,1,-3,105,0,1,7,0,-8,-3,0,84,-4,-2,3,31,39,13,10,3,4,4,-127,11,8,-1,0,-28,-2,-18,34,8,-28,-6,5,4,-4,5,3, 
  /* [1][0][][] */ -38,-11,0,-11,42,28,-28,71,20,8,-25,-20,19,0,19,36,0,39,19,-46,7,21,127,18,-28,1,55,4,24,-3,19,-6,11,-8,-8,-18,9,-49,12,6,-10,-11,-78,-6,-32,5,-49,-90, 
  /* [2][0][][] */ -67,13,2,14,46,-12,28,28,-8,52,6,-6,0,0,9,56,0,15,-127,24,2,13,5,-12,-38,3,36,10,9,30,22,2,6,-10,-7,-15,10,6,5,4,36,-11,-32,3,28,-60,24,11, 
  /* [3][0][][] */ 2,0,-1,8,-2,27,1,-6,63,16,-2,2,26,0,-29,-8,0,-2,-9,3,-6,0,5,-17,-11,-7,-10,-4,-8,-4,1,-8,-49,36,-55,0,8,1,5,-127,1,6,2,-46,-1,-4,1,8, 
  /* [4][0][][] */ -1,-5,85,35,3,-18,-5,-3,1,-3,-4,-7,-80,0,-10,2,0,10,5,0,65,4,1,-3,-17,28,-5,42,-6,-4,1,99,3,3,-1,-5,18,-10,-14,-15,1,-127,0,5,1,-2,-3,-1, 
  /* [5][0][][] */ -6,42,4,-7,1,52,30,11,-21,27,5,53,24,0,-127,-2,0,13,-37,24,-11,10,-18,39,-21,-3,26,-4,-15,23,23,-18,49,27,-37,-4,4,21,-51,17,28,-12,-9,26,24,58,24,22, 
  /* [6][0][][] */ -20,-53,-1,5,39,-54,-18,4,29,-30,-10,83,0,0,-127,39,0,-13,52,-13,-2,2,22,-32,31,0,-3,-14,45,-11,-8,0,96,-34,26,3,-4,-9,-67,-24,-11,-12,0,-26,-16,-80,-16,-22, 
  /* [7][0][][] */ -113,-24,-13,11,127,13,56,29,17,1,25,-40,-27,0,84,102,0,12,6,57,-11,-1,-28,49,15,9,42,7,45,61,55,-6,-10,-14,-18,-28,1,19,28,35,70,2,-30,-9,60,6,58,73, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.05903344601392746, 0.032688479870557785, 0.056884720921516418, 0.052405927330255508, 0.046274725347757339, 0.053536277264356613, 0.035175345838069916, 0.035964265465736389, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 62350, 68326, 63277, 42774, 384, 13812, 2736, 32494, 19752, 23753, 28552, 3270, -44836, -127, 42223, 1270, -204, 33299, 2989, 1243, -14263, -12571, 42367, 37060, -20014, 41154, 49519, 22111, -2820, 14007, -7898, -51543, 12206, 98932, 27925, 1514, 72056, -158, 148437, -22516, 15077, -26950, 3188, 108264, -2279, 73161, 64, -23157, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.6618976385798305e-05, 5.7062563428189605e-05, 0.00013137987116351724, 0.00010993982868967578, 0.00021409589680843055, 0.0001761703024385497, 0.00013559618673752993, 4.7374116547871381e-05, 0.00011246620124438778, 3.2894524338189512e-05, 6.46568150841631e-05, 2.5185852791764773e-05, 0.00016257281822618097, 0.005541567225009203, 6.065199340810068e-05, 0.00025899530737660825, 0.0027484172023832798, 1.4909850506228395e-05, 8.0618752690497786e-05, 0.00017053569899871945, 0.00010568141442490742, 9.6717645647004247e-05, 0.00014221425226423889, 3.0627514206571504e-05, 8.7324289779644459e-05, 6.6290624090470374e-05, 3.0774925107834861e-05, 3.9812795876059681e-05, 0.00025934103177860379, 6.1063954490236938e-05, 5.4026506404625252e-05, 0.00018669954442884773, 0.00020013912580907345, 7.5816474236489739e-06, 9.2321184638421983e-05, 0.00017572977230884135, 1.2351251825748477e-05, 0.00042342496453784406, 3.1747698812978342e-05, 8.1606587627902627e-05, 7.1106936957221478e-05, 0.00017842152738012373, 9.3432870926335454e-05, 8.3023214756394736e-06, 0.00015313274343498051, 8.038481610128656e-05, 0.0002289522672072053, 8.1028636486735195e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-23,-7,-17,7,-40,-79,-68,-26,-52,10,64,34,-71,113,-43,-113,-85,36,-6,-1,-71,-112,-80,-33,-123,-65,-21,71,14,94,27,-127,-89,-7,56,18,48,-127,80,-76,-14,104,-109,-2,-34,-87,107, 75,12,-28,-28,57,-127,-127,-81,61,-78,-115,108,38,-82,-1,62,-52,-111,60,7,12,-112,-127,-71,-3,-127,-121,-41,-54,20,-56,54,29,-127,64,84,13,72,-93,127,-127,6,124,-127,2,-22,-127,94, -33,42,6,-5,-66,-108,-58,-17,87,-9,-127,38,7,-71,-100,-11,-127,-25,27,12,-16,-76,-36,-23,-10,-29,-58,-13,-8,17,-25,10,107,-86,69,31,13,36,-5,15,-78,4,7,-79,-16,7,-55,14, 
  /* [0][1][][] */ -87,-127,-44,-43,-10,54,99,-106,-26,-110,-20,112,89,-64,27,-97,-121,-95,88,-76,42,-88,-102,-127,42,-117,-77,-37,127,-60,127,85,-43,-85,-15,84,-36,-77,-107,91,41,59,104,-108,-90,-118,83,120, 127,-82,-127,-127,127,41,94,-127,101,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-120,127,-98,-127,-127,-119,-127,-72,127,29,-110,127,127,-69,-127,-97,90,60,127,127,-117,-111,-127,127,127, -54,30,-62,-85,-121,-23,31,-37,127,-20,-77,35,54,-70,-25,-44,-37,-29,54,-71,55,-81,-39,-24,47,-6,-45,-61,16,-89,-36,20,30,-99,117,22,-37,-62,2,-15,36,54,11,-74,-57,-37,66,36, 
  /* [0][2][][] */ -62,-107,-34,-33,-1,34,-5,-34,-38,-59,-15,59,75,-127,-127,-65,-43,-18,62,75,51,-33,-13,-59,32,-55,-10,-58,75,28,77,63,108,-25,-39,-10,-95,35,-18,30,9,38,15,-55,96,-77,4,30, 87,-73,-88,-84,81,19,7,-47,48,-70,-31,55,82,-26,15,92,-24,-31,77,118,81,-53,-18,-57,91,-70,-18,-99,-51,38,-46,111,-17,-48,66,6,-127,50,-15,-2,10,32,16,-67,127,-100,-11,39, -30,27,-41,-37,-81,-19,22,-12,58,-5,-11,32,30,-43,110,-30,-93,-5,31,60,72,-28,-2,-2,41,1,-4,-61,-14,28,-20,40,-91,-44,65,3,-19,21,27,-40,6,36,-5,-13,63,-34,-3,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0041063064709305763, 0.0024251588620245457, 0.0055836443789303303, 0.0046724425628781319, 0.0090990755707025528, 0.0074872374534606934, 0.005762837827205658, 0.0020133999641984701, 0.0047798133455216885, 0.0013980172807350755, 0.0027479145210236311, 0.0010703987209126353, 0.006909344345331192, 0.23551659286022186, 0.0025777097325772047, 0.011007300578057766, 0.1168077290058136, 0.00063366862013936043, 0.0034262968692928553, 0.0072477669455111027, 0.0044914600439369678, 0.0041104997508227825, 0.006044105626642704, 0.0013016692828387022, 0.0037112822756171227, 0.002817351371049881, 0.0013079342897981405, 0.0016920438501983881, 0.0110219931229949, 0.0025952178984880447, 0.0022961264476180077, 0.0079347304999828339, 0.0085059124976396561, 0.00032222000299952924, 0.0039236503653228283, 0.0074685150757431984, 0.00052492821123450994, 0.017995560541749001, 0.0013492770958691835, 0.0034682799596339464, 0.0030220448970794678, 0.007582914549857378, 0.0039708968251943588, 0.0003528486704453826, 0.006508141290396452, 0.0034163547679781914, 0.0097304712980985641, 0.0034437170252203941, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4882, 93, 11642, 6877, 7260, 8369, 10744, -39, -37, -427, 2906, 575, 14151, -96757920, 3213, 21309, -78108016, -138, -657, 11017, 4855, -23, 52, 558, 4318, -1029, 93, 715, 5430, 2230, 3344, 17046, 4471, 325, 251, -2109, 365, 3944, -201, 11964, 2872, 13966, -306, -96, 15234, 177, 10596, 5779, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042461205157451332, 0.00047369502135552466, 0.00027225498342886567, 0.00027319981018081307, 0.00027316453633829951, 0.00024793273769319057, 0.00035431268042884767, 0.0013162125833332539, 0.00037839490687474608, 0.0017613492673262954, 0.00050686724716797471, 0.0014917147345840931, 0.00015392093337140977, 1.6761797505537857e-09, 0.00081439659697934985, 0.00015606638044118881, 1.6761797505537857e-09, 0.0053320471197366714, 0.00031377281993627548, 0.00035214380477555096, 0.00021837114763911813, 0.0037098703905940056, 0.00025294840452261269, 0.0011479764943942428, 0.00087062414968386292, 0.00053375621791929007, 0.0017680262681096792, 0.0017232057871297002, 0.00020783345098607242, 0.001315245172008872, 0.00088977691484615207, 0.00013869517715647817, 0.0001674535742495209, 0.0099859600886702538, 0.00050649821059778333, 0.00056936283363029361, 0.0041372226551175117, 0.00032055267365649343, 0.001966765383258462, 0.00029047016869299114, 0.00099506450351327658, 0.00015933459508232772, 0.00048766235704533756, 0.0091362819075584412, 0.0003271146269980818, 0.00038305888301692903, 0.00026588287437334657, 0.00015502343012485653, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 9,-127,57,-53,33,-16,-57,18, 
  /* [1][0][][] */ 60,66,-21,-83,6,-19,-67,127, 
  /* [2][0][][] */ 27,5,-41,127,50,120,47,86, 
  /* [3][0][][] */ 79,80,-84,127,-102,-12,-2,10, 
  /* [4][0][][] */ -47,-86,62,20,8,28,-29,-127, 
  /* [5][0][][] */ 20,4,-38,42,5,-37,34,127, 
  /* [6][0][][] */ 66,-25,-127,-105,102,11,64,-40, 
  /* [7][0][][] */ 127,19,23,-20,39,-6,84,-59, 
  /* [8][0][][] */ 22,-108,14,107,1,25,-13,-127, 
  /* [9][0][][] */ 109,-127,15,-3,-14,16,-119,94, 
  /* [10][0][][] */ -127,-42,-125,23,-17,7,-101,59, 
  /* [11][0][][] */ -23,-37,-11,-101,-127,-27,51,-17, 
  /* [12][0][][] */ 15,5,-43,67,-76,-23,58,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -7,-34,-9,6,40,127,43,41, 
  /* [15][0][][] */ 42,7,12,-127,71,34,-50,81, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 14,26,127,26,-27,-10,29,29, 
  /* [18][0][][] */ 94,-127,27,40,-10,20,-107,13, 
  /* [19][0][][] */ -127,-11,26,78,-59,-55,-82,67, 
  /* [20][0][][] */ 36,26,-49,110,-30,-127,5,68, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -84,-15,-127,6,12,14,-105,0, 
  /* [23][0][][] */ -97,123,-15,-24,3,-11,127,-76, 
  /* [24][0][][] */ 1,-56,-50,85,-6,-56,94,127, 
  /* [25][0][][] */ 6,34,25,26,116,127,-68,-56, 
  /* [26][0][][] */ -87,-31,-127,-2,10,22,-98,-3, 
  /* [27][0][][] */ -6,-23,-28,22,-42,127,72,44, 
  /* [28][0][][] */ 2,-30,-28,42,22,127,60,71, 
  /* [29][0][][] */ 89,36,127,0,-24,-16,94,-9, 
  /* [30][0][][] */ -86,127,-29,-29,10,-7,106,-49, 
  /* [31][0][][] */ -34,-81,-7,7,28,-64,127,111, 
  /* [32][0][][] */ -1,3,-64,127,-8,99,87,122, 
  /* [33][0][][] */ 2,58,-9,-106,6,-6,-7,127, 
  /* [34][0][][] */ -17,78,-5,-84,32,-5,19,127, 
  /* [35][0][][] */ 127,7,-19,-43,14,39,108,-54, 
  /* [36][0][][] */ -127,-11,21,62,-43,5,-112,93, 
  /* [37][0][][] */ -12,-22,-17,25,28,127,49,50, 
  /* [38][0][][] */ 14,18,6,83,127,-6,-23,36, 
  /* [39][0][][] */ 5,26,30,-119,29,-3,-43,127, 
  /* [40][0][][] */ 100,27,127,-3,-18,-16,95,-11, 
  /* [41][0][][] */ -3,-32,-30,80,43,127,68,89, 
  /* [42][0][][] */ -83,-8,127,28,-30,20,-30,58, 
  /* [43][0][][] */ -12,-57,11,106,-18,5,21,-127, 
  /* [44][0][][] */ 34,-2,-68,-127,58,-19,5,-107, 
  /* [45][0][][] */ -91,127,3,-51,1,-6,81,-58, 
  /* [46][0][][] */ -127,-23,56,30,-30,40,-92,46, 
  /* [47][0][][] */ 106,25,127,-7,37,-21,123,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0009973280830308795, 0.0011126140598207712, 0.00063947204034775496, 0.00064169126562774181, 0.00064160837791860104, 0.00058234395692124963, 0.00083220901433378458, 0.003091517835855484, 0.00088877329835668206, 0.0041370540857315063, 0.0011905288556590676, 0.0035037370398640633, 0.0003615292371250689, 3.937008052901092e-09, 0.0019128533313050866, 0.00036656844895333052, 3.937008052901092e-09, 0.012523903511464596, 0.00073698908090591431, 0.00082711473805829883, 0.00051290978444740176, 0.0087137371301651001, 0.00059412478003650904, 0.0026963651180267334, 0.002044920576736331, 0.0012536856811493635, 0.0041527370922267437, 0.0040474627166986465, 0.00048815886839292943, 0.0030892456416040659, 0.0020899064838886261, 0.00032576700323261321, 0.00039331466541625559, 0.023455005139112473, 0.0011896621435880661, 0.0013373184483498335, 0.009717501699924469, 0.00075291359098628163, 0.0046195350587368011, 0.00068225583527237177, 0.0023372056894004345, 0.00037424481706693769, 0.0011454204795882106, 0.02145928330719471, 0.00076832628110423684, 0.00089972803834825754, 0.00062450522091239691, 0.00036411877954378724, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1529, -41130, -7992, -12539, -31556, -1306, -24784, -29035, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022611198946833611, 0.0022615648340433836, 0.0025846969801932573, 0.0012147127417847514, 0.0012970182579010725, 0.0019663192797452211, 0.0015865268651396036, 0.0010574914049357176, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,7,6,124,3,-4,0,0,-127,-90,0,0,116,-5,0, 
  /* [1][0][][] */ 0,-28,5,85,71,11,19,4,1,-8,127,-45,0,27,-16,0, 
  /* [2][0][][] */ 0,-1,-3,-10,-58,3,12,4,0,3,-18,3,0,127,-9,0, 
  /* [3][0][][] */ 0,-7,-15,-127,79,23,65,14,0,61,0,40,0,-2,18,0, 
  /* [4][0][][] */ 0,49,-29,36,-56,32,127,9,0,-60,15,-8,0,-6,15,0, 
  /* [5][0][][] */ 0,-15,-13,-3,-24,-23,-13,16,0,9,-3,-45,0,-7,127,0, 
  /* [6][0][][] */ 0,13,2,4,50,-22,-27,-5,0,-106,113,64,0,127,59,0, 
  /* [7][0][][] */ 0,15,-7,127,8,-2,18,8,0,70,-52,75,0,-9,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.096097595989704132, 0.096116505563259125, 0.10984961688518524, 0.051625292748212814, 0.055123277008533478, 0.083568565547466278, 0.067427389323711395, 0.044943384826183319, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 16183, 56435, 10557, 11143, 2736, 14106, 604, -13696, 6662, 29243, 14441, -445, 26528, 11484, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00016451705596409738, 7.109596481313929e-05, 0.00032866373658180237, 0.00015861951396800578, 0.0012096548452973366, 0.00036667264066636562, 0.0064632054418325424, 2.0065921489731409e-05, 0.00027537386631593108, 0.00020352074352558702, 0.0007404005154967308, 0.00072724185883998871, 0.00024356147332582623, 0.00017783584189601243, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,78,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,0,3,-109,-49,8,-29,-14, -78,-42,-57,-15,-7,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,33,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,38,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,39,-34,21,-125,-13,0,84,-58,0,-28,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0069919750094413757, 0.0030215783044695854, 0.013968208804726601, 0.0067413290962576866, 0.051410328596830368, 0.015583586879074574, 0.27468621730804443, 0.00085280166240409017, 0.011703389696776867, 0.0086496314033865929, 0.031467020511627197, 0.030907778069376945, 0.010351362638175488, 0.0075580230914056301, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 1066, -83706, 46939, 396787, 300, 17201, -7058, -109859, 44379, 19680, 358215, -1073741824, 33028, 19266, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00031519957701675594, 0.00017806742107495666, 3.4050262911478058e-05, 9.0335015556775033e-06, 0.00016289352788589895, 0.00016113169840537012, 0.0002156703412765637, 2.9694579097849783e-06, 5.2617135224863887e-05, 0.00015690083091612905, 1.5790148609085009e-05, 1.1533876076441629e-09, 0.00012042832531733438, 0.00012035024701617658, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 55,3,36, 2,-17,21, -127,-117,-65, 
  /* [1][1][][] */ 10,2,5, -14,11,1, 5,-27,9, 
  /* [1][2][][] */ 4,26,6, 4,16,6, 43,-17,14, 
  /* [2][0][][] */ 31,-4,-1, 78,115,3, 35,-42,5, 
  /* [2][1][][] */ 8,11,0, 73,127,-26, 14,-9,-9, 
  /* [2][2][][] */ 47,-68,20, 76,-43,-19, 28,-57,12, 
  /* [3][0][][] */ 5,33,1, 30,92,16, 0,5,-5, 
  /* [3][1][][] */ 22,37,4, 67,127,22, -13,-18,4, 
  /* [3][2][][] */ 8,8,4, 29,30,7, -1,-2,3, 
  /* [4][0][][] */ 41,87,5, 15,92,-1, -13,20,11, 
  /* [4][1][][] */ 34,95,56, 24,127,38, 31,61,-6, 
  /* [4][2][][] */ 40,75,34, 34,127,20, -24,30,29, 
  /* [5][0][][] */ 7,-3,-127, -6,-4,-110, -10,25,-26, 
  /* [5][1][][] */ 5,-46,-126, -1,-49,-115, -2,12,-19, 
  /* [5][2][][] */ 0,12,-10, 6,0,-9, 5,15,-8, 
  /* [6][0][][] */ 27,-63,37, 52,-86,44, 10,-19,10, 
  /* [6][1][][] */ 38,-97,64, 68,-127,76, 7,-29,17, 
  /* [6][2][][] */ 21,-35,15, 16,-43,29, -15,6,-2, 
  /* [7][0][][] */ -28,13,2, -110,-45,-1, -20,24,3, 
  /* [7][1][][] */ -13,-11,-1, -127,-101,-10, -2,-6,6, 
  /* [7][2][][] */ -25,29,-11, -14,8,-3, -20,24,-4, 
  /* [8][0][][] */ 118,125,105, 119,127,105, 116,122,101, 
  /* [8][1][][] */ 119,123,103, 117,123,102, 115,120,99, 
  /* [8][2][][] */ 116,121,102, 116,122,102, 115,119,99, 
  /* [9][0][][] */ -17,-7,8, -12,-12,-3, 7,-1,-13, 
  /* [9][1][][] */ 112,124,-13, 83,127,7, -9,16,22, 
  /* [9][2][][] */ -32,-34,10, -2,-43,-11, 4,-6,-34, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-3, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-19,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ -3,-14,9, 18,-30,15, 15,-87,-42, 
  /* [11][1][][] */ -34,-31,-9, -24,-50,-26, -7,-49,-43, 
  /* [11][2][][] */ 1,-28,-65, 118,127,68, -29,20,-36, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,15,11, 
  /* [13][2][][] */ -9,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 48,-3,-35, 81,-24,-48, 34,-7,-18, 
  /* [14][1][][] */ 90,-16,-73, 127,-40,-88, 57,-20,-39, 
  /* [14][2][][] */ 54,-10,-47, 72,-23,-54, 23,-8,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.080375887453556061, 0.045407190918922424, 0.0086828162893652916, 0.0023035428021103144, 0.041537847369909286, 0.041088581085205078, 0.054995935410261154, 0.00075721170287579298, 0.01341736875474453, 0.040009710937738419, 0.0040264874696731567, 2.9411381774480105e-07, 0.030709221959114075, 0.030689310282468796, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.42574962973594666, } };
const TfArray<1, int> quant46_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.38158786296844482, } };
const TfArray<1, int> quant50_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45628896355628967, } };
const TfArray<1, int> quant53_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.57180726528167725, } };
const TfArray<1, int> quant54_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28320604562759399, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19477838277816772, } };
const TfArray<1, int> quant61_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28775948286056519, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.19450199604034424, } };
const TfArray<1, int> quant65_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.29506877064704895, } };
const TfArray<1, int> quant66_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.060834974050521851, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11590217053890228, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
