/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 04.12.2024 16:39:18

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 23442, -40096, -37008, -38374, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00021562029724009335, 0.00014983204891905189, 0.00016513957234565169, 0.00015525911294389516, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 33,-41,-63,-59,127,-14,13,-47,100,-17,77,39,-57,-18,36,-10,2,-16,-108,53,-27,72,-15,90,30,31,-11,46,67,-45,32,-13, 
  /* [1][0][][] */ 70,87,-84,-18,-48,45,113,50,-45,-67,-89,45,100,-58,105,-122,127,-111,28,-59,15,-94,-89,-14,-3,-84,72,-63,-39,-106,-25,-24, 
  /* [2][0][][] */ -26,104,25,82,-68,-7,87,42,-66,-127,90,-57,-83,74,-94,67,52,61,87,-92,-23,24,-51,-51,39,-39,84,-91,-22,22,67,68, 
  /* [3][0][][] */ 79,-72,85,18,-26,115,50,-5,-2,-120,37,115,82,-1,-116,-31,115,-121,114,-11,-127,-8,-38,-52,92,-16,-99,82,-96,123,37,64, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0044954083859920502, 0.00312380725517869, 0.003442949615418911, 0.0032369545660912991, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 359, 290, -62, 136, 1880, 218, 112, 237, -319, 84, 237, 285, 357, -415, -95, 99, 274, 762, 171, 1234, 192, 1007, 1106, 1544, 103, -264, 373, -198, -191, -43, -374, 151, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1073424654314294e-05, 4.585947681334801e-05, 4.3743108108174056e-05, 4.9414142267778516e-05, 4.830621401197277e-05, 4.1804010834312066e-05, 4.0069542592391372e-05, 4.3531152186915278e-05, 4.4937431084690616e-05, 4.4087468268116936e-05, 4.2893545469269156e-05, 4.2851752368733287e-05, 4.5096629037288949e-05, 4.5899789256509393e-05, 5.5733558838255703e-05, 4.4239557610126212e-05, 4.3200245272601023e-05, 4.8365141992690042e-05, 4.0687009459361434e-05, 4.7286484914366156e-05, 4.5870452595409006e-05, 4.8960959247779101e-05, 5.927819074713625e-05, 5.2735002100234851e-05, 4.2104202293558046e-05, 4.2467952880542725e-05, 4.6174514864105731e-05, 4.0421495214104652e-05, 4.0260762034449726e-05, 4.367390283732675e-05, 4.315625483286567e-05, 4.8340705689042807e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -26,-71,123,19,106,2,-90,-91,61,-95,-100,14,67,17,-31,66,-47,-54,-58,-74,-75,-98,-14,104,-124,16,94,-50,119,10,-7,-74,87,-56,-95,76,-117,-80,-81,35,97,-88,-103,115,60,-105,124,-9,-7,-68,-23,95,-69,-37,-84,120,34,76,127,-104,-79,99,-45,59,3,24,83,107,67,109,91,-116,116,-115,55,97,-115,1,-75,39,65,28,93,-5,-50,-65,-88,90,28,121,-1,-106,23,82,51,26, 
  /* [1][0][][] */ -55,50,-69,4,-37,83,46,13,53,-98,-116,100,69,-17,29,75,118,-20,38,127,-48,9,46,32,4,25,-32,118,21,15,74,-56,61,106,3,33,62,60,-5,-48,-75,10,-23,-78,-28,23,-21,-39,8,-91,95,53,13,92,-69,-36,30,107,37,52,-43,116,-43,-69,-67,39,84,51,108,40,13,9,-93,75,-35,56,85,-27,-23,79,-77,86,-33,-118,38,118,-74,-50,79,91,101,17,85,94,3,0, 
  /* [2][0][][] */ 34,45,-64,73,-13,-64,84,109,-99,79,-27,103,71,-34,83,-97,-72,-15,39,51,-88,-33,109,-1,-60,72,116,0,-97,92,91,80,-88,-29,-122,-117,-83,80,116,-14,-102,-68,23,10,-98,127,-41,-76,120,28,103,-86,-36,38,33,-3,-76,101,-60,8,-12,49,-39,76,101,50,56,69,-90,49,-16,-61,20,-84,39,28,-71,-34,13,-4,42,-111,3,-31,-15,-98,-42,-22,89,121,-42,11,-53,-83,-35,-89, 
  /* [3][0][][] */ 48,17,26,-19,-54,31,-87,50,34,20,59,-1,84,66,70,21,97,104,-40,28,105,-91,-45,-99,-54,-91,-58,108,41,-73,83,1,-61,-27,-12,-12,-65,-24,49,58,-20,-70,-70,16,61,32,-50,-64,87,-80,51,0,94,20,88,-103,-108,-87,-104,-67,-71,36,-15,75,58,-23,-39,-19,-22,-51,-11,99,31,-107,61,-34,32,99,100,-45,-74,-127,53,90,11,46,-54,-89,-65,56,5,-92,83,-77,-76,21, 
  /* [4][0][][] */ 69,93,6,71,21,-37,80,13,73,125,37,27,41,-8,5,-60,-44,-8,-46,27,123,-80,97,40,55,44,57,-49,-21,37,-10,-35,97,127,42,-66,-57,40,-90,23,-7,18,-43,-77,58,114,35,43,-18,5,18,-57,-34,44,-48,26,54,-84,87,38,4,-61,-47,-4,-9,72,4,-21,33,-110,-55,-31,-55,76,102,75,65,-36,-5,-44,49,-23,-81,59,-2,92,126,-4,-45,-41,51,62,38,80,-22,23, 
  /* [5][0][][] */ 108,-100,93,91,48,-102,30,71,103,-112,5,-58,27,102,42,47,69,60,-67,89,32,57,7,-40,-126,-60,-5,-97,50,42,28,-94,-48,8,-78,25,-118,-39,59,30,-79,-49,43,109,-32,33,42,-46,-121,101,36,32,48,24,49,-22,116,56,-55,-36,35,-58,43,-66,-23,110,-18,35,85,4,95,-66,-41,67,-19,-68,0,-68,9,84,116,47,32,115,-75,70,-14,35,69,-101,127,103,-10,37,85,-90, 
  /* [6][0][][] */ 20,-35,125,87,-83,-64,9,86,-37,-81,9,-85,95,60,127,-111,52,18,11,118,-85,-121,116,59,-90,-77,2,-55,-23,-107,59,-79,-104,-122,-48,-104,-3,45,-103,96,100,71,30,-3,-122,119,-88,-37,-64,19,-16,-66,72,-52,115,-26,14,4,-80,115,-95,10,90,-65,-46,75,121,-40,92,2,-124,3,73,-82,-83,-33,-98,-101,-54,-31,40,-25,63,-23,-66,-95,-62,-96,95,115,112,22,-47,-61,89,-31, 
  /* [7][0][][] */ 118,84,-32,-35,-69,127,-11,9,94,6,-101,25,62,-80,52,87,70,34,8,126,50,48,3,86,-100,108,50,71,-67,117,-19,43,24,32,73,107,-90,85,1,-13,95,-70,82,81,54,-5,111,-97,85,-68,-104,-65,-20,99,26,40,121,-76,-9,-75,18,5,97,-104,-65,-48,80,35,-97,35,58,88,98,10,70,69,-60,70,-84,54,91,-28,-3,-75,99,37,-118,103,82,19,98,65,-46,-30,-16,-62, 
  /* [8][0][][] */ 13,14,-46,-89,50,24,-80,-32,5,30,40,88,-6,-43,-93,-83,-81,74,-68,1,14,-30,65,100,-84,80,29,56,-74,5,-91,109,89,-40,36,-8,97,7,-30,54,74,91,-94,-127,-16,-38,-24,96,-6,-81,-73,10,-69,-17,-39,-107,43,89,-83,115,95,31,23,96,-42,-55,-34,84,-93,44,39,-12,61,82,-3,11,-55,87,59,61,30,80,-125,-78,20,23,80,-58,28,-54,-91,92,-85,-106,-43,63, 
  /* [9][0][][] */ 0,23,112,49,84,-107,-50,-113,73,52,-2,52,-25,-74,-96,-30,10,39,-89,-49,27,98,-70,-92,127,-6,-10,27,-9,-65,-90,97,67,-1,30,-15,-56,29,-34,-54,45,-61,76,-97,80,28,-97,61,91,0,-71,-19,76,-77,-74,100,90,-61,26,-1,-78,98,79,-76,-75,3,101,43,-40,115,124,-75,3,107,-108,-93,-66,-111,0,108,39,28,117,40,-46,-58,45,42,108,46,-30,107,108,4,82,-27, 
  /* [10][0][][] */ -77,96,80,-76,-6,89,117,44,26,26,30,-79,93,66,-26,26,-38,95,-88,-50,-11,16,64,-69,7,58,-106,-107,-56,92,-84,-96,75,96,113,67,-31,9,-22,47,-29,125,-97,-25,-111,-52,-21,-56,16,4,52,14,73,4,-58,-50,-112,-4,30,-58,9,75,122,50,127,-73,-83,-21,20,-21,-113,-56,85,68,-73,118,-21,73,79,16,83,-13,75,115,-116,73,79,-15,45,24,-13,-68,-57,-55,-37,-79, 
  /* [11][0][][] */ 120,4,0,111,127,59,58,44,105,101,-65,125,-3,-81,29,-57,-55,-106,67,29,29,79,17,-120,-98,-89,-10,69,79,4,41,-12,-94,-66,47,52,-59,77,-15,-60,-10,113,-74,15,-37,-50,-87,-82,69,97,125,48,-81,-80,32,28,-61,-54,-16,-84,-83,100,89,20,41,96,-52,34,97,56,-88,-62,49,97,-89,59,-74,24,-58,90,-97,-20,-70,-35,55,-83,16,-41,-92,-2,16,-88,-78,-30,-55,-36, 
  /* [12][0][][] */ 27,49,-35,13,90,29,-32,43,-71,66,-5,31,-31,23,56,-66,-74,-47,-35,-93,23,5,5,86,-56,-39,108,-93,98,25,-20,126,-80,-54,-39,26,-7,-67,-3,38,127,44,-107,-34,-9,-68,-19,127,-61,-116,-63,102,43,24,-63,95,-8,-53,59,75,50,125,6,61,119,43,-35,124,68,109,45,73,94,100,-4,5,-35,22,-124,-80,-45,110,38,16,-19,16,55,96,-90,-104,102,57,109,1,40,80, 
  /* [13][0][][] */ 88,-60,81,82,84,95,74,68,39,-108,-1,-41,65,57,48,-41,-127,-64,-62,33,53,-34,103,-65,-84,32,-3,4,-92,-86,68,20,26,81,-33,29,-79,-31,20,61,-69,72,-42,7,-56,17,-18,-34,33,87,-28,-95,-94,7,91,-88,-51,23,-37,-97,-22,95,-69,9,-55,-77,-80,73,-46,-8,68,0,-97,30,-78,-37,-124,60,75,-73,39,-99,104,26,-88,-118,63,111,-13,-38,-77,32,101,-50,57,-16, 
  /* [14][0][][] */ -46,-75,67,53,58,-23,-14,-91,-49,-31,51,63,-14,-62,-71,-69,-35,-44,8,21,-37,29,1,59,-87,-59,-25,31,-91,-95,-64,26,88,-18,-24,1,79,90,24,-78,-8,-88,29,72,61,-90,58,-65,127,27,56,42,73,-7,-15,18,-41,7,39,73,-12,-61,-22,53,-73,-11,56,-84,-73,-67,-59,69,9,66,37,-59,76,-62,41,37,34,-19,-93,-34,-74,-67,-84,83,83,6,68,-41,61,75,-17,50, 
  /* [15][0][][] */ 13,-1,-34,69,95,-90,65,-80,69,-5,-63,0,104,4,-79,-90,96,33,-79,43,65,17,87,103,58,67,53,106,23,62,62,-99,3,9,-58,-2,-50,109,113,-54,9,118,-32,-11,19,-64,-40,-62,25,-66,20,49,-89,-104,-54,-11,68,63,-53,99,-26,-69,18,102,-20,100,-55,9,-53,10,70,-55,18,-12,64,-97,9,63,127,86,-80,59,-75,-44,-120,-16,-95,55,93,87,-104,-49,51,114,-110,109, 
  /* [16][0][][] */ -60,6,114,-51,50,127,-46,54,38,56,-100,84,-4,-40,-43,-46,120,87,82,70,112,90,-40,50,-52,64,-54,70,-91,28,51,23,-105,85,62,68,-25,57,-36,-56,33,-39,75,102,69,109,111,-1,-42,-110,18,112,-31,127,80,54,34,100,68,15,125,121,48,72,65,23,-23,103,56,110,-34,-1,43,84,75,97,-12,108,-103,-7,22,-74,69,17,24,96,98,16,82,21,-2,121,81,-17,-72,29, 
  /* [17][0][][] */ 28,-60,23,81,-24,-122,-36,-59,49,-70,92,42,96,51,-93,75,26,76,105,127,-61,-21,43,-47,0,77,-59,61,104,-25,-13,64,-26,-8,37,17,-26,101,-57,-7,-75,-16,14,18,1,24,73,-87,112,107,9,47,9,51,94,-74,-92,103,-64,-104,45,-84,88,109,-56,-46,61,-77,-84,6,96,55,27,-94,-35,79,122,-37,72,-40,28,-17,-32,-55,-110,81,76,-6,48,96,-80,-100,-5,88,13,17, 
  /* [18][0][][] */ -98,118,127,-63,-4,-100,-103,28,-13,81,-106,-31,-34,33,69,-43,35,-11,73,-14,111,-45,31,-88,-4,-95,-3,124,33,52,14,49,35,-25,-115,-104,-15,23,-16,80,-26,11,-35,5,-122,26,32,15,48,-39,91,39,-102,-4,23,88,-34,49,-18,-126,100,125,34,51,-59,-118,-18,103,83,-65,-84,125,-84,-80,-76,-96,58,75,12,-67,-52,-7,-3,-57,116,-29,59,83,-106,-54,-55,119,104,-43,62,-22, 
  /* [19][0][][] */ 29,25,91,60,81,-85,113,96,113,-32,60,-3,-75,51,-41,62,56,-109,106,64,7,76,-28,22,127,-48,31,-60,-66,-98,-27,50,91,-61,45,17,24,-30,-29,-109,68,-67,-48,13,-64,48,73,-70,-50,58,-15,76,1,13,25,-6,43,87,45,-1,66,-43,86,88,-37,13,-18,7,2,57,96,-15,-55,-73,-35,-46,-7,-101,21,114,88,-92,-22,101,-69,32,45,8,120,44,9,79,-21,103,93,-11, 
  /* [20][0][][] */ -6,76,65,97,-77,90,27,50,19,20,-81,8,1,100,41,-66,-33,-18,-53,-12,26,-7,-57,-45,90,-57,-98,56,37,12,-40,110,114,48,6,59,45,-17,-16,-103,-78,-24,-77,-95,-13,-62,-51,104,79,-102,-95,47,46,122,48,26,94,73,97,79,107,-47,-47,-28,-24,-58,-46,23,-75,-53,-42,74,-49,-67,29,26,120,91,108,116,82,17,92,-19,74,127,0,72,27,100,38,59,26,26,-7,28, 
  /* [21][0][][] */ 76,80,72,-73,105,-82,87,38,11,-54,-40,49,11,29,-29,-59,-89,-14,45,4,113,-49,73,-59,66,-59,-16,77,26,18,12,-18,12,25,-76,-76,103,110,-86,-20,4,21,52,2,-93,-61,-77,95,-15,-26,14,118,49,48,-70,12,-27,63,-34,127,68,-65,19,7,86,36,-7,-43,-82,15,58,85,36,8,83,80,-86,-24,69,106,39,86,52,-40,18,-75,55,-61,-70,82,103,-81,-18,-46,74,-9, 
  /* [22][0][][] */ 43,-26,-43,-51,93,-33,104,61,-37,102,-17,-78,93,-62,-71,-50,40,79,-60,-27,88,-48,47,31,127,25,-78,81,-24,-55,-12,-62,43,61,25,33,1,29,-29,-87,48,28,37,71,48,-44,96,22,-44,-18,44,20,-22,-63,-20,30,23,-16,36,8,84,-54,-55,-56,-15,26,-65,-20,95,102,4,30,-46,41,57,-48,44,-22,59,82,101,-49,-38,-28,67,91,92,1,-6,37,-31,53,27,29,21,97, 
  /* [23][0][][] */ 68,-71,17,76,111,-118,35,-86,76,-37,107,56,31,-62,33,-33,60,-33,-71,101,106,-58,103,0,32,19,70,18,81,38,79,-23,4,54,44,49,85,34,-82,-15,-72,29,38,-93,-25,-52,101,27,36,-44,-59,-16,93,-37,-27,87,-54,-17,107,67,-81,-70,-54,16,46,45,-88,-78,59,2,124,-32,-5,14,-22,-49,51,-16,78,107,-11,-23,20,-43,81,37,127,-12,-43,45,101,11,92,-52,2,106, 
  /* [24][0][][] */ -79,-44,-103,-71,-81,-102,-64,-80,61,127,88,43,118,53,-36,-108,-79,54,36,-52,98,-91,-60,-45,8,-26,87,59,107,68,15,-61,-15,13,44,35,-47,-96,75,-10,-67,-93,105,16,23,-31,38,80,-76,-59,-10,20,80,63,86,-85,-4,88,20,-1,100,3,47,107,-92,104,-37,-85,-99,56,-71,-21,-32,22,108,109,59,-74,-104,-87,-78,-103,-53,-120,0,62,-33,-96,25,-101,11,-76,-14,42,-89,18, 
  /* [25][0][][] */ -93,-58,-89,-19,92,-82,-110,47,45,-120,-40,16,66,-8,-119,-30,-80,61,28,-117,64,77,-12,-61,37,-61,-112,32,70,-102,37,110,88,-118,37,65,89,-65,-35,-25,-86,98,-105,-5,93,47,64,31,-107,90,-69,0,40,-28,-73,4,-27,45,-110,77,113,34,41,39,2,69,-27,-15,-101,-11,-29,-119,26,-118,64,14,68,68,10,13,43,45,-54,126,-84,-35,-110,-99,-27,-45,97,17,-127,-23,-17,-89, 
  /* [26][0][][] */ 53,-86,-21,2,-95,4,6,-11,-119,-115,86,80,-58,-29,20,1,124,48,-71,-40,15,87,109,25,23,74,18,68,32,21,-99,7,-17,-43,-71,-83,-43,86,-41,116,-103,95,52,45,-60,58,-25,107,11,25,-12,91,11,-26,-2,-79,99,77,40,8,15,-75,86,-15,99,-6,-37,71,-68,93,85,91,94,-94,-65,24,54,-80,-69,24,-27,80,99,-70,91,13,-41,27,-62,127,27,10,-39,115,36,92, 
  /* [27][0][][] */ 16,8,-65,-110,-114,-64,-69,-13,56,102,52,-117,-31,57,90,-35,73,-13,63,-109,-92,10,-42,-21,-114,45,-110,-12,61,23,-24,5,66,75,-107,-86,-116,-73,-127,103,-88,28,39,22,110,37,70,102,87,75,74,-65,-98,-98,0,-41,115,-26,-117,-65,-60,-65,-52,53,50,-45,-120,111,52,16,-119,9,55,-57,-15,-97,51,-90,87,100,95,-20,110,-53,-82,-96,-37,36,-65,-20,-44,-38,65,28,98,59, 
  /* [28][0][][] */ 91,6,82,41,-120,-70,-103,-84,-20,-114,70,76,-90,-100,-8,97,89,127,-83,78,-19,10,-100,-85,-100,82,-93,-66,-90,-95,1,-20,-112,13,80,68,43,-118,-47,34,117,49,-101,51,-113,-6,7,43,28,-66,-74,-9,-92,17,51,37,58,-15,101,62,2,-52,-108,6,73,73,-37,78,-93,22,-120,-40,67,75,-12,-119,-109,-63,-67,37,-86,-104,115,-17,59,-111,82,-66,-117,-81,-52,-73,-56,40,-60,-86, 
  /* [29][0][][] */ 46,60,57,-62,-72,12,-111,27,100,-9,-74,-94,92,-115,-40,-30,-108,112,40,-65,-62,-46,54,-11,-64,10,-24,-44,-120,10,120,-8,34,-5,-101,-57,-9,96,7,107,66,115,-30,97,-13,119,-60,-19,33,-6,76,-85,85,-115,127,32,-93,67,-42,115,-108,89,-99,-37,-43,-55,65,75,100,-93,18,-55,100,71,69,28,97,-71,-20,20,7,-93,9,-61,51,112,26,88,-30,106,56,91,-103,20,15,42, 
  /* [30][0][][] */ 17,-64,-69,25,-101,20,-65,-13,109,-23,0,-46,-110,6,51,10,-12,36,84,-110,34,-105,-114,6,-111,15,-74,114,-18,-108,-95,0,-92,-78,-127,-61,15,-25,-5,24,89,-76,-19,97,96,-50,92,57,-70,62,16,-103,92,-52,-16,92,-81,-59,-81,-55,-104,-7,-72,-31,-112,-90,-98,83,-67,99,36,-38,-97,101,39,-88,-61,-71,-75,-65,20,15,-107,-22,-109,28,-112,106,-37,-115,67,47,-42,-8,7,-79, 
  /* [31][0][][] */ 70,-69,39,92,54,53,-43,-69,-32,-11,-61,-70,92,-127,-35,115,-55,-64,46,55,65,8,-19,88,16,-93,47,43,-68,-50,56,95,-5,23,-86,-4,99,-26,-44,-83,66,-51,-13,44,-2,-37,-37,31,86,20,100,-23,-89,-61,-56,-1,-103,75,9,101,-23,4,91,-54,75,107,-25,-63,74,-101,-120,23,-75,-43,18,15,-56,-31,59,83,-58,-50,71,78,30,90,-94,28,26,-30,-74,-40,16,100,9,-39, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.00174562050960958, 0.001949027762748301, 0.0018590820254758, 0.0021001009736210108, 0.0020530140027403831, 0.0017766704550012946, 0.0017029555747285485, 0.0018500739242881536, 0.0019098407356068492, 0.001873717294074595, 0.0018229755805805326, 0.001821199432015419, 0.0019166066776961088, 0.001950741047039628, 0.0023686762433499098, 0.0018801811384037137, 0.0018360103713348508, 0.0020555185619741678, 0.0017291979165747762, 0.0020096756052225828, 0.0019494942389428616, 0.0020808407571166754, 0.0025193230248987675, 0.0022412375546991825, 0.0017894285265356302, 0.0018048880156129599, 0.0019624168053269386, 0.0017179135465994477, 0.0017110822955146432, 0.0018561409087851644, 0.0018341407412663102, 0.0020544799044728279, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1526, -57, 2642, 5738, 5137, -1701, 3252, -1323, -2196, -617, 4351, -2628, 4249, 5049, 2383, 2563, -482, -326, -1403, 4637, 2276, -390, 2623, -634, -545, 2893, 1300, 1516, 5216, 2769, 4832, 876, 1410, 6267, 4405, 3503, -508, 3977, 3101, -4010, -245, 1193, -80, 1692, -1077, 536, -1152, 731, -4973, 1469, 1085, -2882, 7967, -675, 1906, 1150, 1060, 2476, -851, -2016, 274, 1325, 411, 4414, 5222, 3827, 3075, 5579, 4649, -621, 3721, 5262, 2824, -1718, 4766, 5772, 904, -3565, 664, 1246, 7531, 1992, -372, -2561, 1218, 790, 2054, -2247, 2959, -339, 4005, 1029, 155, -3455, -303, 1583, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00013241369742900133, 0.00025364209432154894, 0.00022081131464801729, 0.00013285104068927467, 0.00012301070091780275, 0.0002283614594489336, 0.00018286218983121216, 0.00017446519632358104, 0.00018292601453140378, 0.0002438762312522158, 0.00014566884783562273, 0.00016751833027228713, 0.00013155113265383989, 0.00011327767424518242, 0.00012780503311660141, 0.0001559778320370242, 0.00025148066924884915, 0.000241242436459288, 0.00020490342285484076, 0.0001356961001874879, 0.000194255102542229, 0.00020356332242954522, 0.00013940552889835089, 0.00020012493769172579, 0.00030737314955331385, 0.00021170248510316014, 0.00020586163736879826, 0.00023943449195940048, 0.00014018893125467002, 0.00015372074267361313, 0.00010823957563843578, 0.00026034496841020882, 0.00021071913943160325, 0.00010348623618483543, 0.00014923236449249089, 0.00014372327132150531, 0.00018960917077492923, 0.00011685926438076422, 0.0001141838583862409, 0.00013528187992051244, 0.00024084262258838862, 0.00016864978533703834, 0.00021098641445860267, 0.00016666229930706322, 0.00019883981440216303, 0.00015053061360958964, 0.00019971531582996249, 0.0001881374919321388, 0.00013328671047929674, 0.00016859600145835429, 0.00023636624973732978, 0.0001625969453016296, 9.1316796897444874e-05, 0.00022660726972389966, 0.00018098019063472748, 0.00022736612299922854, 0.0001945120602613315, 0.0001663156581344083, 0.00017602239677216858, 0.00015642735525034368, 0.00022602542594540864, 0.00020112690981477499, 0.00023168495681602508, 0.00014502290287055075, 0.00013085857790429145, 0.0001256363611901179, 0.00011307746171951294, 0.00013017169840168208, 0.00014442461542785168, 0.00020133673388045281, 0.00014575070235878229, 0.00012792818597517908, 0.00016713570221327245, 0.000139517622301355, 0.00014817787450738251, 0.00013988550927024335, 0.00016874604625627398, 0.00017502985429018736, 0.00017701741307973862, 0.00017861829837784171, 0.00011407896818127483, 0.00016064119699876755, 0.00019882855121977627, 0.00016236951341852546, 0.00018386762531008571, 0.00016250018961727619, 0.00015522351895924658, 0.0001844820799306035, 0.00021667817782144994, 0.00019606832938734442, 0.00015210153651423752, 0.0002319702907698229, 0.00016193966439459473, 0.00011712608829839155, 0.00021380648831836879, 0.00018532470858190209, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -4,109,-93,35,42,-39,92,70,-51,6,31,-104,81,127,-65,28, 
  /* [1][0][][] */ -18,5,-57,-23,-13,37,17,-127,33,-40,-25,-53,-14,-42,-49,9, 
  /* [2][0][][] */ -18,-19,28,72,18,38,-115,127,-24,5,74,-64,-23,-68,-46,73, 
  /* [3][0][][] */ 95,-91,80,-9,-8,-40,-39,127,-22,64,62,43,-8,56,14,5, 
  /* [4][0][][] */ -28,-4,-11,65,-103,25,-41,-117,10,-1,25,-30,47,56,119,127, 
  /* [5][0][][] */ 121,20,-16,-35,-74,27,22,72,4,-11,60,99,127,22,-93,-5, 
  /* [6][0][][] */ 5,-36,-51,-51,-59,10,11,-53,-40,-57,-26,35,77,48,127,-21, 
  /* [7][0][][] */ -54,43,-40,-82,-5,-62,-90,22,-99,55,-70,-71,-127,-32,18,104, 
  /* [8][0][][] */ 54,45,68,9,58,23,70,12,62,-24,39,11,-127,-26,-76,13, 
  /* [9][0][][] */ -34,71,28,-41,-37,-20,29,-16,-25,52,-48,7,45,127,27,36, 
  /* [10][0][][] */ 77,43,-35,59,-20,-6,60,-53,-67,-38,-59,-101,-127,-72,19,81, 
  /* [11][0][][] */ 54,1,71,5,-4,-25,13,125,-107,27,-34,9,-7,2,72,127, 
  /* [12][0][][] */ -64,-21,-8,-8,15,-7,127,38,-63,28,10,-17,-15,87,-59,120, 
  /* [13][0][][] */ 15,29,31,43,127,52,95,91,-52,88,-76,-42,34,87,-90,-30, 
  /* [14][0][][] */ -120,124,-2,-26,3,9,55,6,-54,30,127,3,-84,27,-59,60, 
  /* [15][0][][] */ -21,-28,-127,-55,88,-43,-87,-40,-30,-27,-17,-64,-7,-86,-63,44, 
  /* [16][0][][] */ 107,-33,12,-23,35,-33,42,-33,-47,7,127,61,52,-4,-48,12, 
  /* [17][0][][] */ 5,8,-34,-100,-15,-65,99,-127,-3,-13,-43,38,26,62,-2,46, 
  /* [18][0][][] */ 30,127,-20,-52,49,-82,-31,-54,-35,122,-26,-2,-27,44,-18,-17, 
  /* [19][0][][] */ -76,-120,107,-103,33,-127,17,-53,38,31,87,108,32,-2,61,-30, 
  /* [20][0][][] */ -20,91,52,-3,8,-3,13,-33,57,-9,96,-19,-127,-31,-80,-5, 
  /* [21][0][][] */ -52,31,19,3,59,36,52,49,-127,46,-35,22,-14,7,-66,-19, 
  /* [22][0][][] */ 10,-91,34,2,14,-127,99,-5,17,-53,-41,-71,37,-83,-51,-53, 
  /* [23][0][][] */ -57,-89,39,68,26,-18,17,-39,16,-34,74,-7,11,72,84,127, 
  /* [24][0][][] */ -1,1,24,75,49,17,-56,-127,63,16,-35,18,4,8,-27,-20, 
  /* [25][0][][] */ -19,24,19,-57,-23,-5,18,-40,-31,50,-34,-5,35,127,21,1, 
  /* [26][0][][] */ -53,85,3,26,30,-78,-5,-23,17,26,8,61,15,3,-78,127, 
  /* [27][0][][] */ -23,-127,-42,-2,-53,76,-4,-63,10,-37,54,-20,23,-46,-94,-20, 
  /* [28][0][][] */ -31,2,41,82,34,16,-40,-127,-127,50,102,-10,81,11,-48,-30, 
  /* [29][0][][] */ -116,110,-30,-38,-30,22,-127,-65,-49,-35,1,-1,14,-59,-109,69, 
  /* [30][0][][] */ 54,92,-64,77,-119,-109,-94,-23,-35,-2,2,-119,127,30,-13,102, 
  /* [31][0][][] */ 127,29,-55,-27,-67,18,93,41,-52,-12,56,41,36,22,-24,10, 
  /* [32][0][][] */ -35,-20,127,7,-24,67,80,11,-12,-10,-6,17,3,66,69,36, 
  /* [33][0][][] */ -16,13,-76,-67,-23,23,127,14,-13,-22,44,-54,92,125,-58,51, 
  /* [34][0][][] */ -95,-23,109,31,33,-49,112,-10,-127,33,33,-46,56,67,-36,-46, 
  /* [35][0][][] */ -2,18,-52,6,-62,127,-39,-10,-27,115,0,95,-56,64,15,38, 
  /* [36][0][][] */ -5,-75,127,-40,-44,21,-38,0,19,23,-52,74,-1,-81,-29,39, 
  /* [37][0][][] */ 87,-16,65,-42,112,-87,-61,29,-66,127,-68,2,-105,-43,118,-20, 
  /* [38][0][][] */ 45,39,19,-96,-18,-62,-92,49,-74,51,-102,-61,-78,-127,-105,63, 
  /* [39][0][][] */ -74,28,-65,-36,-86,-87,68,14,-127,-29,25,82,34,2,-13,63, 
  /* [40][0][][] */ 127,43,8,-81,-79,29,6,-27,-35,-14,-48,-84,24,46,29,49, 
  /* [41][0][][] */ 92,-82,-64,-50,-10,-8,-61,-28,64,-26,9,-60,127,-71,59,-39, 
  /* [42][0][][] */ -22,-103,-43,127,14,-101,-111,9,5,8,8,66,-91,77,-68,-10, 
  /* [43][0][][] */ -86,-39,-55,-127,-66,0,-10,84,35,-117,-37,31,-17,-46,-37,106, 
  /* [44][0][][] */ -31,39,35,-36,-16,-18,43,127,118,-79,76,103,123,45,-22,2, 
  /* [45][0][][] */ 23,89,-96,93,127,-107,-54,-81,111,-75,77,-70,-37,9,-84,74, 
  /* [46][0][][] */ -19,-34,4,-15,104,-23,27,26,-14,127,-27,-123,41,63,-54,84, 
  /* [47][0][][] */ 83,-33,-23,-4,80,-8,-37,-47,-8,127,-27,32,2,-91,-73,7, 
  /* [48][0][][] */ 4,6,-7,-127,-8,-55,92,-124,2,-5,-35,53,32,41,-7,27, 
  /* [49][0][][] */ -19,127,-64,37,35,-57,59,49,-20,20,38,-91,-37,68,115,-92, 
  /* [50][0][][] */ 8,39,-27,-3,-127,-6,-71,-60,49,63,31,30,-38,-37,-6,39, 
  /* [51][0][][] */ 127,-37,-52,-22,-42,93,-101,-38,42,-16,-38,71,-25,-64,-4,43, 
  /* [52][0][][] */ -35,-75,50,66,-37,-122,-127,-22,-49,-58,-36,-62,11,-72,21,81, 
  /* [53][0][][] */ 22,82,48,-127,14,108,78,-16,-19,-24,-1,-29,84,-102,-3,54, 
  /* [54][0][][] */ 25,127,-2,-28,-13,-101,-115,47,13,-21,-45,121,74,84,12,69, 
  /* [55][0][][] */ -30,-6,44,18,52,-28,94,93,-86,-4,19,18,127,38,-20,10, 
  /* [56][0][][] */ 127,13,16,15,-37,118,-46,-71,-33,50,-79,14,-50,101,-16,32, 
  /* [57][0][][] */ -49,-34,-62,-45,-78,-112,54,-33,-127,-25,47,61,11,30,-15,48, 
  /* [58][0][][] */ 44,-51,63,22,10,-56,-14,9,24,-15,-127,-24,25,-31,-34,39, 
  /* [59][0][][] */ 79,15,-127,107,12,35,100,-32,-67,-46,28,-99,-120,-64,37,106, 
  /* [60][0][][] */ 5,34,-14,25,-11,-19,-27,10,-40,-71,64,127,-40,-122,-38,-4, 
  /* [61][0][][] */ -16,24,67,-100,-74,42,-10,119,-28,-87,41,61,85,-11,1,127, 
  /* [62][0][][] */ 66,32,-14,-127,-22,-2,1,-40,-11,30,-32,46,25,-17,-84,-66, 
  /* [63][0][][] */ 6,-20,-2,-1,-78,-81,-69,15,-69,-8,-39,-31,127,0,55,-10, 
  /* [64][0][][] */ 31,15,-28,50,-121,-48,-39,-80,55,123,36,-5,41,-54,-53,127, 
  /* [65][0][][] */ -20,18,-27,-19,-85,75,18,-18,50,-112,90,-71,81,62,-127,69, 
  /* [66][0][][] */ -127,79,-94,-92,44,-34,-110,-65,-108,115,87,8,-109,-54,31,54, 
  /* [67][0][][] */ 11,-26,-127,-113,61,70,2,-19,-35,-1,42,-22,32,32,10,55, 
  /* [68][0][][] */ 68,37,-19,-55,-76,38,9,52,-70,74,126,-24,-7,-56,-127,7, 
  /* [69][0][][] */ 77,-88,46,-49,28,-93,-34,127,-8,64,80,78,-10,71,-30,4, 
  /* [70][0][][] */ 59,14,127,30,109,-13,116,20,22,36,-66,41,-68,74,-96,35, 
  /* [71][0][][] */ 2,17,104,-88,-127,-90,19,-2,-31,-16,22,-99,-81,-1,7,28, 
  /* [72][0][][] */ -50,-84,14,-116,64,-18,2,51,-62,17,-118,-22,61,112,-63,127, 
  /* [73][0][][] */ 24,24,49,-5,127,-96,-53,5,-34,104,-89,30,-81,-60,127,-16, 
  /* [74][0][][] */ -89,15,-127,-48,50,-45,-36,35,-68,11,-114,-42,-31,-56,-36,86, 
  /* [75][0][][] */ 80,-19,38,-49,11,5,-127,-22,-11,-89,65,6,8,-9,-12,-3, 
  /* [76][0][][] */ -15,-74,-38,87,15,71,97,-75,81,-127,73,113,34,-90,-68,47, 
  /* [77][0][][] */ -53,-46,127,-28,29,-33,-24,-125,17,23,42,100,45,46,9,9, 
  /* [78][0][][] */ -56,-7,15,-41,5,-56,32,-22,20,-13,19,-85,-105,-62,-127,-57, 
  /* [79][0][][] */ -106,-87,-19,20,127,35,-23,19,26,33,-20,50,-57,-79,-66,-25, 
  /* [80][0][][] */ 11,-88,36,127,-37,-23,-97,81,-2,27,62,-7,-79,-2,-9,60, 
  /* [81][0][][] */ 108,54,-11,70,8,47,32,127,10,8,118,67,127,32,56,-26, 
  /* [82][0][][] */ -55,3,6,-36,24,-127,-117,-87,-1,70,-40,-28,-23,93,-69,-18, 
  /* [83][0][][] */ 104,-9,81,-21,-44,-7,-127,1,27,-110,10,-56,-12,-10,15,-15, 
  /* [84][0][][] */ 14,-72,-83,14,122,45,29,35,-127,20,-102,-16,61,-34,-70,15, 
  /* [85][0][][] */ -2,69,27,-60,82,-13,33,-127,113,-44,42,-4,89,-81,-4,8, 
  /* [86][0][][] */ 126,-33,127,52,-3,-63,74,38,-58,-56,-102,-54,36,15,-65,16, 
  /* [87][0][][] */ 0,15,15,-66,69,-23,-39,22,38,-32,67,-38,-83,-127,-2,23, 
  /* [88][0][][] */ -69,-43,35,-10,18,25,-71,-58,-9,8,-73,-127,-54,-43,-22,-14, 
  /* [89][0][][] */ -89,-3,9,-79,19,-6,-127,8,80,17,-60,-4,-22,-76,-50,-19, 
  /* [90][0][][] */ -6,-13,-36,-87,127,25,-66,46,38,52,30,-9,41,18,-68,-13, 
  /* [91][0][][] */ -25,-47,11,37,-36,-5,-19,79,-47,-40,22,-44,7,52,14,127, 
  /* [92][0][][] */ -25,74,0,-19,-11,70,-102,56,-48,-9,67,9,-27,127,47,24, 
  /* [93][0][][] */ -15,68,-53,-81,79,95,-88,0,60,65,80,66,-127,26,-49,73, 
  /* [94][0][][] */ 34,70,112,17,-127,-34,11,-6,28,-21,23,-25,-66,-27,20,-33, 
  /* [95][0][][] */ 1,20,31,-11,127,-8,-86,79,7,24,-65,95,7,15,82,-30, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015030326321721077, 0.0028791006188839674, 0.0025064372457563877, 0.0015079969307407737, 0.0013962988741695881, 0.0025921391788870096, 0.0020756754092872143, 0.0019803608302026987, 0.0020763997454196215, 0.0027682478539645672, 0.0016534923342987895, 0.0019015066791325808, 0.0014932416379451752, 0.0012858189875259995, 0.0014507195446640253, 0.0017705099890008569, 0.0028545663226395845, 0.0027383517008274794, 0.0023258661385625601, 0.0015402913559228182, 0.0022049967665225267, 0.0023106546141207218, 0.0015823972644284368, 0.0022716254461556673, 0.00348900374956429, 0.0024030425120145082, 0.0023367428220808506, 0.00271782954223454, 0.0015912896487861872, 0.0017448897706344724, 0.0012286313576623797, 0.0029551850166171789, 0.0023918806109577417, 0.0011746759992092848, 0.0016939420020207763, 0.0016314081149175763, 0.0021522606257349253, 0.0013264737790450454, 0.001296105096116662, 0.0015355895739048719, 0.0027338133659213781, 0.00191434973385185, 0.0023949143942445517, 0.001891789841465652, 0.0022570379078388214, 0.0017086784355342388, 0.0022669758182018995, 0.0021355554927140474, 0.0015129422536119819, 0.0019137393683195114, 0.0026830018032342196, 0.0018456437392160296, 0.001036540255881846, 0.002572227269411087, 0.0020543127320706844, 0.0025808410719037056, 0.0022079134359955788, 0.0018878551200032234, 0.0019980366341769695, 0.0017756125889718533, 0.0025656227953732014, 0.0022829987574368715, 0.0026298642624169588, 0.0016461602644994855, 0.0014853804605081677, 0.001426102826371789, 0.0012835463276132941, 0.0014775836607441306, 0.0016393690602853894, 0.0022853806149214506, 0.0016544214449822903, 0.0014521174598485231, 0.0018971634563058615, 0.0015836695674806833, 0.0016819724114611745, 0.0015878455014899373, 0.0019154425244778395, 0.0019867701921612024, 0.0020093310158699751, 0.0020275027491152287, 0.001294914516620338, 0.0018234440358355641, 0.0022569100838154554, 0.0018430622294545174, 0.002087088068947196, 0.0018445454770699143, 0.0017619477584958076, 0.0020940627437084913, 0.002459521871060133, 0.0022255787625908852, 0.0017265101196244359, 0.0026331031695008278, 0.001838182914070785, 0.0013295024400576949, 0.0024269251152873039, 0.0021036274265497923, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9979, 20041, -5245, 1916, -3285, 5841, -5047, 7838, 12785, -3772, -7395, 8443, -13030, 15611, 3329, 13620, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3106763516552746e-05, 5.7601511798566207e-05, 5.8058496506419033e-05, 6.6865301050711423e-05, 7.7779215644113719e-05, 7.7100972703192383e-05, 5.1021648687310517e-05, 6.3884712290018797e-05, 0.00010572594328550622, 7.9929734056349844e-05, 4.8433146730531007e-05, 6.4308784203603864e-05, 6.4290099544450641e-05, 6.3693463744129986e-05, 8.8757820776663721e-05, 7.7611730375792831e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -118,42,72,-40,-63,-8,-69,9,-46,9,-13,-33,31,33,32,-33,8,2,104,18,9,-57,127,77,58,21,-3,26,-66,-121,-86,13,-41,-40,24,14,9,24,6,33,-20,2,-90,12,-78,-14,-10,89,-26,4,-56,-29,0,1,31,-62,-103,-10,-7,88,64,34,2,-3,-30,-55,-58,35,-65,-68,4,-23,9,4,-82,-44,-38,8,-30,1,-60,63,85,-73,13,66,11,42,34,-9,2,-16,-46,-43,-52,16, 
  /* [1][0][][] */ 34,14,23,-55,-78,-41,-8,4,-21,15,51,-68,-13,-2,-63,-36,-13,-8,-70,15,-15,-71,-2,55,-23,-76,-9,-54,71,-114,127,-86,57,25,-11,47,29,61,-9,-49,36,20,-7,-10,10,59,-124,-53,-66,-58,-28,-27,54,-46,-44,34,-5,-3,-44,11,26,65,-15,-114,-18,-13,-70,-17,23,-29,-80,-11,-58,-26,6,-87,7,13,23,-82,-23,-18,-108,-33,49,-55,-26,30,-90,-21,-72,46,43,57,-61,66, 
  /* [2][0][][] */ 90,-34,17,9,17,-82,60,1,-15,-2,-7,-3,-63,-33,4,-43,-85,-47,-42,49,22,-62,-43,22,5,-71,13,-25,-32,44,-60,123,-51,127,-25,31,-8,-7,-13,-10,-111,77,72,17,-67,11,-29,-18,42,9,-28,-52,49,-28,-20,69,56,2,62,-5,10,42,-24,16,72,9,-22,3,19,65,-54,4,56,44,70,44,37,-62,74,57,85,-20,-33,19,-55,39,12,59,25,32,-13,20,-57,49,-30,34, 
  /* [3][0][][] */ 8,-8,-24,-8,4,-14,1,-66,-33,69,43,56,31,-17,-60,33,12,-33,23,10,20,127,27,-57,9,22,-16,8,73,-44,68,-23,-25,37,-25,-30,17,55,37,7,-88,-35,-46,18,-37,38,19,-7,-15,-52,2,-21,53,-92,-30,-34,23,94,-16,-1,0,-12,-40,9,24,44,-66,10,-26,5,10,-60,-22,-53,42,-9,19,3,-34,-28,-34,-7,-50,17,-1,-42,34,-33,5,44,36,-34,50,31,-53,55, 
  /* [4][0][][] */ 22,16,-27,5,33,29,-44,16,-20,81,80,-4,2,-7,9,-49,7,-7,-23,56,27,-49,59,86,-62,-7,-127,24,-42,-58,15,16,-67,-38,15,53,11,46,17,16,-34,-38,40,-25,-14,16,-40,59,-40,39,14,22,40,-10,-69,27,60,-27,24,4,45,-13,18,14,-46,19,-42,17,-60,38,-49,53,42,-63,-36,-51,42,-47,4,9,-45,75,-68,1,-31,34,24,-62,48,13,26,11,-68,-26,39,23, 
  /* [5][0][][] */ -89,46,60,-25,50,-19,59,-36,-1,36,-13,-18,46,-33,-27,-38,-9,-38,63,36,-113,-18,-71,51,-34,-2,40,18,43,-75,-7,55,49,127,-11,41,-4,33,43,-24,-42,103,68,-28,-14,82,43,-4,-5,17,-30,24,12,-41,37,-102,49,-71,-51,-60,65,93,-56,-22,84,-36,-92,-56,-62,-13,-64,-8,-16,17,-25,-55,39,-35,-30,-17,122,-31,33,-90,-78,52,15,-17,-48,53,22,1,-26,32,12,93, 
  /* [6][0][][] */ 54,-1,-95,36,-36,-114,103,93,-75,88,-9,90,-112,-85,54,52,9,-64,-15,7,1,-25,-75,-76,-55,53,93,26,42,33,97,-59,30,18,16,-76,14,24,40,88,-5,16,-63,-36,8,-72,-94,19,44,-127,-19,86,40,6,-16,-60,95,63,29,-4,-118,53,-91,8,31,0,2,78,36,45,-5,-43,-26,25,108,46,77,-17,63,-66,-17,-60,-69,76,-4,-72,53,11,-29,89,52,39,-37,18,-44,116, 
  /* [7][0][][] */ 28,81,-29,-79,-37,-29,37,1,-50,32,-54,-44,-48,21,21,-15,-53,-52,-30,51,-2,127,12,44,-12,8,18,36,47,43,83,-25,56,31,-10,9,-3,-17,3,19,-82,-3,0,-52,7,-41,83,-18,34,-70,-89,-21,-43,-2,-5,-27,15,3,-98,-1,-8,113,11,-28,-23,6,-68,18,-18,-32,-99,26,4,69,-40,35,-52,51,1,-94,-15,-47,52,-85,62,-14,-17,7,-16,94,-100,34,71,-36,-60,13, 
  /* [8][0][][] */ 0,82,-45,52,-29,-21,-92,28,-113,-27,1,-4,-37,29,40,90,16,-41,-3,13,32,-4,5,-21,-43,68,6,27,-14,-18,-50,-36,-24,-56,-25,-68,-41,36,46,6,4,-42,37,5,-28,-48,1,-13,-17,-28,58,81,-2,-15,-68,113,-27,44,5,-39,-47,9,21,64,-33,-70,-32,-3,-47,17,9,14,-11,-56,-111,-21,-42,33,-59,-35,-35,-3,-36,-26,-13,-13,32,28,19,61,-50,-18,-97,-127,25,-56, 
  /* [9][0][][] */ -19,19,-71,33,-29,-32,64,58,0,47,-24,93,-27,-25,17,127,7,14,77,13,24,9,36,-85,-26,-2,20,-6,12,-20,47,56,-27,9,2,-115,23,-21,-24,-25,-24,23,35,-19,-20,13,12,12,32,78,27,-11,-49,-77,7,-8,2,-18,69,-13,-56,57,-64,-30,82,-6,-39,15,-68,17,30,27,-8,84,-22,-22,-25,26,-35,-19,53,-35,67,-7,39,-6,-16,-37,-47,34,-9,2,57,28,-43,3, 
  /* [10][0][][] */ 68,-2,-43,12,-27,-32,82,9,22,-35,-27,-14,-107,-18,9,3,-84,-40,34,20,36,46,26,16,-42,81,36,-9,-58,-74,-33,-11,83,-42,43,8,75,-98,92,127,28,-57,12,14,-24,-86,-4,72,27,88,-83,-58,-28,36,13,48,12,-76,71,61,-4,49,-72,-30,-4,-56,35,49,23,-35,-12,32,115,45,19,-94,29,-59,65,-18,-45,26,28,21,-48,0,0,43,-52,-28,24,69,44,63,-22,12, 
  /* [11][0][][] */ -53,-26,55,-69,13,-7,-27,-34,54,-39,3,2,-5,-8,-1,14,-63,-6,70,23,-54,14,-64,-71,23,16,-40,36,29,-52,37,-26,26,0,17,-27,-63,7,-115,21,-79,71,-57,62,11,19,-9,-34,17,-36,-70,-68,22,18,74,-63,-21,-71,15,-44,-18,-42,-25,-127,9,-62,57,72,99,14,64,-23,-42,-7,53,-35,91,28,38,38,36,-18,-19,75,82,20,-2,-27,-69,-63,-15,38,41,41,68,79, 
  /* [12][0][][] */ 32,-23,2,-29,46,113,-2,41,62,55,-7,62,9,65,24,3,-75,47,19,44,127,7,87,-67,35,24,-85,-71,-25,90,2,12,30,-13,4,-41,52,-12,-35,-44,30,-21,52,58,-18,43,8,-1,-81,37,-7,19,-28,-20,12,13,-52,49,-2,55,24,-106,11,-114,-12,110,-1,-48,7,-58,67,11,-21,19,-20,48,-8,48,-89,-21,-17,40,123,3,-8,84,-41,-64,71,2,-96,70,79,6,-6,-106, 
  /* [13][0][][] */ -17,28,-15,-56,-43,-22,14,-41,17,-42,-40,-74,62,-100,-39,-80,-26,-49,-84,-27,-101,-22,24,111,-36,-1,109,14,23,-33,58,38,7,-3,-127,119,-41,-68,34,-68,121,9,-2,29,-11,-92,66,-27,80,-10,-57,27,31,-11,-6,68,62,-66,-48,-8,53,43,-8,-103,-2,44,-53,31,-61,-52,-84,9,-75,26,-52,-98,-111,15,30,79,-12,69,29,-104,71,40,26,-11,-27,-1,-21,15,-51,12,-34,-3, 
  /* [14][0][][] */ 1,26,-81,-40,72,83,-90,-17,20,-37,83,-2,26,-28,-43,-76,-60,18,23,127,15,-29,-10,-2,-1,41,-22,68,15,-12,-23,3,61,1,-34,7,-17,63,73,15,49,-4,22,-4,-12,-48,52,-44,30,-6,-5,-17,48,7,-34,32,20,64,-79,-17,-18,-61,-38,-92,4,-46,-63,4,-77,60,-19,41,12,-36,-16,-31,35,-7,-57,-23,23,9,6,-15,-2,36,-9,-26,-28,84,72,8,8,-32,-58,-65, 
  /* [15][0][][] */ -76,-47,34,-56,11,-36,-28,-93,3,6,-6,67,-18,-12,39,101,-120,-30,27,-78,21,-19,-4,-76,42,-10,44,-54,-67,-98,-66,35,-36,50,81,-95,-13,-48,22,-29,-15,0,35,-6,1,0,76,113,-55,5,15,-45,-47,55,7,-73,-113,-22,92,10,-29,14,-99,21,-62,-2,7,16,69,-82,87,-25,47,-30,-45,-54,-1,18,37,-2,-9,89,47,22,4,-25,-127,19,-14,-73,-95,34,60,-35,-21,66, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022570374421775341, 0.0024480642750859261, 0.0024674860760569572, 0.0028417753055691719, 0.0033056165557354689, 0.0032767914235591888, 0.0021684200037270784, 0.0027151000685989857, 0.0044933524914085865, 0.0033970135264098644, 0.0020584086887538433, 0.0027331232558935881, 0.0027323290705680847, 0.0027069721836596727, 0.0037722073029726744, 0.0032984984572976828, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -970, 237, -3934, -4233, -1007, 2523, -998, -399, -1686, -1940, 8140, -2204, 291, 9806, 8663, -5441, 18114, 342, -6063, 170, -2705, 192, -3324, -2522, 529, -3184, 223, -3961, 840, -7650, 845, -188, 10817, 15, -2756, 122, -882, -1801, -938, 7973, -1197, -411, 703, -4535, 12012, 15135, -2106, 13447, -798, 10766, 13075, -653, -436, -2562, -534, 11050, -1239, -50, 14321, 6673, 9679, 9699, 6195, -6274, 1825, 3272, -2012, 2294, -3911, -1674, 2673, 3285, 10502, -1117, -87, 11873, -558, -2995, 8835, 1268, -322, 15863, -1072, 2570, 17912, 701, -4871, -2380, 1274, -3872, 13389, -77, -3070, 1067, -3386, -3835, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00028040382312610745, 0.00019385427003726363, 0.00010484732047189027, 0.00017046602442860603, 0.00026249067741446197, 0.00038192837382666767, 0.00031788140768185258, 0.000246412557316944, 0.00020214584947098047, 0.00019041092309635133, 0.00012749951565638185, 0.00031226180726662278, 0.00024688726989552379, 0.00011355691822245717, 0.00016767774650361389, 0.00012898861314170063, 9.9187338491901755e-05, 0.00027576496358960867, 0.00014195665426086634, 0.00011433887266321108, 0.00018208740220870823, 0.00030445717857219279, 0.00020573797519318759, 0.00019250558398198336, 0.00078524422133341432, 0.00021207249665167183, 0.00026840160717256367, 0.00015748928126413375, 0.00018629388068802655, 9.1210742539260536e-05, 0.00035342120099812746, 0.00020294955174904317, 0.0001689146738499403, 0.00018065595941152424, 0.00027768639847636223, 0.00043802490108646452, 0.00020278706506360322, 0.00028359168209135532, 0.00039209960959851742, 0.0001207449531648308, 0.00019754220556933433, 0.00022536519099958241, 0.00027586729265749454, 0.00014704308705404401, 0.00010771810048026964, 9.1714617155957967e-05, 0.00023570546181872487, 0.00013481985661201179, 0.00020434755424503237, 8.840818190947175e-05, 0.00014768863911740482, 0.00017037750512827188, 0.00026542728301137686, 0.00016285206947941333, 0.00022002149489708245, 0.00015103963960427791, 0.00020671232778113335, 0.00021786622528452426, 0.00014159339480102062, 0.00011429374717408791, 0.00012935441918671131, 0.00020870477601420134, 0.00014094018843024969, 0.00012623016664292663, 0.00017454793851356953, 0.0002723441575653851, 0.00033955223625525832, 0.0002321369101991877, 0.0002448085870128125, 0.00017301378829870373, 0.00023711267567705363, 0.00015379687829408795, 0.00012528494698926806, 0.00022657969384454191, 0.00026788379182107747, 0.00011097256356151775, 0.00018128800729755312, 0.00020936493820045143, 0.00014406457194127142, 0.00017505577125120908, 0.0002720485208556056, 0.00011051909677917138, 0.00024439493427053094, 0.00016972588491626084, 6.3544852309860289e-05, 0.00021490163635462523, 0.00012789324682671577, 0.00025196123169735074, 0.00020567145838867873, 0.00026767546660266817, 8.6105967056937516e-05, 0.00037597838672809303, 0.00023463966499548405, 0.00023823801893740892, 0.00016211788170039654, 0.0002684067003428936, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 31,117,11,43,-25,2,42,40,80,-64,-85,20,-23,-5,40,-50,-122,24,29,29,41,64,101,92,12,-22,-56,-4,-17,-1,13,-12,-53,5,-23,109,9,71,2,-1,29,-41,-2,29,-100,-63,19,-16,-32,-56,-11,-19,1,64,-11,-9,-49,-71,-60,-127,-127,-11,-101,12,-36,32,53,-14,-27,52,30,-16,-13,2,46,-21,-6,-14,-89,25,6,-66,59,-29,-98,-46,-2,21,-127,16,-105,41,80,-15,64,13, -38,-44,18,127,-3,84,-15,8,86,33,-127,51,-39,-70,-70,127,-113,59,69,106,127,10,127,127,28,7,13,42,11,114,-17,-127,64,83,12,51,86,124,-24,-127,127,-7,69,127,-37,-117,127,-61,-7,-124,-88,-45,-2,127,-13,-127,22,28,-127,-104,-42,-127,-61,114,-46,72,127,-22,1,127,127,-15,-77,21,-38,-127,19,-31,-39,127,-7,-81,127,-84,-92,-44,110,57,104,125,-111,3,127,-37,127,51, 20,-121,17,15,-10,-8,-7,34,50,47,-63,12,-19,39,3,-75,-55,15,27,23,39,47,80,117,7,-39,25,41,4,7,-13,-52,-56,-80,-23,69,14,-1,13,4,4,30,-9,43,-51,-52,0,14,22,-50,26,-3,-11,3,20,-6,60,-75,-34,-69,-96,9,-72,10,33,7,-11,-9,-22,8,22,-2,-9,-37,-10,1,-3,10,-85,-15,-6,-78,36,-21,-59,-32,15,-30,-86,9,-28,43,34,35,41,5, 
  /* [0][1][][] */ 100,2,76,114,3,-44,127,35,-33,-127,-77,127,-5,-125,-42,46,-88,-47,89,21,-103,-4,-123,-71,-15,48,-127,127,-93,78,127,92,15,59,18,127,-127,61,-16,-77,64,-127,29,57,-127,-73,18,-127,-122,-90,-87,-1,127,-39,91,-35,-127,5,-54,1,-82,-49,-28,39,-117,-30,88,-94,-31,19,-45,-127,-122,80,127,-109,89,81,-90,-62,127,-117,-28,123,-50,-16,16,79,-8,8,-54,30,-1,-95,61,-10, -127,14,-50,121,-77,-127,-116,-127,83,20,-19,41,-91,-127,-51,126,-127,-127,127,127,37,-127,-117,97,-127,127,19,86,-92,-19,-111,76,-127,75,127,-46,16,127,127,-74,-36,30,25,35,-44,-127,-56,-113,2,-127,-127,127,34,68,47,-84,38,22,77,-20,-49,-31,-127,127,-10,-127,101,127,26,57,-114,-80,-43,75,-111,-116,127,127,99,-68,-78,-19,-92,85,-86,-91,127,127,123,127,-127,-127,-91,-65,59,127, 64,-16,127,73,7,-26,10,28,-45,88,-67,76,1,-13,-127,67,14,-29,38,13,-100,6,-79,-51,-15,26,118,-18,127,105,14,-111,-30,-127,-6,104,-109,11,-33,-49,-2,91,27,67,-36,-14,7,-84,127,-71,-69,-20,38,-55,-127,27,101,0,-126,68,-31,-29,18,37,127,-50,9,-8,-42,3,-45,-50,-127,-127,-13,-59,-20,1,-127,-63,-67,-127,-27,127,-127,11,13,-1,-36,-16,-19,45,-5,127,34,-9, 
  /* [0][2][][] */ 26,-127,28,-36,5,15,31,42,-40,-31,-6,-34,15,-12,-28,47,-34,28,1,45,2,33,25,-25,2,45,-12,-15,-34,27,-1,15,-18,-14,-19,-13,46,6,4,-45,2,16,-16,-20,-14,-36,0,-14,-28,7,-29,8,1,9,-39,-18,-21,0,16,53,-70,13,63,-31,-38,33,-69,-25,38,3,15,61,-10,24,19,19,-23,-19,-1,-2,15,-5,-24,-53,-83,53,-23,-19,-94,19,15,34,-1,-8,-6,-20, -50,19,124,-35,127,62,-35,8,-127,30,-61,-33,127,-22,-90,45,9,67,-9,-66,30,3,67,-18,47,-63,-7,47,-22,127,-18,8,-68,26,17,-36,57,66,14,-99,-25,4,-127,26,-9,-21,-23,-71,6,-74,-67,70,74,-55,-46,-80,-14,127,-23,28,41,-85,107,50,-22,16,-50,-3,127,-9,-11,80,-69,34,-27,-48,9,-68,-56,-52,-11,-75,-22,-82,-75,127,37,-8,91,21,78,26,-24,-21,-13,-15, 22,84,38,-20,-2,-4,-12,39,6,49,16,10,8,6,-27,62,-35,24,7,33,-5,27,10,1,-6,36,7,11,5,25,-24,-66,-39,-24,-11,-38,45,-14,9,-5,2,-8,8,-6,-32,-11,-1,-14,38,21,-29,-12,-8,3,18,-1,-5,8,15,80,-38,25,32,-33,31,2,-48,10,34,1,1,61,16,-14,-16,-4,-17,8,14,-12,-13,-52,-14,-29,-60,32,-29,-23,-85,26,12,10,-1,-1,-11,-11, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.011917161755263805, 0.008238806389272213, 0.0044560111127793789, 0.0072448058053851128, 0.011155853047966957, 0.016231955960392952, 0.013509958982467651, 0.010472533293068409, 0.0085911983624100685, 0.0080924639478325844, 0.0054187290370464325, 0.01327112689614296, 0.010492708534002304, 0.0048261689953505993, 0.0071263043209910393, 0.0054820161312818527, 0.0042154616676270962, 0.011720011010766029, 0.0060331579297780991, 0.0048594018444418907, 0.0077387145720422268, 0.012939429841935635, 0.0087438635528087616, 0.0081814872100949287, 0.033372879028320312, 0.009013080969452858, 0.011407067999243736, 0.0066932942718267441, 0.0079174898564815521, 0.0038764565251767635, 0.0150204012170434, 0.0086253555491566658, 0.0071788732893764973, 0.0076778782531619072, 0.011801672168076038, 0.018616057932376862, 0.008618449792265892, 0.012052645906805992, 0.016664233058691025, 0.0051316604949533939, 0.0083955433219671249, 0.0095780203118920326, 0.011724360287189484, 0.0062493309378623962, 0.0045780190266668797, 0.0038978711236268282, 0.010017481632530689, 0.0057298438623547554, 0.0086847711354494095, 0.0037573475856333971, 0.0062767667695879936, 0.0072410437278449535, 0.011280659586191177, 0.0069212126545608044, 0.0093509135767817497, 0.0064191846176981926, 0.0087852738797664642, 0.009259314276278019, 0.0060177193954586983, 0.0048574842512607574, 0.0054975626990199089, 0.0088699525222182274, 0.0059899580664932728, 0.0053647817112505436, 0.0074182874523103237, 0.011574625968933105, 0.014430969953536987, 0.0098658185452222824, 0.010404365137219429, 0.0073530860245227814, 0.010077288374304771, 0.0065363673493266106, 0.0053246100433170795, 0.0096296370029449463, 0.011385060846805573, 0.0047163339331746101, 0.0077047399245202541, 0.0088980095461010933, 0.0061227441765367985, 0.0074398703873157501, 0.011562062427401543, 0.0046970616094768047, 0.010386784560978413, 0.0072133499197661877, 0.0027006561867892742, 0.0091333193704485893, 0.0054354630410671234, 0.010708351619541645, 0.0087410369887948036, 0.011376206763088703, 0.0036595035344362259, 0.015979081392288208, 0.0099721858277916908, 0.010125115513801575, 0.0068900096230208874, 0.011407284997403622, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5502, 3579, 1453, -1279, 3776, 10307, 7579, 1306, -347, 7052, 656, -3984, 3449, 2854, 693, -555, 3070, 6402, -788, -131, 4551, 9884, 8742, -1557, -4055, -1066, 12677, -277, 1711, 801, 8521, -1842, 9566, 1959, 3533, -5397, 834, -4501, -24, 2222, 2801, 1252, 1978, -317, 690, 2044, 3680, 3993, 5045, 2146, 5922, 2768, -1655, 1268, 812, 2166, 1716, 2838, 8173, 1008, -797, 5293, 3892, 3778, 3837, 6734, -5111, 2315, 5957, -557, 6736, 1843, 2667, 3181, 3221, 1627, -498, 1386, 2565, 2718, 2223, 3692, 7315, 701, 2624, 4113, 655, -920, 13317, -822, 560, -1116, 8725, 3040, -325, -873, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00013490745914168656, 0.0001020464114844799, 0.00013423620839603245, 0.00019180240633431822, 0.00018233283481094986, 7.8435783507302403e-05, 0.00010883478535106406, 0.0001999321102630347, 0.0001894653687486425, 0.00011270139657426625, 0.00026840620557777584, 0.00011383026867406443, 0.00015393576177302748, 0.00016691592463757843, 0.00016325399337802082, 0.00015860855637583882, 0.0001980816014111042, 0.00011489371536299586, 0.00010381552419858053, 0.00020236030104570091, 0.00012944731861352921, 9.3733600806444883e-05, 9.8960539617110044e-05, 0.00017885654233396053, 0.00014782983635086566, 0.0001164205968962051, 7.2155111411120743e-05, 0.00012967735528945923, 0.00015958295261953026, 0.00020386969845276326, 0.00010047273826785386, 0.00015845734742470086, 8.5249914263840765e-05, 0.00023652752861380577, 0.00018920576258096844, 0.00012161563790868968, 0.00015839964908082038, 0.00014101357373874635, 0.00019135791808366776, 0.00014592155639547855, 0.0001525126863270998, 0.00021920663130003959, 0.00018834037473425269, 0.00024647486861795187, 0.00031163770472630858, 0.00018801631813403219, 0.00015401749988086522, 0.00015313025505747646, 0.00012216632603667676, 0.00022717154934071004, 0.00012414669618010521, 0.00015827157767489552, 0.00020925635180901736, 0.00023326178779825568, 0.00026289667584933341, 0.00019140030781272799, 0.000198579509742558, 0.00013443494390230626, 9.7896408988162875e-05, 0.00020534341456368566, 0.00022641106625087559, 0.0001298812567256391, 0.00014663042384199798, 0.00016746818437241018, 0.00015497018466703594, 0.00011448899749666452, 0.00012720809900201857, 0.00017768153338693082, 0.00010601569374557585, 0.0002559097483754158, 0.00010776462295325473, 0.00011734658619388938, 0.00014808909327257425, 0.00012097848957637325, 0.00016747602785471827, 0.00016039620095398277, 0.00021007475152146071, 0.00022902589989826083, 0.00013817945728078485, 0.00019409743254072964, 0.00019376572163309902, 0.00012348084419500083, 0.00010499099153093994, 0.00015107494255062193, 0.00012867031909991056, 0.0001597562077222392, 0.0002047409798251465, 0.00026867431006394327, 7.0715432229917496e-05, 0.00018948806973639876, 0.00030690053245052695, 0.00018396970699541271, 9.1455942310858518e-05, 0.00013050745474174619, 0.00025095648015849292, 0.00014968602044973522, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -46,40,-15,-25,-7,-48,-54,-14,44,-46,35,-63,82,-90,2,-127, 
  /* [1][0][][] */ -95,73,-81,-81,-75,27,-5,51,-42,11,70,-58,72,127,37,34, 
  /* [2][0][][] */ -50,-10,-84,-16,-8,-51,9,-47,-111,124,86,22,51,55,-60,127, 
  /* [3][0][][] */ -57,-81,5,-48,-73,11,-43,-127,-17,8,42,-65,-60,-23,-122,-51, 
  /* [4][0][][] */ 94,-4,-32,58,-84,-6,-127,45,37,82,20,47,16,10,-49,-82, 
  /* [5][0][][] */ -93,64,-87,-36,62,-72,-30,-79,92,-21,13,-39,29,-120,-127,-119, 
  /* [6][0][][] */ -1,-28,-29,17,-79,72,32,-45,-21,-58,127,-13,-17,1,-118,16, 
  /* [7][0][][] */ -41,103,127,-64,67,86,-3,-44,37,76,-79,-15,51,9,13,59, 
  /* [8][0][][] */ -27,0,19,-8,68,24,104,127,-50,-7,-64,-74,38,71,-80,-35, 
  /* [9][0][][] */ 7,42,68,28,-110,-50,-98,-63,63,22,127,-1,-21,-69,42,2, 
  /* [10][0][][] */ 10,-113,4,-66,-127,65,20,30,-25,-66,-20,36,-30,40,-116,22, 
  /* [11][0][][] */ 126,-53,-3,99,-110,-39,46,-13,127,110,-60,42,19,-91,-14,105, 
  /* [12][0][][] */ -69,-73,127,-21,63,-11,36,45,67,-38,102,66,-20,22,-109,40, 
  /* [13][0][][] */ 1,-27,17,27,2,11,127,28,-93,13,14,1,-17,102,97,-71, 
  /* [14][0][][] */ 114,-64,127,3,58,45,113,38,94,75,47,24,67,-46,31,-60, 
  /* [15][0][][] */ -5,127,17,-35,37,125,-94,86,-57,-38,-47,-21,-59,118,-24,-41, 
  /* [16][0][][] */ -32,76,107,-33,13,82,-7,-8,10,10,-26,40,90,-9,97,127, 
  /* [17][0][][] */ -5,102,74,-127,44,-30,-9,-71,-54,73,-18,48,-58,-32,74,-61, 
  /* [18][0][][] */ -77,-3,-65,-105,123,95,-44,-63,32,76,127,73,3,104,-48,-9, 
  /* [19][0][][] */ 32,116,98,78,40,-30,11,-10,-21,127,42,112,66,72,-44,30, 
  /* [20][0][][] */ 88,-5,3,74,-70,-11,-31,56,-26,-55,-127,-43,93,-40,34,-13, 
  /* [21][0][][] */ -84,-82,-27,127,-40,-1,-116,75,15,-3,32,13,-24,36,-69,16, 
  /* [22][0][][] */ 4,13,-79,-41,127,7,-32,58,56,63,45,56,-16,33,-20,38, 
  /* [23][0][][] */ -56,22,-13,6,22,59,95,85,-25,127,-18,-25,3,17,-63,-25, 
  /* [24][0][][] */ 30,-78,49,3,127,43,85,-55,67,32,37,25,-77,22,-9,-22, 
  /* [25][0][][] */ 126,-71,92,24,18,-20,-46,111,127,-11,-59,6,124,-60,91,37, 
  /* [26][0][][] */ 57,42,104,83,65,-13,-66,-28,5,70,12,127,32,-80,27,-45, 
  /* [27][0][][] */ -64,24,-61,25,-20,113,36,-100,45,-63,127,29,47,-38,113,86, 
  /* [28][0][][] */ -41,42,-77,-127,39,-70,-7,-41,-112,98,-59,31,-29,40,-28,69, 
  /* [29][0][][] */ 80,99,-65,49,23,74,-39,-28,54,53,1,60,-127,18,-16,71, 
  /* [30][0][][] */ -34,84,-110,-63,79,-45,20,8,-79,65,-93,4,8,72,-2,127, 
  /* [31][0][][] */ 16,-115,90,44,55,-76,-74,31,-13,-4,30,-30,-72,52,48,127, 
  /* [32][0][][] */ -66,68,-8,37,-108,54,3,74,15,-127,34,-82,18,52,42,59, 
  /* [33][0][][] */ -68,-14,62,81,-12,3,-47,11,-33,-64,10,-15,-12,-19,11,127, 
  /* [34][0][][] */ -5,15,-82,-106,69,-21,-16,70,8,0,-8,-11,-64,-32,-32,127, 
  /* [35][0][][] */ 86,-13,28,-13,3,19,-90,-23,-26,-127,-48,14,-12,-30,43,-31, 
  /* [36][0][][] */ -3,32,-127,-17,29,127,-14,36,-20,5,48,21,14,23,-74,43, 
  /* [37][0][][] */ 71,37,62,-50,52,-127,35,-18,-116,60,-88,-26,-2,18,98,32, 
  /* [38][0][][] */ -37,127,35,-40,45,27,81,-96,15,-11,-103,31,-52,-88,-79,9, 
  /* [39][0][][] */ 93,40,-112,-116,-10,-12,25,-64,11,-23,8,-44,69,4,-127,-77, 
  /* [40][0][][] */ -50,15,-90,-80,-60,-23,8,-127,2,-17,8,-42,27,75,28,73, 
  /* [41][0][][] */ -36,-102,-24,127,4,-22,-69,-9,1,-51,85,-60,-65,-11,0,41, 
  /* [42][0][][] */ -9,83,-38,-127,15,13,6,-26,64,7,-40,18,79,-22,-25,26, 
  /* [43][0][][] */ 7,48,13,9,127,35,14,18,8,43,-6,-76,-109,-41,-19,-20, 
  /* [44][0][][] */ 71,-20,32,35,-18,-1,16,31,23,-25,34,11,127,14,-58,-38, 
  /* [45][0][][] */ 12,-82,-62,41,-41,-88,4,45,24,-17,11,26,-84,127,40,-37, 
  /* [46][0][][] */ -5,-71,24,77,8,0,-92,74,32,-53,56,-13,42,84,67,127, 
  /* [47][0][][] */ -50,-55,26,91,-4,-3,73,16,13,-61,-127,-43,51,-27,-64,13, 
  /* [48][0][][] */ -84,111,-18,-24,10,70,-2,-112,37,-20,52,-68,43,-127,-56,7, 
  /* [49][0][][] */ -58,-3,48,-26,10,18,105,127,-42,-24,0,30,-47,39,-48,28, 
  /* [50][0][][] */ 55,12,-80,21,35,-127,-42,-2,-75,36,-37,-16,12,-85,-106,-45, 
  /* [51][0][][] */ -40,60,-40,106,-31,53,-39,-82,-42,-66,10,-33,-3,38,-16,127, 
  /* [52][0][][] */ -127,5,22,-6,20,37,72,7,20,-81,-39,-51,-93,-56,-110,-12, 
  /* [53][0][][] */ -62,-76,-79,-127,-36,5,22,82,52,-56,-61,20,-26,40,51,119, 
  /* [54][0][][] */ 19,-57,6,4,-67,67,58,-22,-14,-95,53,39,-31,-27,-127,34, 
  /* [55][0][][] */ -8,-34,-31,33,74,-20,62,93,-53,-63,-127,-25,59,-36,-23,33, 
  /* [56][0][][] */ 58,-20,-63,-17,-127,18,-117,18,-17,-23,-7,-6,83,-16,44,25, 
  /* [57][0][][] */ -61,9,19,-27,127,46,62,36,-22,65,4,-14,-57,80,-123,-12, 
  /* [58][0][][] */ 38,1,11,-14,34,-19,-49,-65,58,-127,-75,1,-85,-63,-21,48, 
  /* [59][0][][] */ -63,-37,13,6,11,54,-116,-43,68,127,-96,30,-29,6,-1,-17, 
  /* [60][0][][] */ 19,-51,-4,12,-127,-43,21,4,-10,39,-19,35,-4,-37,36,35, 
  /* [61][0][][] */ 19,29,-81,7,-67,-30,-123,-96,-9,17,23,110,59,-65,127,54, 
  /* [62][0][][] */ 66,-2,42,-20,-8,42,25,127,-54,127,20,101,22,21,81,96, 
  /* [63][0][][] */ 13,-119,-13,-22,-62,13,41,-30,-22,-13,2,-1,-35,127,91,28, 
  /* [64][0][][] */ 3,7,-127,-21,11,62,20,-17,-2,-80,38,1,60,-29,-56,99, 
  /* [65][0][][] */ -17,1,51,62,75,-8,87,99,-51,-10,-125,-70,39,127,-73,-31, 
  /* [66][0][][] */ -55,-124,-15,-127,-82,-106,56,-61,-20,-31,1,89,-54,-18,-101,76, 
  /* [67][0][][] */ -34,-78,-70,-32,-83,98,-9,-127,-74,-18,-51,-103,22,-23,-64,34, 
  /* [68][0][][] */ 121,44,45,-21,-78,6,-99,-34,-101,-127,-22,-6,51,-24,92,-98, 
  /* [69][0][][] */ 31,-3,48,-20,-2,-34,-34,34,-7,127,-19,15,8,41,68,-28, 
  /* [70][0][][] */ 25,-16,-50,80,-126,51,-6,-123,126,127,55,68,53,-37,-24,38, 
  /* [71][0][][] */ 112,-91,87,98,-74,-32,29,-24,127,0,-57,52,68,-75,17,1, 
  /* [72][0][][] */ -9,-59,55,127,49,-7,-120,88,106,-2,45,-3,-53,-84,-68,96, 
  /* [73][0][][] */ 77,29,62,-127,64,-77,-86,53,-22,92,-30,16,14,-85,25,-44, 
  /* [74][0][][] */ 84,6,34,49,-127,-30,32,3,-73,-33,9,-41,34,-66,4,15, 
  /* [75][0][][] */ 80,127,-102,20,62,58,-25,-20,-16,-29,46,59,-98,45,51,73, 
  /* [76][0][][] */ -71,-42,7,-39,-65,1,102,-5,-64,24,107,54,-48,-127,-11,93, 
  /* [77][0][][] */ -43,127,-28,6,-41,-75,31,65,43,-45,-17,58,-35,42,-20,91, 
  /* [78][0][][] */ 127,53,-59,40,-104,29,-122,-27,-15,-9,-66,-1,26,-103,41,62, 
  /* [79][0][][] */ -39,-10,108,59,-18,-69,-58,-36,-38,14,18,10,-53,127,-47,73, 
  /* [80][0][][] */ 49,102,39,-127,-15,25,102,-24,14,31,-33,16,80,-49,5,-2, 
  /* [81][0][][] */ 38,-71,26,-122,114,40,-1,127,114,38,-7,-46,-8,34,-98,-78, 
  /* [82][0][][] */ 88,36,54,1,127,-78,32,47,-7,81,-39,20,3,-31,18,-90, 
  /* [83][0][][] */ -39,81,20,13,87,61,117,127,2,64,-40,-76,-82,104,-62,-112, 
  /* [84][0][][] */ 13,-127,8,108,19,-81,-71,25,-105,85,-72,1,-120,96,-12,-86, 
  /* [85][0][][] */ -119,33,-32,-18,-23,-52,-63,-36,-10,19,11,-56,-127,-94,-69,20, 
  /* [86][0][][] */ -32,70,95,117,21,-41,56,15,6,30,-40,-77,37,88,-127,-59, 
  /* [87][0][][] */ -22,46,127,-32,-98,-33,14,9,24,-25,6,42,-62,21,-16,-14, 
  /* [88][0][][] */ -43,-65,-122,36,23,33,-2,20,-2,-75,-111,-95,127,-23,6,58, 
  /* [89][0][][] */ 22,10,27,-112,16,-51,-32,47,127,-20,38,-90,3,-32,48,-72, 
  /* [90][0][][] */ 8,73,18,10,-34,30,29,113,14,-64,-22,127,46,9,-43,81, 
  /* [91][0][][] */ -68,4,-30,52,92,64,-61,-119,-53,36,3,23,-118,-127,-93,1, 
  /* [92][0][][] */ -48,89,-18,-14,-127,2,-89,71,-17,58,106,74,-16,-34,41,21, 
  /* [93][0][][] */ 107,37,105,58,-127,-85,23,32,-19,-60,-23,-62,33,-57,4,5, 
  /* [94][0][][] */ -41,-127,20,-111,-1,26,-15,-10,74,-22,-9,51,1,63,-52,48, 
  /* [95][0][][] */ -30,-57,-30,-70,127,114,-36,51,70,36,-67,44,-20,110,-87,34, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017410991713404655, 0.0013169986195862293, 0.001732436241582036, 0.0024753785692155361, 0.0023531652987003326, 0.0010122826788574457, 0.0014046084834262729, 0.0025802995078265667, 0.0024452169891446829, 0.0014545104932039976, 0.0034640179947018623, 0.0014690796378999949, 0.0019866761285811663, 0.0021541966125369072, 0.0021069361828267574, 0.0020469827577471733, 0.0025564171373844147, 0.0014828043058514595, 0.0013398305745795369, 0.0026116373483091593, 0.0016706313472241163, 0.001209714449942112, 0.0012771727051585913, 0.0023083006963133812, 0.0019078738987445831, 0.0015025100437924266, 0.00093122507678344846, 0.0016736001707613468, 0.0020595581736415625, 0.0026311175897717476, 0.0012966889189556241, 0.0020450311712920666, 0.001100225024856627, 0.0030525955371558666, 0.0024418665561825037, 0.0015695566544309258, 0.0020442865788936615, 0.0018199040787294507, 0.0024696420878171921, 0.0018832458881661296, 0.0019683102145791054, 0.0028290541376918554, 0.0024306979030370712, 0.0031809748616069555, 0.0040219584479928017, 0.0024265157990157604, 0.001987731084227562, 0.0019762804731726646, 0.0015766638098284602, 0.0029318484012037516, 0.0016022220952436328, 0.0020426337141543627, 0.0027006370946764946, 0.0030104483012109995, 0.0033929126802831888, 0.002470189006999135, 0.0025628430303186178, 0.001735001103952527, 0.0012634391896426678, 0.0026501370593905449, 0.0029220336582511663, 0.0016762316226959229, 0.0018923945026472211, 0.0021613240242004395, 0.0020000264048576355, 0.0014775810996070504, 0.0016417322913184762, 0.002293136203661561, 0.0013682256685569882, 0.003302740165963769, 0.0013907970860600471, 0.0015144607750698924, 0.0019112199079245329, 0.0015613336581736803, 0.0021614253055304289, 0.0020700539462268353, 0.0027111992239952087, 0.0029557803645730019, 0.0017833273159340024, 0.0025049978867173195, 0.0025007168296724558, 0.0015936287818476558, 0.0013550010044127703, 0.0019497547764331102, 0.001660603447817266, 0.0020617942791432142, 0.0026423621457070112, 0.0034674778580665588, 0.00091264478396624327, 0.0024455098900943995, 0.003960820846259594, 0.0023742907214909792, 0.0011803192319348454, 0.0016843132907524705, 0.0032388137187808752, 0.0019318296108394861, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27671, -382, 56, -14184, 10346, -14346, 16959, -8008, 11082, -10655, 14479, 14162, -988, -29446, -239, 6035, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.119573951466009e-05, 8.5872365161776543e-05, 7.5299220043234527e-05, 6.5738240664359182e-05, 9.3191018095239997e-05, 0.00012647410039789975, 6.1347302107606083e-05, 7.2246759373228997e-05, 0.00011644529149634764, 9.6891264547593892e-05, 0.00010671936615835875, 6.3848841818980873e-05, 7.2927476139739156e-05, 7.8905068221502006e-05, 6.8248817115090787e-05, 7.9192184784915298e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 27,29,21,14,-29,-77,-18,2,-29,-70,20,0,57,-66,61,38,-80,-30,22,12,96,29,-80,15,-4,66,127,67,0,81,52,-36,16,0,3,-18,31,31,-1,-16,122,10,34,-22,-9,-8,2,-41,31,-41,93,-15,-77,8,53,22,-7,-35,1,29,-16,31,-64,-3,21,-5,69,26,-5,-33,14,34,18,40,8,40,68,-36,51,25,-20,47,34,37,-53,14,-6,58,12,2,-92,-17,19,8,109,83, 
  /* [1][0][][] */ 5,36,-37,-7,12,-48,95,-56,-69,-27,-52,-35,-10,-43,-2,-43,-22,-36,-35,-19,-25,-74,94,-31,1,22,8,57,-40,14,-32,18,-37,13,15,13,-15,56,-62,76,15,2,-6,-48,45,-54,10,20,-62,-8,57,-100,-33,38,59,47,36,28,-72,20,-51,-2,-18,-15,22,17,76,13,-42,-127,26,-3,19,50,-23,23,-57,-33,75,-32,48,-22,34,-46,-25,-60,-17,4,-5,-31,29,-10,54,-48,-26,48, 
  /* [2][0][][] */ 4,-20,18,-9,45,48,-58,31,-45,47,23,-26,26,-10,20,25,36,-16,-127,-3,-13,-47,-14,14,7,-21,-44,8,-45,-17,-24,68,-11,-26,0,14,-43,32,-5,-22,66,10,4,43,13,55,1,3,-68,10,-21,8,-9,50,9,-58,33,30,44,33,-32,-12,-9,56,44,8,-30,-8,-1,-12,-18,-38,18,44,34,67,-47,-16,-24,-29,44,33,57,-6,-12,-38,-6,-49,-28,-29,-8,74,4,-5,76,-43, 
  /* [3][0][][] */ 33,-48,-23,-108,-22,-24,102,-12,36,127,-65,-17,-1,-25,-13,65,68,54,-26,29,-50,12,22,-2,-42,70,52,-14,-45,-13,-77,63,4,-12,25,-30,-1,-48,-10,57,11,3,-27,34,61,-43,1,43,52,-33,23,-53,109,48,19,0,-3,-10,-19,-36,-46,31,75,6,-22,-11,113,-36,-43,-29,-43,19,9,-69,14,-67,22,-54,115,0,6,-51,-40,-36,-37,-38,78,73,-52,44,-58,14,15,-72,-25,43, 
  /* [4][0][][] */ -22,70,42,9,-21,21,-42,-17,10,-31,10,-8,28,36,-17,13,-11,-44,-26,-65,35,-28,-72,21,-33,-28,-20,12,-43,127,-50,-13,14,-33,1,-30,70,51,-21,-4,19,6,26,-36,-48,-14,49,-32,21,-14,-51,-14,-63,20,37,13,12,65,-25,23,-32,-68,-17,11,56,17,-58,-5,-2,-10,0,-62,-17,61,57,65,-29,8,-56,30,14,67,31,-61,44,-65,-28,-72,-38,-46,-44,-5,-1,2,37,-33, 
  /* [5][0][][] */ -7,-8,45,-22,-17,-17,-13,4,35,14,-10,1,-16,-25,30,-17,-8,5,-56,-31,-16,20,-16,14,22,-44,59,-23,-11,43,4,73,1,-80,19,12,-34,-24,-24,-7,-47,-1,-14,7,7,19,-73,17,-19,22,46,-17,26,-65,10,11,-20,-48,3,-37,37,21,28,50,-37,4,108,-19,-10,-31,7,20,1,31,40,12,1,-24,127,37,-23,-9,-28,29,46,66,7,89,-6,-36,-5,16,10,-16,-30,16, 
  /* [6][0][][] */ 24,-68,66,9,-59,127,-64,-83,-11,-72,-75,56,4,10,-36,81,18,51,22,-30,-84,-37,-79,-68,7,-62,-2,66,-115,40,-26,-30,55,92,-24,-12,-9,-38,36,-16,-53,39,36,-22,17,48,-111,3,44,14,-82,-124,86,15,-56,-14,30,-18,26,-15,-14,-35,48,11,68,-58,-55,-62,-94,22,-34,-84,-29,-87,25,-99,98,15,-64,50,-25,84,33,-89,57,-35,-11,6,-84,80,-70,97,42,-35,61,-99, 
  /* [7][0][][] */ -17,-2,-42,49,-19,-5,50,-9,-104,-2,70,51,11,-57,3,-24,-15,-14,1,-9,-61,-12,-28,-31,71,52,-1,72,5,40,17,18,-39,-127,27,97,7,28,-45,8,-11,-15,14,-84,20,43,77,67,-20,43,-35,-7,14,-33,44,-48,-20,40,-80,-12,39,20,-4,-25,55,-61,95,-6,-53,-44,78,11,-20,-26,-82,-31,27,-45,78,-26,3,-1,-73,-20,44,10,-59,32,0,14,12,22,53,-8,78,-15, 
  /* [8][0][][] */ -9,-66,3,9,-23,2,15,2,-1,-3,54,53,13,37,-51,-11,82,9,6,5,-7,-85,-38,-29,-18,-43,73,4,-22,46,3,-27,-20,5,1,-6,-51,-16,29,-36,-3,46,23,-44,24,-8,15,-3,37,4,44,1,6,7,-48,8,-16,114,-55,-6,-13,-65,-53,-10,-82,-24,-21,11,-4,20,33,-27,-29,-127,52,-101,14,10,-64,18,-19,-11,10,64,64,-64,-45,59,-50,92,10,-17,-44,7,0,-64, 
  /* [9][0][][] */ -24,-22,-22,21,-1,20,6,38,-36,1,58,53,-21,50,30,-49,-9,34,-23,-33,9,45,-11,14,-29,28,6,15,32,-2,7,-2,-9,-16,12,54,-17,0,30,-8,-18,-25,18,-5,14,37,3,33,-43,10,-19,23,127,12,-5,-5,17,-13,27,8,-36,7,82,12,10,27,61,14,26,-3,-24,29,3,-122,-31,-113,-31,-18,40,-8,-5,30,2,-36,45,9,-56,-6,-6,104,39,32,54,36,-6,21, 
  /* [10][0][][] */ 26,47,15,-6,-9,15,-36,-30,57,4,-41,23,23,12,-10,-55,-35,-5,17,-6,23,-7,-22,-25,8,-13,-96,45,-21,51,4,8,16,17,-24,6,15,2,-3,-1,35,-4,59,-47,-32,-6,13,21,14,6,9,-16,-27,-17,3,27,-8,2,-6,-11,-5,-32,-11,5,-8,-21,-95,-24,-45,-12,37,-11,-17,33,26,19,44,-17,-88,7,-18,28,6,-12,9,3,-72,-127,-16,21,14,14,46,-39,22,23, 
  /* [11][0][][] */ 23,-38,7,0,-53,27,16,-6,75,-20,-29,-49,27,10,12,-4,-28,48,34,-65,8,36,23,-23,39,16,61,6,35,-57,-33,17,26,101,-108,12,18,-25,47,13,-55,50,-12,10,-47,-4,-19,-15,42,-20,-27,-20,-30,20,-73,89,-34,-8,0,-37,31,1,-18,-60,-13,-59,-127,-83,-4,-33,-97,36,55,18,-18,-8,40,62,-111,-35,-25,-9,-21,-12,-20,-10,60,78,32,-49,12,3,-43,32,82,26, 
  /* [12][0][][] */ 15,29,-28,-23,26,-32,11,28,45,-37,13,-2,5,-17,-2,11,5,-51,-26,6,3,63,4,55,-37,-27,-127,-4,74,-28,30,-2,-22,-79,71,-2,30,-12,-17,24,-10,-53,13,28,34,-9,34,-25,-69,-8,-44,95,66,-12,38,-75,9,16,-43,-28,10,55,69,7,-21,-29,23,30,108,18,33,27,7,-18,-21,-12,-41,-55,37,-68,14,-49,20,-40,2,0,3,-108,2,34,-42,10,10,62,16,35, 
  /* [13][0][][] */ -16,29,-67,26,36,21,-3,4,24,59,-43,43,-39,-21,64,-57,5,47,63,10,-34,-35,-12,20,37,55,-15,30,21,45,56,-18,-17,61,-8,48,24,-35,-60,-49,-5,-14,25,6,44,45,-28,43,-61,40,5,6,-22,-51,60,37,18,-53,-11,-16,24,30,-3,-29,10,84,127,43,29,4,-44,-12,35,52,-85,53,14,-75,127,-49,-19,-35,22,3,32,51,-40,-26,-5,-20,14,44,38,22,69,48, 
  /* [14][0][][] */ -17,41,19,24,-72,-48,15,57,-71,-24,85,7,-90,-8,77,-15,-42,48,-62,33,-29,16,-95,4,-49,-6,-49,-122,11,-3,19,86,-61,31,16,-19,-30,-78,-8,-37,30,-46,38,-13,-3,55,-69,35,-6,-53,82,18,-3,37,-36,37,-66,39,-8,47,29,56,-3,53,23,-42,6,-77,34,58,84,29,-50,30,20,12,35,-18,40,24,-59,118,-10,-127,81,1,5,13,-116,-12,-25,5,-26,23,33,46, 
  /* [15][0][][] */ 69,-19,31,30,54,-5,2,-21,12,25,-67,-16,72,72,-9,-22,-19,0,-72,43,-11,-20,19,36,70,-26,92,36,60,-35,-38,62,59,47,-1,-73,64,66,51,63,86,45,-20,0,-48,-127,46,-45,-42,-24,-7,2,-16,-59,-28,60,-11,-5,-11,17,11,-43,-45,27,31,35,-78,44,-1,-39,9,-5,2,-127,-55,-112,-29,26,-124,29,77,-33,41,27,-56,-7,-11,-20,52,94,6,-77,-36,-27,40,-45, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0038758188020437956, 0.0036495754029601812, 0.0032002169173210859, 0.0027938750572502613, 0.0039606182835996151, 0.0053751491941511631, 0.0026072603650391102, 0.0030704871751368046, 0.0049489247612655163, 0.004117878619581461, 0.0045355730690062046, 0.0027135757263749838, 0.0030994175467640162, 0.003353465348482132, 0.0029005745891481638, 0.0033656677696853876, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9671, -2581, -5371, 8349, -2388, -257, 251, -1135, 1508, -3670, -775, -3462, 9536, -3360, -3646, -4849, 773, 260, -8850, -1738, -3086, -392, -6160, -1152, 22, 10787, -7932, -6268, -2496, -2561, -308, -479, 17734, -214, -4437, -737, -55, 12740, 1679, 10199, -838, 5498, 423, 5245, 1408, 1512, 9633, 3215, -4765, -214, -1684, -1153, -377, -3071, 747, 2358, -707, 4829, 82, 1645, -756, -200, 454, 7738, 10819, -1562, 15921, 9237, 679, -700, 11931, -582, 156, 471, -3093, -211, 17843, 14387, 12734, 14034, 11981, -1655, 9966, 10724, -986, -1879, 11709, -5232, 10760, -898, -7089, 745, -796, -72, 19701, -1410, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010361483145970851, 0.00026512399199418724, 0.00017501522961538285, 0.00012292829342186451, 0.00021261861547827721, 0.00046952129923738539, 9.9017575848847628e-05, 0.00021895280224271119, 0.00040919898310676217, 0.00022898336465004832, 0.00032344364444725215, 0.00019921312923543155, 8.5510364442598075e-05, 0.00015717321366537362, 0.00026452101883478463, 0.00019701439305208623, 0.00041872388101182878, 0.00044379182509146631, 0.00017504188872408122, 0.00035314878914505243, 0.00021807244047522545, 0.00024690304417163134, 0.00010195546929026023, 0.00018190115224570036, 0.0021969142835587263, 0.00011202909809071571, 0.00028350562206469476, 0.00012420334678608924, 0.00032667527557350695, 0.00017356523312628269, 0.00016876139852683991, 0.00028665701393038034, 6.8143504904583097e-05, 0.00047415465814992785, 0.00014131190255284309, 0.00020625321485567838, 0.00031262621632777154, 8.7524014816153795e-05, 0.00022575250477530062, 0.00011489372991491109, 0.0005929459584876895, 0.00022640825773123652, 0.00021387476590462029, 0.00016159667575266212, 0.00015315077325794846, 0.00026557644014246762, 0.00014249996456783265, 0.00023478698858525604, 0.0002390974696027115, 0.00042507005855441093, 0.00032228280906565487, 0.00024977081920951605, 0.00015408128092531115, 0.00029456298216246068, 0.00030780959059484303, 0.00023319425235968083, 0.00014945425209589303, 0.00034619035432115197, 0.00040273225749842823, 0.00032538938103243709, 0.00031909512472338974, 0.00027992945979349315, 0.00016891837003640831, 0.0001190278198919259, 0.0002082727150991559, 0.00043736284715123475, 0.00010485582606634125, 0.00015277633792720735, 0.00022901434567756951, 0.00042524613672867417, 0.00015086801431607455, 0.0002678257878869772, 0.00052110536489635706, 0.00017978827236220241, 0.00016877739108167589, 0.00021502746676560491, 7.7570184657815844e-05, 0.00014196572010405362, 0.00011067090963479131, 0.0001332664251094684, 0.0001192018753499724, 0.00027807633159682155, 0.00011100799747509882, 0.00023861575755290687, 0.00010472042777109891, 0.00030326456180773675, 0.00013973614841233939, 0.00026201788568869233, 0.00012779003009200096, 0.00023453882022295147, 0.00012168063403805718, 0.00021469892817549407, 0.00031896776636131108, 0.00015581122715957463, 8.2875412772409618e-05, 0.00028860621387138963, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,1,-6,-16,104,-3,26,-18,-4,-7,-13,-13,-52,5,6,-41,-19,4,-3,-8,6,30,13,54,-3,-35,-33,11,28,6,23,6,-12,3,14,-23,5,-95,-42,2,3,-10,43,-25,-36,33,-72,-25,-27,10,-10,59,-65,0,26,-10,6,-17,10,-16,-1,-21,1,-42,-28,-17,-45,-34,-21,30,-12,-8,26,10,4,1,-19,-12,127,-58,-95,11,-111,-22,-26,-16,8,7,-13,-15,19,-48,-4,31,-29,6, -17,46,46,-85,-33,5,127,-53,2,-16,-38,17,-86,14,-72,51,-11,67,82,-22,0,127,81,127,29,-1,40,83,127,44,127,-26,-118,-15,-60,-39,-15,-127,127,-79,-23,-127,-8,-37,54,-40,-48,-10,33,-3,23,127,-84,27,-83,-3,-77,-9,-2,30,-7,-127,-118,-62,-59,5,-6,-86,-12,20,-95,105,-127,-10,9,-25,-127,-101,-6,-124,-127,16,10,-75,87,71,-71,34,-127,1,42,-17,11,127,-64,-84, -35,11,-20,-6,71,-2,36,-22,-16,6,-10,10,-47,3,3,-48,-17,-2,-1,-16,1,14,15,37,-4,-26,0,-9,18,16,16,7,3,3,4,56,4,-87,-31,-10,-6,-7,29,-19,-28,-37,-63,-27,-20,-2,-12,44,6,-7,6,-11,71,-21,14,-27,-1,-1,-56,-6,-33,-27,127,-42,-14,20,9,7,14,4,12,20,-13,22,-44,-35,-84,5,-127,-25,5,-28,7,-22,-41,-29,6,44,1,25,-33,12, 
  /* [0][1][][] */ -96,3,29,-64,53,102,-37,-16,-2,-25,-18,-8,-127,22,28,64,-24,38,126,27,35,-13,97,-18,37,4,56,31,-1,8,4,-19,-127,-15,67,-17,-7,-127,-60,-127,-14,-11,80,-27,-84,127,-100,-90,51,71,8,-36,-114,68,53,-28,29,-40,36,-17,15,-12,91,-80,-46,18,-29,-66,-20,-2,-127,8,67,127,12,-70,-108,-72,-68,-64,-71,-5,-22,-68,49,26,-102,47,-60,127,118,-96,127,1,-58,-7, 70,127,127,127,-127,-127,92,-66,127,127,-65,-50,-105,127,-16,127,127,-127,127,127,127,-74,110,-112,-127,-127,127,127,-111,127,-25,127,-109,127,127,-96,127,115,8,-38,127,-8,-127,-101,127,-25,127,127,127,-127,127,-112,127,127,-127,127,-127,127,-127,127,-94,112,100,-127,127,127,-17,127,-109,-127,-29,-127,4,99,127,63,34,-127,93,-127,78,127,117,127,127,73,-127,127,-92,57,-11,-25,-82,-29,-127,-30, -127,-22,25,-79,21,59,-51,11,-33,-28,4,127,-114,22,30,40,-26,49,96,13,23,-24,60,-17,38,1,35,17,-11,0,21,-15,-99,-29,86,127,-3,-96,-86,-66,-28,-16,28,-41,-80,-79,-95,-114,36,73,-17,-20,127,19,84,-41,105,-39,49,-45,1,-27,-127,-34,-72,-7,-57,-74,-28,4,-112,-4,21,-86,7,127,-74,-72,-60,20,-72,-15,-67,-94,8,32,-74,33,-43,-69,127,127,-36,-22,-70,-8, 
  /* [0][2][][] */ -41,-31,-3,-38,42,3,19,18,-7,6,32,-17,92,1,0,-27,-13,-3,-26,-16,-10,-21,20,-23,8,-21,-12,8,12,-25,-20,3,25,-2,14,-29,-13,-18,-1,4,-21,3,18,5,24,6,-55,-6,-27,6,-33,-12,-17,-23,27,-18,12,-29,6,-21,-10,21,-3,-16,-42,-17,109,24,17,31,1,-6,8,-7,-17,-22,-34,24,-35,-37,-39,3,-83,-6,-2,-1,27,-21,-25,2,-22,-34,-18,-4,-37,2, -36,-52,30,-116,-33,2,70,127,-60,74,127,-22,-46,23,127,79,-18,-33,65,-53,-29,-36,127,21,27,-13,27,9,1,-6,-103,-44,-66,-30,-66,-4,-96,-71,58,-59,-19,-90,-43,127,37,-21,-35,-11,29,-2,-22,-6,53,27,-52,-43,-37,-63,41,-57,127,32,101,12,-95,-47,-25,-42,127,30,-67,14,25,-24,20,-21,-30,-69,-4,68,-88,-23,-91,-78,49,-127,-15,7,-21,1,42,-7,16,-108,-61,127, -16,13,1,-14,40,-5,15,19,-21,-2,17,35,99,5,-1,-38,-9,16,-23,-24,-6,-12,21,-14,1,-13,-18,5,3,-15,-29,0,12,1,17,6,-18,-38,-9,23,-28,-9,-2,4,11,-14,-56,1,-18,-4,-26,-13,-1,-23,33,-15,68,-23,10,-24,-2,21,-24,11,-26,-20,-34,24,18,22,-39,-4,-54,-34,-18,-8,-48,-10,94,5,-15,-5,-53,-7,2,4,34,-6,-6,0,-29,9,5,-17,-13,-4, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0044842557981610298, 0.011474069207906723, 0.0075743310153484344, 0.0053201061673462391, 0.009201735258102417, 0.020320001989603043, 0.0042852950282394886, 0.0094758672639727592, 0.017709365114569664, 0.009909970685839653, 0.013998035341501236, 0.0086215706542134285, 0.0037007282953709364, 0.0068021621555089951, 0.011447974480688572, 0.0085264137014746666, 0.018121585249900818, 0.01920647919178009, 0.007575484924018383, 0.015283618122339249, 0.00943776685744524, 0.01068550068885088, 0.0044124415144324303, 0.007872341200709343, 0.095078334212303162, 0.0048484094440937042, 0.01226959191262722, 0.0053752879612147808, 0.014137893915176392, 0.0075115780346095562, 0.0073036770336329937, 0.012405978515744209, 0.0029491232708096504, 0.020520525053143501, 0.0061157140880823135, 0.0089262528344988823, 0.013529876247048378, 0.0037878754083067179, 0.0097701456397771835, 0.0049723852425813675, 0.025661589577794075, 0.0097985249012708664, 0.0092560993507504463, 0.0069936010986566544, 0.0066280784085392952, 0.011493650265038013, 0.0061671314761042595, 0.010161140933632851, 0.010347690433263779, 0.018396236002445221, 0.013947796076536179, 0.010809612460434437, 0.0066683492623269558, 0.012748134322464466, 0.013321422040462494, 0.010092210024595261, 0.0064681000076234341, 0.014982470311224461, 0.017429497092962265, 0.014082242734730244, 0.013809839263558388, 0.012114821933209896, 0.0073104705661535263, 0.0051513011567294598, 0.0090136528015136719, 0.018928244709968567, 0.0045379637740552425, 0.0066118733957409859, 0.0099113117903470993, 0.018403856083750725, 0.0065292851068079472, 0.011590997688472271, 0.022552464157342911, 0.0077808992937207222, 0.0073043694719672203, 0.0093059856444597244, 0.0033570923842489719, 0.0061440104618668556, 0.0047896294854581356, 0.0057675209827721119, 0.0051588336937129498, 0.012034622952342033, 0.0048042181879281998, 0.010326842777431011, 0.0045321038924157619, 0.013124722056090832, 0.0060475189238786697, 0.011339643038809299, 0.0055305133573710918, 0.010150400921702385, 0.0052661099471151829, 0.0092917671427130699, 0.013804326765239239, 0.0067432178184390068, 0.0035866925027221441, 0.012490336783230305, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1646, 5763, 543, 1620, 3747, 13152, -86, 1916, 13729, -993, 21368, 3344, 2074, 407, 6294, 518, 3788, 4656, -371, 10020, 1047, 7911, -1667, 1386, -10773, 1514, 1995, 1466, 4699, 1132, 4181, 3557, 2010, 12850, 3258, 3272, 3238, 2274, 3561, 2688, 21064, 1229, 2013, 949, 3752, 10244, 6049, 13134, 1015, -1243, 1854, 5954, 2207, -2969, 7333, 211, 2341, 18210, 1766, 1814, 2430, 10378, 3396, -356, 16470, 11006, 1450, 3138, 6199, 4656, 3101, 1309, -3217, 3954, 1762, 2563, 645, 8166, 3154, 8535, 2717, 1275, 3262, 14513, -311, 9526, 8430, 1263, -343, 2117, 1771, 12957, 3000, 2676, 5582, 4334, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00020520306134130806, 0.0001285653852391988, 0.00022044930665288121, 0.0002265251096105203, 0.00015905132750049233, 7.0055473770480603e-05, 0.00021267907868605107, 0.0001589784660609439, 6.1790880863554776e-05, 0.00017248514632228762, 4.1749255615286529e-05, 0.00013915341696701944, 0.00016378257714677602, 0.00041583398706279695, 8.5172323451843113e-05, 0.00014656251005362719, 0.00016599033551756293, 0.00013333921378944069, 0.00020432435849215835, 8.7006817921064794e-05, 0.00024726244737394154, 9.4649200036656111e-05, 0.00016025084187276661, 0.00018051349616143852, 7.1239686803892255e-05, 0.00012027438060613349, 0.00023643647728022188, 0.00022256179363466799, 0.00017678260337561369, 0.00021462222503032535, 0.00014150113565847278, 0.00015467322373297065, 0.00021951187227386981, 6.5335581894032657e-05, 0.00014921453839633614, 0.00018186631496064365, 0.00017840856162365526, 0.00019026549125555903, 0.00012817665992770344, 0.00016817424329929054, 4.4032531150151044e-05, 0.00022420079039875418, 0.00018414294754620641, 0.00016630213940516114, 0.00011656308197416365, 8.5823463450651616e-05, 0.00011160183930769563, 6.0336944443406537e-05, 0.00027121961466036737, 0.00017716438742354512, 0.00024563580518588424, 0.00011392762826289982, 0.00021299393847584724, 0.00013276987010613084, 0.00010155067138839513, 0.00034930327092297375, 0.00014442839892581105, 4.9549249524716288e-05, 0.00012988995877094567, 0.00015827652532607317, 0.00017291081894654781, 8.2201215263921767e-05, 0.0001879075716715306, 0.00022543684463016689, 5.6764023611322045e-05, 7.9430530604440719e-05, 0.00026758649619296193, 0.00018806205480359495, 0.00012239406351000071, 0.00010917220788542181, 0.00017865537665784359, 0.00015358839300461113, 0.00018039395217783749, 0.00016454348224215209, 0.00019817602878902107, 0.00024055402900557965, 0.00014867442951072007, 9.916230192175135e-05, 0.00018097060092259198, 0.00010498844494577497, 0.00016853303532116115, 0.00012418812548276037, 0.00014404996181838214, 6.3296807638835162e-05, 0.00010120092338183895, 7.557341450592503e-05, 8.833226456772536e-05, 0.00029579616966657341, 0.00028362643206492066, 0.00026544337742961943, 0.00015249778516590595, 6.8562098022084683e-05, 0.00016068121476564556, 0.00014654560072813183, 9.9566794233396649e-05, 0.00014706686488352716, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 50,8,9,60,-127,-26,116,48,56,99,-26,43,26,13,26,77, 
  /* [1][0][][] */ -24,23,-88,9,127,107,1,10,-29,11,-65,36,-43,71,-52,-34, 
  /* [2][0][][] */ -43,76,83,-7,61,85,7,32,38,-3,45,-21,54,-127,-10,11, 
  /* [3][0][][] */ 127,-21,27,12,20,19,-6,12,39,28,-50,-26,-38,46,-21,44, 
  /* [4][0][][] */ -82,-10,-6,15,-127,8,-100,-49,12,30,-20,-57,-13,18,-44,127, 
  /* [5][0][][] */ -98,-9,51,31,127,13,-6,24,-43,28,-31,5,-59,63,-73,-54, 
  /* [6][0][][] */ -127,27,-38,42,-21,-84,77,25,19,-41,-50,37,9,4,-32,5, 
  /* [7][0][][] */ -3,101,46,-80,82,52,127,15,39,2,0,52,81,40,-42,12, 
  /* [8][0][][] */ -35,-13,-80,42,-63,92,-26,-81,33,-56,74,37,127,44,-96,27, 
  /* [9][0][][] */ -20,-127,-28,71,-34,-48,-2,64,42,47,17,81,-65,25,-15,-30, 
  /* [10][0][][] */ -53,-45,-127,45,-106,122,45,-78,3,-57,73,-42,22,105,-90,86, 
  /* [11][0][][] */ -15,-107,-42,41,14,98,28,-7,29,17,22,-91,15,102,-127,91, 
  /* [12][0][][] */ -30,-82,-99,96,-126,-127,29,73,83,61,-16,101,-11,-69,-29,-7, 
  /* [13][0][][] */ -65,-18,-34,-8,-15,0,27,12,-18,127,-12,-17,32,31,12,-9, 
  /* [14][0][][] */ -121,-13,-54,-50,-19,95,-29,-95,127,-52,76,-1,81,-51,-88,-83, 
  /* [15][0][][] */ 4,-127,90,-52,-68,-47,6,60,10,-52,-84,-32,83,-32,-24,-45, 
  /* [16][0][][] */ -19,-29,17,-39,30,29,-15,-33,57,-127,39,-18,-4,10,-77,-86, 
  /* [17][0][][] */ -26,-5,36,-57,28,-2,-46,20,89,-54,35,66,108,-73,-15,-127, 
  /* [18][0][][] */ 47,-4,-39,-127,-2,-21,91,-40,17,53,-17,37,-31,53,-24,-109, 
  /* [19][0][][] */ -26,-37,-13,-51,-100,36,-20,-12,37,-38,19,-127,-24,-26,-31,-16, 
  /* [20][0][][] */ 6,67,69,-103,73,5,-52,88,-117,-127,28,-74,-39,105,-22,-10, 
  /* [21][0][][] */ 12,-115,-120,3,127,40,87,115,-111,-78,-21,28,110,-117,-51,32, 
  /* [22][0][][] */ 70,-20,87,-5,7,5,75,33,31,116,25,21,7,-1,127,-6, 
  /* [23][0][][] */ -105,-60,-31,63,74,45,12,4,-8,16,-8,-81,1,56,38,127, 
  /* [24][0][][] */ 33,-18,33,32,8,-103,21,-67,21,121,-127,79,-18,-78,96,-74, 
  /* [25][0][][] */ 113,-45,105,127,30,-2,-30,40,-119,88,65,-58,-26,29,76,-10, 
  /* [26][0][][] */ -18,21,15,44,-53,111,-13,38,-57,-35,-79,39,7,25,48,-127, 
  /* [27][0][][] */ 26,-3,-10,-52,-39,7,-79,5,-95,-19,-74,-38,-75,39,-23,127, 
  /* [28][0][][] */ -68,22,10,10,14,-5,-127,9,-6,-38,7,-15,12,-50,-62,-18, 
  /* [29][0][][] */ -31,-110,-32,88,-31,16,127,11,71,51,-105,71,36,-32,-57,84, 
  /* [30][0][][] */ 42,-68,-65,8,-127,38,67,-39,12,-16,-10,-31,-8,45,-19,82, 
  /* [31][0][][] */ -127,-17,-8,89,-31,11,-53,7,-17,-49,19,-21,-19,-54,-22,93, 
  /* [32][0][][] */ -125,-75,-88,-6,-110,-57,8,-20,127,53,-58,-60,51,40,37,-25, 
  /* [33][0][][] */ -14,23,-103,45,-127,-100,49,-22,-123,33,-57,-72,-35,107,57,76, 
  /* [34][0][][] */ 44,52,3,38,-57,-31,49,7,29,-127,-18,37,-12,5,48,87, 
  /* [35][0][][] */ 54,-4,-55,-3,-127,7,83,-31,24,56,-10,-10,24,70,45,58, 
  /* [36][0][][] */ -9,6,-58,54,127,-23,41,69,-85,27,-77,-66,16,-15,7,28, 
  /* [37][0][][] */ -106,45,7,-62,48,-89,-32,-26,-12,-14,-20,49,59,-62,19,-127, 
  /* [38][0][][] */ 40,105,27,-72,-99,-68,-127,-55,-49,-69,65,75,-83,-102,86,-2, 
  /* [39][0][][] */ 1,-51,13,62,22,75,67,-48,-33,57,18,-36,-20,127,42,104, 
  /* [40][0][][] */ 110,48,107,104,-49,-64,-18,23,-90,89,-12,-24,-62,-34,127,-16, 
  /* [41][0][][] */ -19,-6,4,56,-99,127,13,58,-61,15,-111,5,30,29,48,-117, 
  /* [42][0][][] */ 7,-98,18,-9,127,27,61,24,-38,-87,-73,-23,-23,-8,-17,43, 
  /* [43][0][][] */ -31,-80,-53,23,127,16,-1,77,-68,-60,-127,-77,106,-8,-68,49, 
  /* [44][0][][] */ -34,-67,-69,-81,20,67,64,16,-47,-127,-55,73,-38,66,38,119, 
  /* [45][0][][] */ 1,-42,-66,-13,-127,59,-27,-58,49,-41,21,-45,5,-2,-30,44, 
  /* [46][0][][] */ 36,-67,0,4,78,-77,-8,73,1,-16,31,55,-35,-47,52,-127, 
  /* [47][0][][] */ -83,-42,-38,104,-31,15,39,52,-3,127,110,108,-46,89,3,125, 
  /* [48][0][][] */ 41,-18,-72,-93,31,-68,4,49,43,-75,-2,19,-57,9,-38,-127, 
  /* [49][0][][] */ 51,29,10,39,-5,-19,50,48,-39,127,-37,38,-38,-23,77,95, 
  /* [50][0][][] */ 8,-4,13,10,-127,-15,-10,-40,56,13,28,54,-16,-55,19,-4, 
  /* [51][0][][] */ 20,-18,-5,-127,-10,105,50,-57,14,12,21,-49,76,77,-37,10, 
  /* [52][0][][] */ 26,-14,-10,-87,76,-97,-8,-37,45,-7,127,-57,40,4,-37,94, 
  /* [53][0][][] */ -51,-69,50,-24,-39,-127,12,-101,-5,93,-95,89,-37,-12,28,-88, 
  /* [54][0][][] */ 67,76,39,-3,-127,-40,-99,-99,-19,15,73,102,-91,-35,75,26, 
  /* [55][0][][] */ 8,11,-29,63,-28,25,31,-18,5,127,13,52,-5,-1,-6,35, 
  /* [56][0][][] */ 41,-113,-85,84,-83,37,-14,82,127,15,77,59,-28,-35,48,100, 
  /* [57][0][][] */ 68,26,99,-98,97,5,-25,-18,114,-47,1,127,67,-89,116,-75, 
  /* [58][0][][] */ 70,-53,19,-69,37,18,-10,127,59,99,11,62,46,11,79,-11, 
  /* [59][0][][] */ -48,25,36,-38,1,-88,-8,12,-4,19,-99,-98,-127,-47,65,-16, 
  /* [60][0][][] */ 36,-26,27,7,11,-20,4,-52,29,127,-20,59,-14,-27,-13,-31, 
  /* [61][0][][] */ 77,60,7,-29,-105,-127,-5,-79,-62,-30,-35,6,-58,-50,100,93, 
  /* [62][0][][] */ -25,78,-49,29,-55,127,-39,18,-49,0,-32,37,-21,40,55,-74, 
  /* [63][0][][] */ 33,-17,-72,-127,-12,-45,92,-17,0,-103,-44,20,-43,66,38,-34, 
  /* [64][0][][] */ -34,22,12,-21,44,-74,25,80,-127,-17,-69,-34,-31,86,71,59, 
  /* [65][0][][] */ -64,-12,-30,-11,82,42,-48,-89,-111,-43,8,-20,-127,98,-59,35, 
  /* [66][0][][] */ -20,59,-3,34,-40,127,-15,29,-77,26,-28,56,-36,57,51,-84, 
  /* [67][0][][] */ 27,-24,-28,-16,23,-95,59,-83,-1,41,18,126,-61,-20,-13,-127, 
  /* [68][0][][] */ 19,-127,-26,76,-8,0,25,88,41,35,51,9,-60,26,-6,-12, 
  /* [69][0][][] */ 7,73,76,-96,69,10,-26,114,32,92,62,94,105,-104,31,-127, 
  /* [70][0][][] */ 60,32,68,-47,109,3,-126,-67,-127,-100,-18,53,-29,67,-108,-23, 
  /* [71][0][][] */ -27,-64,40,-49,74,-14,51,42,-99,81,-127,-42,31,104,-13,70, 
  /* [72][0][][] */ 7,9,60,8,-62,-15,-118,-64,-2,49,-31,66,23,105,-127,-10, 
  /* [73][0][][] */ -7,-36,-20,-34,43,-109,35,-37,66,77,107,-4,27,-15,-64,127, 
  /* [74][0][][] */ 12,2,-23,87,-90,-11,81,30,75,55,38,109,127,22,-54,10, 
  /* [75][0][][] */ -30,38,-30,40,-48,127,-20,30,-39,26,-33,51,-19,47,29,-59, 
  /* [76][0][][] */ -68,103,-59,61,-127,-9,2,21,65,38,-47,-46,65,-58,-124,43, 
  /* [77][0][][] */ 118,105,-100,127,70,65,67,57,54,10,75,-42,92,5,73,5, 
  /* [78][0][][] */ 20,-37,-8,-50,62,-112,37,-49,55,33,127,-23,18,-7,-35,125, 
  /* [79][0][][] */ -49,68,0,23,-2,-37,-36,-18,-127,-12,46,2,113,36,-94,-48, 
  /* [80][0][][] */ -91,23,94,10,77,45,-9,-127,-93,76,-59,-37,-11,-79,10,54, 
  /* [81][0][][] */ 96,70,-15,-1,33,-28,78,119,-118,124,-61,-39,-39,23,118,127, 
  /* [82][0][][] */ 58,105,-21,-54,-2,-51,127,-100,20,14,-58,60,123,-13,70,-49, 
  /* [83][0][][] */ 14,-24,23,28,-2,22,-20,-98,67,-36,88,15,42,-65,-46,-127, 
  /* [84][0][][] */ -125,-94,-44,-16,-3,103,109,4,90,76,117,127,79,110,-84,15, 
  /* [85][0][][] */ 112,2,95,-72,71,-8,-5,76,18,104,-62,8,-32,60,127,22, 
  /* [86][0][][] */ -89,82,-41,-1,22,93,24,13,93,34,127,-35,-32,52,-17,-19, 
  /* [87][0][][] */ 14,-61,28,-41,46,-127,29,-28,46,-10,61,-31,39,-37,-37,67, 
  /* [88][0][][] */ -62,76,41,-7,93,-30,25,6,-44,-57,100,-64,66,111,96,-127, 
  /* [89][0][][] */ -26,43,-12,25,-39,127,-16,25,-38,7,-46,19,-10,56,34,-85, 
  /* [90][0][][] */ 44,-82,24,19,127,-2,40,35,-12,-87,-111,-24,-22,-3,-59,30, 
  /* [91][0][][] */ -19,84,-42,-34,-27,-90,-91,49,-98,-2,-96,-127,-125,-75,2,35, 
  /* [92][0][][] */ 56,52,62,41,-127,-88,13,10,-31,34,-22,-21,-24,-73,30,4, 
  /* [93][0][][] */ 13,-127,-91,75,-26,-43,-10,110,89,57,-2,57,-47,43,4,-18, 
  /* [94][0][][] */ 108,4,121,-17,25,-45,18,52,21,87,13,69,9,20,127,-3, 
  /* [95][0][][] */ -53,-51,-12,-25,127,0,44,68,-17,-15,-108,-57,31,21,-64,19, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0037333918735384941, 0.0023390732239931822, 0.0040107765235006809, 0.0041213175281882286, 0.0028937235474586487, 0.0012745645362883806, 0.0038694078102707863, 0.0028923980426043272, 0.0011242014588788152, 0.0031381337903439999, 0.00075957115041092038, 0.0025317079853266478, 0.0029798022005707026, 0.0075655360706150532, 0.001549595152027905, 0.0026665064506232738, 0.0030199694447219372, 0.0024259265046566725, 0.0037174050230532885, 0.0015829711919650435, 0.0044986056163907051, 0.0017220140434801579, 0.0029155469965189695, 0.0032841986976563931, 0.0012961096363142133, 0.0021882294677197933, 0.0043016416020691395, 0.0040492103435099125, 0.0032163201831281185, 0.0039047608152031898, 0.0025744214653968811, 0.0028140698559582233, 0.0039937212131917477, 0.0011886924039572477, 0.0027147564105689526, 0.0033088114578276873, 0.0032459022477269173, 0.0034616230987012386, 0.0023320007603615522, 0.003059702692553401, 0.00080111226998269558, 0.0040790298953652382, 0.0033502315636724234, 0.0030256423633545637, 0.0021207074169069529, 0.0015614416915923357, 0.0020304443314671516, 0.0010977489873766899, 0.0049344734288752079, 0.0032232662197202444, 0.004469010978937149, 0.0020727589726448059, 0.0038751363754272461, 0.0024155681021511555, 0.0018475769320502877, 0.0063550998456776142, 0.0026276791468262672, 0.00090148148592561483, 0.0023631718941032887, 0.0028796270489692688, 0.0031458782032132149, 0.0014955397928133607, 0.0034187238197773695, 0.0041015180759131908, 0.0010327445343136787, 0.0014451309107244015, 0.0048683737404644489, 0.0034215343184769154, 0.0022267941385507584, 0.0019862405024468899, 0.0032503926195204258, 0.0027943328022956848, 0.0032820235937833786, 0.0029936458449810743, 0.0036055445671081543, 0.004376554861664772, 0.0027049300260841846, 0.0018041238654404879, 0.003292514942586422, 0.0019101225771009922, 0.0030662303324788809, 0.0022594346664845943, 0.002620793879032135, 0.0011515996884554625, 0.0018412137869745493, 0.0013749559875577688, 0.0016070859273895621, 0.0053816107101738453, 0.005160199012607336, 0.0048293829895555973, 0.0027744907420128584, 0.0012473944807425141, 0.0029233770910650492, 0.0026661988813430071, 0.0018114829435944557, 0.0026756825391203165, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -3764, 11647, -19722, -701, 11426, -13638, -44006, -8374, -6208, 8026, -15258, -13422, 5720, -10579, -3778, -1537, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014595495304092765, 0.00016487188986502588, 0.00017661794845480472, 0.00016816200513858348, 0.00011112506035715342, 0.00013601698447018862, 0.00011045299470424652, 0.00012933820835314691, 8.7638225522823632e-05, 0.00010029858094640076, 0.00019001401960849762, 0.00017875949561130255, 0.00012616364983841777, 7.0190653786994517e-05, 0.00014134676894173026, 0.00014902533439453691, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 29,35,22,-26,60,57,-35,55,-8,116,-1,47,-37,36,-10,50,25,73,42,-66,-67,78,-11,50,60,47,33,47,-50,-47,-13,85,-24,13,-71,43,50,-127,-38,16,14,-31,58,-3,-3,-53,-64,-23, 
  /* [1][0][][] */ -50,8,-83,-44,8,93,-62,12,-10,-41,-42,28,55,-17,-31,-29,-30,-34,-15,23,-65,46,-104,-45,-52,-42,54,66,-18,-32,43,-47,14,-59,-31,57,13,-57,127,-35,-23,29,-49,-15,31,51,33,26, 
  /* [2][0][][] */ 0,0,52,-27,-17,-73,22,23,104,73,-65,16,104,-45,127,85,-63,-16,-25,26,85,-79,-27,-88,9,-30,35,-69,40,36,-48,17,36,-17,57,36,-73,4,4,-25,31,32,67,-16,27,-84,95,-60, 
  /* [3][0][][] */ 38,2,-21,-22,35,110,20,-13,39,-46,21,-16,-51,2,7,45,-36,-59,42,-117,-10,3,-30,-20,-37,95,127,65,-9,-37,22,38,65,-22,90,35,-45,-61,8,44,26,17,-12,-1,25,16,-10,-20, 
  /* [4][0][][] */ 93,-3,1,-45,79,84,54,19,65,-11,-111,33,41,-20,21,-9,-102,-118,-21,-95,-18,20,-37,-32,-76,127,-93,116,-66,-60,21,74,47,-42,14,-31,-14,8,-25,21,-45,-10,-7,55,-40,104,-27,-58, 
  /* [5][0][][] */ -2,-7,-54,8,-15,51,16,-29,58,56,38,92,56,-20,31,-5,-41,127,-24,34,9,-4,-71,-21,32,-2,-69,-34,-11,35,21,-14,-42,-4,40,13,-50,9,-83,4,83,-23,24,51,-22,12,-43,29, 
  /* [6][0][][] */ 62,14,15,70,14,-27,114,-40,6,72,127,112,45,49,-48,68,40,-42,-67,91,52,-71,-41,67,-89,97,98,-1,121,48,-35,1,103,-63,-126,-7,98,28,-2,-3,13,62,56,-37,75,124,43,-10, 
  /* [7][0][][] */ -95,1,-21,33,-60,-62,22,50,76,115,-55,-73,-98,12,-18,-16,-82,96,-3,116,-45,42,18,38,-15,-97,-30,-78,33,45,-5,10,-15,14,18,-13,4,-56,127,10,5,38,21,-9,56,74,-34,0, 
  /* [8][0][][] */ -13,-91,43,-56,60,-57,73,-35,-28,-108,31,16,-37,-1,23,32,4,11,-32,99,5,28,-21,29,59,-3,-54,-34,-127,-25,-54,-110,13,-55,0,75,-11,27,108,19,14,4,66,105,-3,-70,-37,76, 
  /* [9][0][][] */ 16,-42,26,-63,37,83,-37,51,15,-31,-43,-20,20,-46,122,-22,2,-116,36,42,-71,43,58,-42,-27,-79,-31,86,61,84,-45,-25,-59,37,-5,127,-32,-41,-52,-26,-32,-6,35,116,63,90,-75,12, 
  /* [10][0][][] */ -13,17,-25,-9,17,28,-61,-45,45,37,62,-2,-30,-11,46,-51,-53,127,-3,46,-3,-11,14,24,-43,42,1,92,28,9,-29,-10,66,7,-10,25,-10,-40,-35,17,-79,-3,20,-9,16,45,29,34, 
  /* [11][0][][] */ -33,45,-17,39,28,54,3,11,17,24,-127,-70,67,22,-5,-46,-9,27,-38,-46,-5,-9,104,7,44,14,-20,35,-4,27,-10,51,25,-1,-45,-4,39,79,106,23,27,-25,66,1,-53,-17,82,-2, 
  /* [12][0][][] */ -66,4,29,19,-68,-56,-1,6,-41,-37,-127,23,73,-103,13,30,55,107,89,-116,-35,45,-45,-83,-3,-19,42,-31,0,13,-18,65,71,86,37,-27,-61,-29,38,1,-32,16,57,-3,39,-17,-36,-34, 
  /* [13][0][][] */ -60,-115,-49,-99,11,28,54,12,-127,26,122,-62,63,46,118,1,122,27,-14,-99,78,-83,111,-3,-81,1,-28,15,-39,-91,-104,22,40,-41,-69,58,30,-50,83,-80,-11,49,65,45,49,-23,103,-60, 
  /* [14][0][][] */ 66,18,-49,5,-34,18,-80,-20,-23,53,52,40,-18,-60,17,-42,45,-108,27,9,87,-54,26,-1,-8,124,-85,4,-49,-32,-94,3,127,49,86,-17,-80,5,-24,60,-12,-44,108,-25,-48,-47,-57,50, 
  /* [15][0][][] */ -54,20,39,21,90,4,-2,30,24,71,-15,52,55,-14,-39,-21,13,31,-7,-39,23,-29,-50,-54,57,-68,-37,61,-37,11,18,7,-58,-2,127,3,-83,20,54,-13,-41,-21,16,4,-37,-27,-16,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0062030856497585773, 0.0070070549845695496, 0.0075062625110149384, 0.0071468851529061794, 0.0047228150069713593, 0.005780722014605999, 0.0046942522749304771, 0.0054968739859759808, 0.0037246246356517076, 0.0042626895010471344, 0.0080755958333611488, 0.0075972783379256725, 0.0053619551472365856, 0.0029831025749444962, 0.0060072378255426884, 0.0063335765153169632, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 12024, -653, 18432, 673, 15768, -1480, 33910, 538, 10325, 37286, 1155, 22962, -550, 9393, 37847, 23546, 776, -1974, 2987, 50057, 197, 21582, 2196, 16513, 17621, 34027, -1412, -1250, 155, 13531, 21099, -255, 847, 1605, 2530, 15640, 8531, 30619, 4541, 19234, 25844, 284, 1096, 17519, 209, 3495, 38386, 24946, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.2990362241398543e-05, 0.00012399576371535659, 6.1682578234467655e-05, 0.00011773488949984312, 0.00010048357216874138, 8.7881708168424666e-05, 6.1194768932182342e-05, 0.00017119721451308578, 0.00011084003199357539, 5.5939657613635063e-05, 7.0096299168653786e-05, 9.7459909738972783e-05, 8.5227497038431466e-05, 0.00015247131523210555, 4.6090492105577141e-05, 9.237488848157227e-05, 0.00012558474554680288, 7.0571717515122145e-05, 0.00012695316399913281, 4.2877160012722015e-05, 6.5885338699445128e-05, 5.2700455853482708e-05, 0.0001033861844916828, 0.0001067862831405364, 5.5935564887477085e-05, 7.4039213359355927e-05, 6.8960725911892951e-05, 4.891013668384403e-05, 0.00029048640863038599, 0.00010902263602474704, 6.6338528995402157e-05, 0.00022197177167981863, 0.00011099739640485495, 0.00020244556071702391, 7.1899885369930416e-05, 6.6216802224516869e-05, 7.8981422120705247e-05, 5.255998985376209e-05, 7.5778792961500585e-05, 0.00010341104643885046, 5.0003029173240066e-05, 0.00017543225840199739, 0.00026575144147500396, 5.8933870604960248e-05, 0.00014064036076888442, 5.4606458434136584e-05, 5.6797205616021529e-05, 5.438385414890945e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -95,70,-127,85,-105,67,-36,98,-86,-72,60,-44,61,-69,-68,-54,83,79,83,-110,80,-103,65,-86,-113,-49,83,127,-92,-54,-95,110,81,-90,78,-112,-90,-97,89,-53,-13,-92,97,-122,101,74,-88,-51, -112,106,-76,105,-75,123,-35,127,-123,-94,93,-63,90,-95,-90,-82,111,116,127,-125,100,-123,86,-127,-127,-76,110,118,30,-80,-125,127,112,-127,111,-123,-113,-127,120,-84,-109,99,127,-124,-42,107,-105,-79, -57,66,-7,30,-16,73,-28,41,-58,-29,56,-22,51,-35,-47,-17,48,54,72,-32,37,-69,31,-60,-97,-42,35,26,84,-22,-71,68,37,-77,50,-34,-42,-31,39,-57,-127,-32,44,-62,-71,70,-43,-60, 
  /* [0][1][][] */ -95,100,-69,114,-83,104,-106,99,-95,-99,73,-83,77,-99,-98,-103,99,87,-51,-108,107,-127,100,-69,-102,-89,94,101,-127,-85,-103,70,103,25,98,-121,-99,-100,104,-73,-100,-107,94,-127,127,71,-114,-103, -127,127,-98,127,-127,127,-127,126,-127,-127,127,-127,127,-127,-127,-127,127,127,-64,-127,127,-126,127,-118,-115,-127,127,115,10,-127,-127,106,127,31,127,-127,-127,-111,127,-127,-126,127,101,-120,-60,127,-127,-127, -78,70,-88,43,-63,52,-76,83,-51,-36,65,-54,68,-60,-69,-26,58,55,-41,-34,35,-83,51,-55,-124,-59,42,46,82,-56,-72,75,51,13,65,-46,-43,-26,57,-56,-67,-58,29,-77,-92,83,-36,-73, 
  /* [0][2][][] */ -31,33,-2,45,-37,48,-55,10,-35,-48,20,-55,27,-54,-34,-48,48,29,-76,-30,37,-53,43,-31,-53,-52,47,-10,-72,-44,-29,72,43,38,48,-68,-38,-40,29,-56,-91,-43,24,-96,80,24,-53,-57, -76,59,-70,58,-62,32,-65,50,-50,-61,49,-84,43,-65,-57,-37,78,42,-91,-31,37,-51,53,-52,-56,-77,61,21,1,-82,-46,88,36,58,60,-78,-45,-39,33,-70,-44,75,22,-116,-27,51,-57,-87, -30,31,-72,12,-46,-8,-35,17,-7,-16,21,-33,24,-36,-39,4,32,22,-68,-2,7,1,25,-16,-42,-32,26,14,43,-31,-9,26,19,37,33,-12,-8,-1,21,-37,12,-21,-1,-39,-46,40,-14,-37, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031020902097225189, 0.0052698198705911636, 0.002621509600430727, 0.0050037326291203499, 0.0042705517262220383, 0.0037349725607782602, 0.0026007776614278555, 0.0072758812457323074, 0.0047107012942433357, 0.0023774353321641684, 0.0029790925327688456, 0.0041420459747314453, 0.0036221684422343969, 0.0064800307154655457, 0.0019588458817452192, 0.0039259325712919235, 0.0053373514674603939, 0.002999297808855772, 0.0053955093026161194, 0.0018222793005406857, 0.0028001267928630114, 0.0022397693246603012, 0.0043939128518104553, 0.004538416862487793, 0.0023772614076733589, 0.0031466665677726269, 0.0029308306984603405, 0.0020786807872354984, 0.012345672585070133, 0.004633462056517601, 0.0028193874750286341, 0.0094338003545999527, 0.0047173891216516495, 0.0086039360612630844, 0.0030557450372725725, 0.0028142139781266451, 0.0033567103091627359, 0.002233799546957016, 0.003220598679035902, 0.0043949694372713566, 0.0021251286379992962, 0.0074558709748089314, 0.01129443570971489, 0.0025046893861144781, 0.0059772152453660965, 0.0023207743652164936, 0.0024138812441378832, 0.0023113137576729059, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1878, -947, 539, -1809, 3104, -683, 3715, -3381, 886, 534, 1955, 3188, 375, -664, 659, 4462, -1473, 3494, 4771, 837, -676, 2722, -832, 3976, 2564, 1763, 1116, -820, 7362, -201, 2380, -1797, -932, 3297, -967, 1604, 1799, 1171, 211, 3634, 1571, 9624, -3759, 1622, 7271, -30, 2369, 2781, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.000212854691199027, 0.0003375592059455812, 0.00035338956513442099, 0.00027171682449989021, 0.00024896336253732443, 0.00024673383450135589, 0.00020512586343102157, 0.00016244981088675559, 0.00034758745459839702, 0.00029803437064401805, 0.00022011317196302116, 0.00023680781305301934, 0.00033520738361403346, 0.00025795004330575466, 0.00029817005270160735, 0.00018465339962858707, 0.00030932988738641143, 0.00022638466907665133, 0.00018124554480891675, 0.00030802653054706752, 0.00027034926461055875, 0.00019913453434128314, 0.0002591898082755506, 0.00019752238586079329, 0.00018149238894693553, 0.00022445520153269172, 0.00028223887784406543, 0.00031087329261936247, 0.00012631500430870801, 0.00032880614162422717, 0.0001857465977082029, 0.0001858613541116938, 0.00017530679178889841, 0.00023426384723279625, 0.0002568705240264535, 0.00031214335467666388, 0.00024412439961452037, 0.0002304062363691628, 0.00021950002701487392, 0.00021580189059022814, 0.0003280871023889631, 9.3911541625857353e-05, 0.00014460281818173826, 0.00025892694247886539, 0.00011732534039765596, 0.00025248169549740851, 0.00024574072449468076, 0.00022514705779030919, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 68,29,127,-36,67,103,-75,-54, 
  /* [1][0][][] */ 13,-83,-127,8,45,22,31,-1, 
  /* [2][0][][] */ -127,-9,-40,-24,56,31,-71,-35, 
  /* [3][0][][] */ 42,63,127,-77,-9,-97,-12,-11, 
  /* [4][0][][] */ -127,22,-54,-18,48,15,-34,-48, 
  /* [5][0][][] */ -96,23,-50,-6,7,46,-86,-127, 
  /* [6][0][][] */ -40,-127,-114,44,89,8,6,37, 
  /* [7][0][][] */ -63,-127,-91,-74,-65,-66,16,84, 
  /* [8][0][][] */ 85,29,-10,-9,96,-78,-127,11, 
  /* [9][0][][] */ -33,49,-47,84,-56,-36,127,-34, 
  /* [10][0][][] */ -19,127,31,64,116,-23,-7,55, 
  /* [11][0][][] */ -85,-35,-22,-8,-87,107,127,-4, 
  /* [12][0][][] */ 62,34,-127,38,-7,-31,-65,-11, 
  /* [13][0][][] */ 69,-44,-72,4,11,-127,-29,-32, 
  /* [14][0][][] */ -3,-86,68,20,123,-127,-57,32, 
  /* [15][0][][] */ -36,-47,-4,127,58,71,-73,21, 
  /* [16][0][][] */ 104,27,-27,19,79,-98,-127,-19, 
  /* [17][0][][] */ 56,127,55,75,45,59,20,-81, 
  /* [18][0][][] */ 31,-21,2,3,127,12,40,-11, 
  /* [19][0][][] */ 11,127,37,14,-121,20,22,-41, 
  /* [20][0][][] */ -39,19,59,-127,25,40,-19,103, 
  /* [21][0][][] */ -37,77,38,-127,39,52,-5,127, 
  /* [22][0][][] */ -61,-61,-88,8,-127,120,95,-20, 
  /* [23][0][][] */ 96,38,-127,25,23,-47,-79,-18, 
  /* [24][0][][] */ -63,59,4,15,-13,84,-127,110, 
  /* [25][0][][] */ -109,-60,-127,17,-54,-69,63,104, 
  /* [26][0][][] */ 53,-7,-32,-34,113,-4,127,-46, 
  /* [27][0][][] */ 127,-70,32,97,1,37,-26,90, 
  /* [28][0][][] */ 40,53,55,-6,127,-57,49,-32, 
  /* [29][0][][] */ -17,-6,-30,-43,-67,5,127,-37, 
  /* [30][0][][] */ 44,-127,-56,-87,-116,-4,21,-53, 
  /* [31][0][][] */ 8,26,-3,-13,-127,9,-28,-9, 
  /* [32][0][][] */ 45,-54,-61,73,-9,-89,117,-127, 
  /* [33][0][][] */ 49,127,42,32,43,-22,-22,-17, 
  /* [34][0][][] */ -125,-30,127,3,-15,96,95,9, 
  /* [35][0][][] */ -36,81,127,-8,-65,-78,-37,35, 
  /* [36][0][][] */ -103,-3,107,-20,-23,127,84,20, 
  /* [37][0][][] */ -23,-81,-9,-127,-46,-90,71,43, 
  /* [38][0][][] */ 42,-15,90,-58,56,53,-127,10, 
  /* [39][0][][] */ -19,84,-127,-32,-18,0,7,82, 
  /* [40][0][][] */ 58,-50,16,35,15,-1,6,127, 
  /* [41][0][][] */ -23,96,127,-1,17,95,-70,25, 
  /* [42][0][][] */ 58,-127,-109,-24,-123,9,23,-95, 
  /* [43][0][][] */ -12,-90,27,-75,127,-48,25,37, 
  /* [44][0][][] */ 11,127,118,33,7,63,-75,7, 
  /* [45][0][][] */ -33,38,13,85,-117,64,-127,19, 
  /* [46][0][][] */ -46,-44,73,47,-127,-114,-32,-4, 
  /* [47][0][][] */ -17,56,35,-111,-127,35,-19,53, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023139682598412037, 0.0036696458701044321, 0.0038417393807321787, 0.0029538653325289488, 0.0027065097820013762, 0.0026822725776582956, 0.0022299473639577627, 0.0017660108860582113, 0.0037786639295518398, 0.0032399664632976055, 0.0023928761947900057, 0.0025743655860424042, 0.0036440787371248007, 0.0028042050544172525, 0.0032414416782557964, 0.0020073887426406145, 0.0033627615775913, 0.0024610543623566628, 0.0019703416619449854, 0.0033485924359411001, 0.0029389986302703619, 0.0021648148540407419, 0.0028176826890558004, 0.0021472889930009842, 0.0019730250351130962, 0.0024400788825005293, 0.0030682520009577274, 0.0033795400522649288, 0.0013731851940974593, 0.0035744900815188885, 0.002019273117184639, 0.0020205206237733364, 0.0019057807512581348, 0.0025467097293585539, 0.0027924696914851665, 0.0033933469094336033, 0.0026539049576967955, 0.0025047732051461935, 0.0023862104862928391, 0.0023460076190531254, 0.0035666734911501408, 0.0010209233732894063, 0.0015719941584393382, 0.0028148251585662365, 0.001275457558222115, 0.0027447580359876156, 0.0026714762207120657, 0.0024476000107824802, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 3963, 727, 22834, -3422, 4928, -14846, 825, -14555, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.3306251326575875e-05, 0.00010416896111564711, 0.0001369755482301116, 0.00011047856969526038, 0.00013041056809015572, 0.00011717229062924162, 8.5778519860468805e-05, 8.3087310486007482e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-47,-17,-70,4,-13,98,87,-113,-81,-32,13,-64,-7,-66,28,-94,15,11,127,58,-26,14,104,75,85,27,-4,-93,-60,-80,-65,-57,113,39,-55,33,-38,94,-10,28,11,5,-109,44,-42,-40,-87, 
  /* [1][0][][] */ -16,56,-19,-24,-73,63,-27,-52,-34,63,-15,14,49,37,-54,-4,-18,-113,80,-53,127,3,-56,21,57,4,-82,52,39,-11,64,27,-33,-15,6,-10,-5,97,-17,-21,65,35,-2,6,100,17,-26,57, 
  /* [2][0][][] */ -24,-32,119,9,86,-42,-12,28,-39,-2,-8,51,4,-48,-47,-127,-55,-103,-26,15,-106,24,-41,-45,-56,16,2,-56,-41,9,-32,-15,3,-4,32,-3,25,-36,-48,13,43,-31,33,-50,-38,-42,-65,-55, 
  /* [3][0][][] */ 52,19,62,10,15,-35,28,67,-62,-34,51,-33,-78,54,-26,43,64,36,-34,24,-109,-76,127,-4,2,10,-69,-43,-51,68,115,-73,5,-112,-19,43,-14,-86,-19,74,-77,-65,74,-12,-105,-68,64,-7, 
  /* [4][0][][] */ 13,-11,67,-28,3,-16,-9,-7,-56,-9,-21,0,44,-66,34,-98,40,42,-11,-31,12,25,19,11,1,0,51,-16,20,23,-127,-17,-24,-21,7,11,47,-8,38,4,-37,-12,-69,26,-16,-91,7,23, 
  /* [5][0][][] */ 28,-51,64,28,27,23,23,-2,-75,-12,-47,24,28,6,10,-45,94,78,4,-18,88,-61,127,-91,-17,50,0,45,16,16,-35,-51,-17,-44,-32,19,44,31,66,7,-81,27,38,25,52,-18,83,-3, 
  /* [6][0][][] */ -41,51,-124,88,55,25,47,27,-14,-3,59,-76,-94,-11,-27,41,-127,35,-9,99,15,61,-99,-97,2,-26,27,79,-27,-39,-45,13,43,79,-38,-17,-12,-4,91,9,78,71,-127,-48,-30,116,-56,-33, 
  /* [7][0][][] */ 34,76,-76,19,11,52,119,76,33,75,-94,5,-49,5,-58,-47,36,32,102,94,74,-9,127,32,100,85,-45,88,-68,33,-3,-67,23,-66,-26,14,-1,85,-57,79,-64,55,-11,-70,78,-23,51,-25, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035405156668275595, 0.0044271806254982948, 0.0058214603923261166, 0.0046953391283750534, 0.0055424491874873638, 0.0049798223190009594, 0.0036455870140343904, 0.0035312105901539326, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 1156, 9737, -531, -1270, 2284, -806, 1246, 2883, -4188, 312, -5796, -191, 1153, -495, -2907, 3179, 6063, 3517, -1076, -3735, -6530, -650, 17213, -5736, -4683, -768, 4462, -5239, 531, -1282, -8424, 8585, 6185, 134, 3659, -383, -20, -616, 9075, 3987, 5618, -2375, 3923, 5139, -324, 8678, -1405, -2240, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00036811150494031608, 0.00016266661987174302, 0.00062849419191479683, 0.00025337754050269723, 0.00022813957184553146, 0.00042263313662260771, 0.00025195637135766447, 0.00029873577295802534, 0.00011919728422071785, 0.00034376428811810911, 0.00022123035159893334, 0.0019709011539816856, 0.00045060674892738461, 0.001024661585688591, 0.00043263338739052415, 0.0007521812804043293, 0.00019244698341935873, 6.3806459365878254e-05, 0.0003115234721917659, 0.00035520564415492117, 0.00025654819910414517, 0.00027289311401546001, 8.4474515460897237e-05, 0.00043600786011666059, 0.00019014079589396715, 0.00038854777812957764, 0.00049863645108416677, 0.00024426166783086956, 0.00022411931422539055, 0.00048308135592378676, 0.00013698384282179177, 0.00011822956003015861, 0.00012536691792774945, 0.00023350540141109377, 0.00014770709094591439, 0.00042211724212393165, 0.0028142607770860195, 0.00041692669037729502, 0.00015325771528296173, 0.0001922069932334125, 0.00019138032803311944, 0.00016497638716828078, 0.00031840152223594487, 0.00019370144582353532, 0.00047664818703196943, 8.3364408055786043e-05, 6.0349397244863212e-05, 0.00017631975060794502, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-39,10,10,-23,-93,-31,56,-41,-11,-4,9,41,-12,-4,4,89,13,30,2,6,-15,-65,25,15,-20,-7,-30,-76,76,-8,-127,51,-9,-58,-45,-11,-24,7,-28,-22,45,3,-3,-10,68,127,-12, -127,-91,-22,127,-73,54,-84,119,27,9,14,-1,46,12,3,-38,-27,57,29,8,11,127,11,127,127,-34,-52,37,72,-122,-3,-74,68,-9,-35,-121,21,10,-53,-59,-127,-6,-100,-127,32,64,64,127, -16,-7,12,12,-34,26,28,39,5,-41,-1,5,-28,-5,-2,9,-51,26,-53,-26,-14,-22,127,28,-29,2,6,-5,24,45,18,17,-6,-20,-33,66,5,1,18,50,22,-30,25,-41,-10,43,-18,-12, 
  /* [0][1][][] */ -19,-22,-27,4,26,-97,127,-94,-16,4,23,42,127,13,7,-33,-28,-30,35,40,69,-59,51,15,-40,127,-76,-26,127,-94,46,-121,-43,4,-80,24,12,-53,-41,-11,115,127,8,-122,-66,-59,-16,96, 85,-127,127,6,127,58,-58,-76,34,127,127,-127,-98,127,127,127,127,127,127,127,127,115,7,3,109,-103,-127,127,39,127,127,6,-127,127,127,127,-127,127,-127,-127,45,44,-127,-32,127,-127,-15,95, 16,32,-39,0,-59,127,-114,84,100,-79,11,69,-41,12,10,-60,26,2,-108,15,15,-104,-39,1,74,-9,-17,106,-83,-27,32,-32,-33,12,88,-28,40,-7,-1,-100,110,-6,34,44,-56,98,125,-75, 
  /* [0][2][][] */ -6,27,6,-26,-7,-60,-10,-9,0,-3,-3,11,-19,-12,1,-2,-49,18,14,-44,-1,-26,94,-7,-88,5,48,-31,7,7,-4,35,-19,-11,-67,36,6,-10,21,25,-29,-7,8,14,-21,20,-14,18, 31,-11,-36,-30,21,35,112,-127,127,-38,-8,13,-77,-21,-19,-65,-12,110,17,22,5,23,-21,-28,-64,62,89,-6,-112,20,-38,-4,-33,-1,-34,8,60,-15,2,98,-111,-4,-11,65,29,62,9,-119, -12,29,4,-15,-23,9,-8,-70,-26,-26,-13,12,21,-11,-11,15,53,36,-16,-22,-12,-20,-47,-10,24,-19,34,-18,-26,13,-13,19,20,-21,-27,-48,-3,7,32,6,-6,-23,10,14,-19,14,85,-44, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0156447384506464, 0.0069133313372731209, 0.026711003854870796, 0.010768545791506767, 0.0096959313377737999, 0.017961908131837845, 0.010708145797252655, 0.012696269899606705, 0.0050658844411373138, 0.014609982259571552, 0.0094022899866104126, 0.083763301372528076, 0.019150786101818085, 0.043548114597797394, 0.018386919051408768, 0.031967703253030777, 0.008178996853530407, 0.0027117745485156775, 0.01323974784463644, 0.015096239745616913, 0.010903297923505306, 0.011597957462072372, 0.0035901668015867472, 0.018530333414673805, 0.0080809835344552994, 0.01651328057050705, 0.021192049607634544, 0.010381121188402176, 0.0095250708982348442, 0.020530957728624344, 0.0058218133635818958, 0.0050247563049197197, 0.0053280936554074287, 0.009923979640007019, 0.0062775509431958199, 0.017939982935786247, 0.11960608512163162, 0.017719384282827377, 0.006513452623039484, 0.0081687970086932182, 0.0081336637958884239, 0.0070114964619278908, 0.01353206392377615, 0.0082323113456368446, 0.020257547497749329, 0.0035429871641099453, 0.0025648493319749832, 0.0074935890734195709, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2736, 4404, 11109, 1489, 2582, -1162, 4419, 11037, 3327, -908, 3931, -2469, 13584, -1855, 1793, 19662, -351, 1949, 53, 2769, 2867, 3843, 445, 20750, 5201, 3445, 17476, 1364, 5590, 5342, 649, 946, 961, 1977, -406, 195, -2844, -696, 2846, 2101, 4305, 1897, 4044, 3957, 4970, 3463, 1600, 4997, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022607592109125108, 0.00018482211453374475, 8.4771585534326732e-05, 0.00017607188783586025, 0.00019427658116910607, 0.00030645937658846378, 0.00017333199502900243, 8.5176281572785228e-05, 0.00016453051648568362, 0.00025829285732470453, 0.00021203275537118316, 0.0002101342543028295, 7.0339257945306599e-05, 0.00023982736456673592, 0.00026003178209066391, 5.5561031331308186e-05, 0.00034583581145852804, 0.00022421653557103127, 0.00033697087201289833, 0.00023003420210443437, 0.00024048074556048959, 0.00019961468933615834, 0.00044113944750279188, 5.0723112508421764e-05, 0.0001554646878503263, 0.00016711834177840501, 6.0834918258478865e-05, 0.00028963160002604127, 0.0001416071318089962, 0.00014314084546640515, 0.00046825924073345959, 0.00043634948087856174, 0.00021735914924647659, 0.00021043371816631407, 0.00030037524993531406, 0.00033695340971462429, 0.00020684335322584957, 0.00030058663105592132, 0.00021946188644506037, 0.0002710343396756798, 0.00018163459026254714, 0.00025755638489499688, 0.00020424192189238966, 0.00020099601533729583, 0.0001485273678554222, 0.00020444541587494314, 0.00041641067946329713, 0.00015910033835098147, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 80,127,-101,-101,10,94,19,69, 
  /* [1][0][][] */ 57,-70,47,-127,-61,67,-86,-40, 
  /* [2][0][][] */ -29,127,111,54,109,-4,45,13, 
  /* [3][0][][] */ 114,36,-99,60,-6,-98,-127,-43, 
  /* [4][0][][] */ -61,47,23,-82,-41,121,127,59, 
  /* [5][0][][] */ 25,84,-127,-79,54,101,32,-20, 
  /* [6][0][][] */ -7,127,59,53,78,3,10,-79, 
  /* [7][0][][] */ 127,-30,-36,26,16,-4,97,10, 
  /* [8][0][][] */ 63,127,76,93,119,85,115,-102, 
  /* [9][0][][] */ 59,114,-127,-94,12,113,13,81, 
  /* [10][0][][] */ -68,-40,33,-51,-9,-26,-53,127, 
  /* [11][0][][] */ 10,-123,-127,-23,30,-15,48,-1, 
  /* [12][0][][] */ -25,-85,-110,-23,-127,15,-57,40, 
  /* [13][0][][] */ -9,10,-104,107,-127,-26,0,-17, 
  /* [14][0][][] */ -58,-49,-127,-8,28,3,-13,-67, 
  /* [15][0][][] */ 19,-99,-127,7,-91,-37,-30,-4, 
  /* [16][0][][] */ 127,-68,-15,70,-88,22,29,103, 
  /* [17][0][][] */ -29,105,127,-21,-47,-1,-18,-24, 
  /* [18][0][][] */ 3,-127,48,63,-4,-51,55,-81, 
  /* [19][0][][] */ 127,-39,-61,31,-104,15,37,95, 
  /* [20][0][][] */ -31,-127,80,76,-14,-84,2,-76, 
  /* [21][0][][] */ -11,-51,-17,-36,127,-2,58,25, 
  /* [22][0][][] */ -127,32,-73,51,42,47,-89,-95, 
  /* [23][0][][] */ -105,-50,52,0,-122,114,127,-56, 
  /* [24][0][][] */ -40,66,-6,-42,-63,127,123,4, 
  /* [25][0][][] */ -68,-121,-127,-58,-53,-17,-28,-56, 
  /* [26][0][][] */ -12,69,-6,127,-91,24,-63,2, 
  /* [27][0][][] */ 13,-117,37,82,16,-44,7,-127, 
  /* [28][0][][] */ 17,127,69,47,113,-14,34,-78, 
  /* [29][0][][] */ 106,19,-43,-9,75,-127,-123,42, 
  /* [30][0][][] */ 17,-13,25,-127,14,-17,25,-25, 
  /* [31][0][][] */ 40,-32,10,68,-11,33,8,127, 
  /* [32][0][][] */ -75,-73,8,-62,-46,127,53,81, 
  /* [33][0][][] */ -34,45,51,-43,40,127,-101,71, 
  /* [34][0][][] */ 26,127,-61,-48,17,46,-66,70, 
  /* [35][0][][] */ 9,-127,30,53,-20,-54,36,-71, 
  /* [36][0][][] */ -14,-31,-90,-7,-127,-58,-19,15, 
  /* [37][0][][] */ -45,-127,73,88,-41,-93,-20,-52, 
  /* [38][0][][] */ -78,29,69,-74,-127,-99,-65,97, 
  /* [39][0][][] */ 61,-127,72,37,-5,-63,-18,-72, 
  /* [40][0][][] */ -4,59,24,44,-127,-13,-63,23, 
  /* [41][0][][] */ 110,127,-71,-99,59,29,1,15, 
  /* [42][0][][] */ -7,-43,-23,11,127,11,52,14, 
  /* [43][0][][] */ 127,30,89,28,-63,-28,61,117, 
  /* [44][0][][] */ 80,42,-34,20,82,-123,-127,13, 
  /* [45][0][][] */ 62,15,17,23,86,-127,-8,-63, 
  /* [46][0][][] */ 50,-37,-4,127,34,57,20,73, 
  /* [47][0][][] */ -83,-72,57,76,-62,14,127,-89, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030185696668922901, 0.0024677482433617115, 0.0011318717151880264, 0.002350914990529418, 0.0025939843617379665, 0.0040918509475886822, 0.002314331941306591, 0.0011372752487659454, 0.0021968143992125988, 0.0034487308003008366, 0.0028310650959610939, 0.0028057163581252098, 0.00093917100457474589, 0.0032021792139858007, 0.0034719491377472878, 0.0007418518653139472, 0.0046176058240234852, 0.0029937431681901217, 0.0044992412440478802, 0.0030714208260178566, 0.0032109031453728676, 0.0026652589440345764, 0.0058901016600430012, 0.00067725591361522675, 0.0020757673773914576, 0.002231367165222764, 0.00081226893234997988, 0.0038671663496643305, 0.0018907409394159913, 0.0019112190930172801, 0.0062522059306502342, 0.005826145876199007, 0.0029021832160651684, 0.0028097147587686777, 0.0040106158703565598, 0.004499007947742939, 0.0027617760933935642, 0.004013438243418932, 0.0029302590992301702, 0.0036188552621752024, 0.0024251881986856461, 0.003438897430896759, 0.002727041719481349, 0.002683702390640974, 0.0019831401295959949, 0.0027297588530927896, 0.0055599226616322994, 0.0021243104711174965, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7591, 17536, -4527, 8374, -1241, 2953, -11198, -17410, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022842928592581302, 0.0001132984398282133, 0.00014170668146107346, 0.00015090839588083327, 0.00021025710157118738, 0.00015906915359664708, 0.00023530588077846915, 0.00014607788762077689, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -40,-5,34,11,-33,-10,11,7,-41,-7,-60,-56,-27,-60,-10,-33,45,-37,40,37,-18,32,-40,12,4,-37,51,-15,-5,-17,16,8,79,36,36,-127,17,-2,-18,-32,3,-16,41,45,33,7,25,2, 
  /* [1][0][][] */ -2,39,63,-25,-16,47,-56,-31,6,27,-16,-100,12,93,-15,64,-22,17,-23,-61,13,-89,-30,24,-80,-16,0,-127,-24,-15,36,-52,47,79,-40,0,127,-28,2,45,-40,46,-82,-32,121,-17,-37,-27, 
  /* [2][0][][] */ -8,-19,-59,12,-4,45,22,5,-7,41,2,22,64,-88,16,-55,36,-91,24,28,-19,48,-3,27,-17,55,-18,-71,16,4,19,-68,-41,-84,36,-31,105,24,-12,-61,-3,33,80,26,127,13,22,22, 
  /* [3][0][][] */ -4,23,-72,44,15,-37,-74,-109,13,-23,-38,-2,2,27,35,79,-10,12,-39,26,2,-102,27,-63,-79,-15,127,-18,-40,3,-65,17,-3,-83,11,-10,-23,-41,-19,104,-50,-36,-2,21,38,5,-43,46, 
  /* [4][0][][] */ -26,-46,-8,9,29,-30,-14,-10,29,-31,57,-77,4,29,7,11,-18,-20,12,-12,-6,-51,5,-18,18,-12,41,50,35,19,-18,30,-13,-2,1,-2,-70,86,35,-26,29,-21,-20,-22,-78,12,127,12, 
  /* [5][0][][] */ 45,-22,0,16,26,-38,37,-127,28,-26,-11,120,-77,69,23,-64,-1,-91,13,5,-36,62,-37,-43,-62,75,-26,-1,-24,52,-38,-39,24,50,35,-2,-39,-8,-44,-42,13,-35,-45,-5,-31,58,87,22, 
  /* [6][0][][] */ 57,-22,24,-13,-37,-19,-37,16,-40,8,-43,127,-46,-37,-8,57,11,47,15,35,36,-82,-23,20,21,39,-66,5,6,-42,11,37,7,16,-15,-3,14,0,-6,-3,-7,-16,38,58,-3,-35,73,-14, 
  /* [7][0][][] */ -32,10,-3,66,34,31,8,32,19,2,70,-7,118,109,57,52,41,45,-15,0,24,-19,-82,-30,19,-6,-31,60,34,-27,-35,-17,39,4,38,-93,-71,40,42,56,-33,35,80,127,-61,-29,-105,55, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0097082443535327911, 0.0048151835799217224, 0.006022533867508173, 0.0064136069267988205, 0.0089359264820814133, 0.0067604389041662216, 0.010000499896705151, 0.0062083099037408829, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13428, 4174, 3670, -1553, 1399, -1399, 585, 32470, -1154, 2622, 6712, 60761, 3096, 7662, 308, 11265, -2253, 13827, 927, 6488, 12368, 684, 2163, -9822, 8535, 2130, 2090, 12726, -1837, -3243, -10184, 10752, 2751, 558, 788, 7421, -9246, 9507, -1900, 16992, -2340, -989, 8514, 3766, 2076, -616, 2823, -678, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.0737536589149386e-05, 7.9912882938515395e-05, 0.00015317815996240824, 0.00018337808432988822, 0.00075446971459314227, 0.00016010746185202152, 0.00013537766062654555, 0.00010064354864880443, 0.00013364576443564147, 9.3213864602148533e-05, 6.5914755396079272e-05, 5.3543939429800957e-05, 7.3393479397054762e-05, 5.3796684369444847e-05, 0.00028473907150328159, 0.00019929547852370888, 0.00011732226994354278, 0.0003320320975035429, 0.00013475694868247956, 0.00014282236224971712, 7.2562688728794456e-05, 0.00044214370427653193, 0.00010406268120277673, 0.00026407913537696004, 0.00016360262816306204, 6.3307837990578264e-05, 5.3404568461701274e-05, 9.1446272563189268e-05, 0.00020785932429134846, 0.00072434544563293457, 0.00027071702061221004, 6.8620305682998151e-05, 8.4922736277803779e-05, 0.0001284144091187045, 0.00015883133164606988, 5.2291692554717883e-05, 8.6583218944724649e-05, 4.9599068006500602e-05, 0.00013345706975087523, 6.8955538154114038e-05, 0.00013075150491204113, 0.00015515748236794025, 5.9538593632169068e-05, 7.0129033701959997e-05, 7.9560530139133334e-05, 0.00040451745735481381, 6.750531611032784e-05, 0.0002337307232664898, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -60,-100,-17,-11,127,-58,75,-67,-81,-82,-17,-46,116,40,57,-127,59,-29,2,-30,-85,122,5,23,-21,90,67,-34,87,-62,16,-42,-99,-85,40,69,26,76,115,-66,-123,-20,37,75,52,-127,80,88, -75,-127,-88,55,-94,103,65,-76,-63,41,82,-114,127,95,95,-84,-70,-89,31,-50,-93,127,-69,113,-92,111,93,-121,101,-37,15,-126,-46,-82,69,127,123,118,127,-68,-127,-65,59,95,86,110,87,78, -4,-52,-73,97,-44,-25,28,-13,96,16,61,-88,21,61,-43,-18,-75,-23,29,-33,-48,39,-73,-8,-87,57,29,-93,34,61,109,-83,26,5,-17,52,85,69,55,-2,-17,94,59,38,44,31,20,-114, 
  /* [0][1][][] */ -113,-85,-14,-63,-92,-75,98,-119,-127,-127,90,-72,100,50,-125,-78,127,-127,-61,-76,-93,100,-49,18,-16,104,115,-48,-103,-70,5,-52,-102,-127,-127,66,40,87,10,-82,67,-18,80,117,80,106,118,-127, -127,-124,-127,-90,-37,127,127,-127,97,63,127,-127,108,127,58,-126,54,-95,-127,-127,-127,117,-127,127,-127,127,127,-127,-127,127,-10,-127,-127,-105,43,121,127,127,-6,-127,111,-99,127,127,127,0,127,120, -59,-65,-116,127,77,-42,38,-29,72,21,19,-66,13,69,65,-58,-16,-1,-17,-71,-68,10,-79,-25,-124,45,33,-92,-50,41,127,-97,-49,9,57,75,88,76,-18,-30,56,127,74,22,53,-49,25,31, 
  /* [0][2][][] */ -110,-34,35,27,-46,-27,24,-42,24,-47,23,-51,9,18,-48,-13,-66,-24,94,-32,-38,30,-65,-5,4,54,72,-13,44,61,-4,-9,8,-85,-42,28,10,15,-54,-50,23,-1,37,40,23,52,18,-68, -104,-37,-25,-59,92,43,56,-59,96,22,-35,-70,-2,35,-127,-81,40,10,50,-64,-65,26,-55,70,-58,58,68,-38,47,11,-26,-38,-68,-20,-68,47,25,25,-97,-78,33,-42,76,62,38,-108,29,3, -46,-34,-45,-15,-18,-10,14,-29,-71,8,-10,-26,-8,16,30,-26,33,39,-3,-45,-45,-8,-18,-39,-60,1,28,-22,19,-55,59,-22,-82,21,17,41,24,21,-47,-28,13,49,23,12,14,-5,9,40, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0030063451267778873, 0.0033962973393499851, 0.0065100719220936298, 0.0077935685403645039, 0.032064963132143021, 0.0068045668303966522, 0.0057535502128303051, 0.0042773508466780186, 0.00567994499579072, 0.0039615891873836517, 0.0028013770934194326, 0.0022756173275411129, 0.0031192228198051453, 0.0022863589692860842, 0.012101409956812859, 0.0084700575098395348, 0.0049861962907016277, 0.01411136332899332, 0.0057271700352430344, 0.0060699502937495708, 0.0030839142855256796, 0.018791107460856438, 0.0044226637110114098, 0.011223362758755684, 0.0069531118497252464, 0.0026905830018222332, 0.0022696941159665585, 0.0038864666130393744, 0.0088340211659669876, 0.030784681439399719, 0.011505473405122757, 0.0029163630679249763, 0.0036092163063585758, 0.005457612220197916, 0.0067503312602639198, 0.0022223968990147114, 0.0036797868087887764, 0.0021079604048281908, 0.0056719253771007061, 0.0029306102078408003, 0.0055569387041032314, 0.0065941927023231983, 0.0025303901638835669, 0.0029804839286953211, 0.0033813223708420992, 0.017191991209983826, 0.0028689759783446789, 0.0099335554987192154, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 819, -330, -461, 853, 11247, 1637, -438, 3037, 1064, 910, 220, 3001, 882, 376, -920, 386, 2569, 8648, 2521, -555, 816, -1123, -72, 1438, -129, -563, 1396, -6, 2760, 11473, 1502, -35, 351, -147, 2403, 25, 332, -131, 888, 1055, 1526, 1814, 159, -229, 446, 1922, 1097, -164, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00062631722539663315, 0.00055170664563775063, 0.00032323951018042862, 0.00041857652831822634, 8.9160101197194308e-05, 0.0003774672222789377, 0.0005753476289100945, 0.00028244717395864427, 0.00038372064591385424, 0.00074542535003274679, 0.00039926459430716932, 0.00031398810097016394, 0.00028739645495079458, 0.00045573624083772302, 0.0003292931942269206, 0.00037276829243637621, 0.00028402125462889671, 0.00010701380961108953, 0.00028928779647685587, 0.00047593878116458654, 0.00052252755267545581, 0.00021959390142001212, 0.00055031984811648726, 0.00051980087300762534, 0.00074837211286649108, 0.00090730556985363364, 0.00038116818177513778, 0.0014690789394080639, 0.00030019914265722036, 8.4772895206697285e-05, 0.00050279515562579036, 0.0010108846472576261, 0.00049829244380816817, 0.00049378053518012166, 0.00031175636104308069, 0.00042531601502560079, 0.0006535298889502883, 0.00086585868848487735, 0.00049325241707265377, 0.00055715383496135473, 0.00036372418981045485, 0.0003633628657553345, 0.00039481176645494998, 0.00059216970112174749, 0.00054986355826258659, 0.00026851726579479873, 0.00031200467492453754, 0.00041471797158010304, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -29,24,4,-15,-75,-34,-127,29, 
  /* [1][0][][] */ 85,-73,-53,-51,127,-81,91,23, 
  /* [2][0][][] */ -102,121,-55,-127,50,-19,-31,47, 
  /* [3][0][][] */ 59,16,103,17,89,123,127,-12, 
  /* [4][0][][] */ -70,-127,62,6,-60,-107,5,-31, 
  /* [5][0][][] */ 127,-26,67,67,-77,-14,3,-28, 
  /* [6][0][][] */ 28,35,127,-27,43,-40,-47,28, 
  /* [7][0][][] */ 27,12,-127,-35,-37,102,99,-74, 
  /* [8][0][][] */ -4,127,-33,14,59,105,37,62, 
  /* [9][0][][] */ -6,126,-63,83,11,-127,47,107, 
  /* [10][0][][] */ -1,-127,-8,-30,-80,-127,-60,-77, 
  /* [11][0][][] */ -127,-82,108,45,-7,-69,96,60, 
  /* [12][0][][] */ -34,42,-127,80,35,-55,-80,108, 
  /* [13][0][][] */ 96,-127,95,88,12,38,39,-58, 
  /* [14][0][][] */ -35,95,-40,-127,-29,-106,-31,-61, 
  /* [15][0][][] */ 39,108,27,-16,31,-69,89,-127, 
  /* [16][0][][] */ -113,-127,-57,89,-56,15,-19,76, 
  /* [17][0][][] */ -23,-105,-127,76,-59,71,-54,72, 
  /* [18][0][][] */ -94,-64,-54,86,1,75,4,127, 
  /* [19][0][][] */ 52,-124,89,-127,11,-70,26,-25, 
  /* [20][0][][] */ 3,71,29,16,45,127,68,-8, 
  /* [21][0][][] */ 30,113,46,-33,39,-70,91,-127, 
  /* [22][0][][] */ 27,11,113,24,-13,127,30,-40, 
  /* [23][0][][] */ -97,-76,34,-74,80,95,-61,-127, 
  /* [24][0][][] */ -96,-90,40,-85,108,111,-43,-127, 
  /* [25][0][][] */ 127,7,-62,-12,13,33,-63,-7, 
  /* [26][0][][] */ -124,-34,-127,-27,-48,-30,19,-1, 
  /* [27][0][][] */ 73,32,-5,-65,-127,-24,83,91, 
  /* [28][0][][] */ -127,-86,11,45,-70,-107,6,-1, 
  /* [29][0][][] */ 114,82,42,-127,14,10,-57,-97, 
  /* [30][0][][] */ -88,-65,38,-73,74,79,-51,-127, 
  /* [31][0][][] */ 47,41,-6,127,1,-73,4,11, 
  /* [32][0][][] */ -34,127,-10,32,22,61,-17,48, 
  /* [33][0][][] */ -38,127,-80,30,20,-33,-27,2, 
  /* [34][0][][] */ -127,-121,-47,116,-22,15,18,100, 
  /* [35][0][][] */ -56,127,-34,-7,68,108,55,70, 
  /* [36][0][][] */ 71,29,-3,-48,-127,-37,109,104, 
  /* [37][0][][] */ -63,108,29,20,-127,102,-23,-102, 
  /* [38][0][][] */ 35,32,38,18,127,78,101,54, 
  /* [39][0][][] */ -22,-73,38,-21,12,38,-103,127, 
  /* [40][0][][] */ -72,-59,-87,127,-28,3,18,76, 
  /* [41][0][][] */ 127,12,56,109,-53,-9,-3,-20, 
  /* [42][0][][] */ -44,8,-78,-127,57,-113,6,88, 
  /* [43][0][][] */ 22,-3,88,-5,35,127,91,9, 
  /* [44][0][][] */ -30,-29,-67,127,45,7,-40,-41, 
  /* [45][0][][] */ 55,127,101,-122,46,-48,22,-109, 
  /* [46][0][][] */ -33,-127,-45,32,-6,42,-63,120, 
  /* [47][0][][] */ 34,47,121,4,94,127,123,-22, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0052394629456102848, 0.0046153073199093342, 0.0027040631975978613, 0.0035016059409826994, 0.0007458697073161602, 0.0031577057670801878, 0.0048130759969353676, 0.00236281449906528, 0.0032100188545882702, 0.0062358630821108818, 0.0033400519751012325, 0.0026266705244779587, 0.002404217841103673, 0.003812466049566865, 0.0027547054924070835, 0.0031183967366814613, 0.0023759824689477682, 0.0008952250936999917, 0.0024200398474931717, 0.0039814705960452557, 0.0043712095357477665, 0.0018370149191468954, 0.0046037058345973492, 0.0043483991175889969, 0.0062605142593383789, 0.0075900736264884472, 0.0031886661890894175, 0.012289593927562237, 0.0025113187730312347, 0.00070916849654167891, 0.0042061377316713333, 0.0084565654397010803, 0.0041684703901410103, 0.0041307257488369942, 0.0026080009993165731, 0.003557985182851553, 0.0054671107791364193, 0.0072433492168784142, 0.0041263080202043056, 0.0046608760021626949, 0.0030427381861954927, 0.0030397155787795782, 0.0033028016332536936, 0.0049538016319274902, 0.0045998888090252876, 0.0022462836932390928, 0.0026100780814886093, 0.0034693272318691015, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7769, -3310, 11729, -9807, 23977, 7710, -8715, 11834, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018714748148340732, 0.00023306945513468236, 0.00019433704437687993, 0.00025275486405007541, 0.00021385213767644018, 0.0001752830867189914, 0.0001816439616959542, 0.00025968666886910796, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-10,-19,-60,-22,-32,17,-21,40,11,-29,-3,109,127,-19,-102, 
  /* [1][0][][] */ 127,-59,-43,20,-43,74,-68,-42,-39,87,-34,-54,-9,6,-66,-16, 
  /* [2][0][][] */ -40,-99,41,46,48,-58,-75,-19,31,-88,25,-127,46,-18,-75,25, 
  /* [3][0][][] */ 36,9,15,19,-11,69,-51,-20,127,42,7,20,4,-16,9,23, 
  /* [4][0][][] */ -101,-39,-23,-127,-10,37,53,-124,36,-20,-47,-41,-122,38,-41,-22, 
  /* [5][0][][] */ 87,45,62,-27,41,-47,-127,-120,-17,-77,63,46,-54,43,58,-44, 
  /* [6][0][][] */ 105,37,-127,-74,25,-69,4,-86,-42,22,-120,89,87,-91,2,68, 
  /* [7][0][][] */ -127,-1,101,-31,-65,5,-1,-64,-54,62,87,-31,61,-26,32,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0079537676647305489, 0.0099054519087076187, 0.0082593243569135666, 0.010742081329226494, 0.0090887155383825302, 0.0074495309963822365, 0.007719868328422308, 0.011036683805286884, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 17861, -543, -2, 2932, -439, 277, 8982, 1192, -1135, 152, -2207, 2635, 1384, -880, -374, -815, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0001295940310228616, 0.00026422090013511479, 0.00017684019985608757, 0.00017033060430549085, 0.0014235477428883314, 0.0011209211079403758, 0.00017657216812949628, 0.0012720325030386448, 0.00040477930451743305, 0.0013168604345992208, 0.00024137280706781894, 0.00023070484166964889, 0.00010370971722295508, 0.00032931749592535198, 0.00027050534845329821, 0.00086584477685391903, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 4,-2,1,2,-21,11,8,16,-5,-11,0,-7,-6,-7,-1,-2, 8,-2,-1,3,12,-2,11,-27,-9,9,-5,90,-7,22,6,-1, 5,-6,-4,4,1,-14,-3,9,1,2,-2,-6,2,-4,-2,-2, 
  /* [0][1][][] */ 14,-9,0,2,127,-24,-127,-21,127,127,-4,-3,105,-26,-4,-20, -127,127,127,0,-90,-91,-14,-103,15,-105,127,127,127,127,127,127, 23,-6,-4,1,-11,127,3,-11,-2,-12,-4,-5,7,-5,-13,-9, 
  /* [0][2][][] */ 2,-4,1,-15,-19,15,59,7,-8,-8,0,-3,-7,0,-5,-13, 25,-17,-5,-127,6,-16,-6,127,-6,1,3,-16,-7,-58,-9,-38, 4,-5,-3,-2,1,-5,2,-3,1,2,-1,-2,-1,-6,-9,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0055077462457120419, 0.011229387484490871, 0.0075157084502279758, 0.0072390506975352764, 0.060500778257846832, 0.047639146447181702, 0.0075043169781565666, 0.054061379283666611, 0.017203120514750481, 0.055966567248106003, 0.010258344002068043, 0.0098049556836485863, 0.0044076628983020782, 0.013995992951095104, 0.011496476829051971, 0.036798402667045593, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1534, 258, -205, 93, 63656, 47590, 2615, 14864, 4965, 10036, 558, 107, 3724, 12344, 272, 29805, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00034363134182058275, 0.0016660213004797697, 0.00052941683679819107, 0.00027321383822709322, 2.1584273781627417e-05, 3.0604933272115886e-05, 0.00022602686658501625, 2.362805389566347e-05, 0.00017021415987983346, 3.3958622225327417e-05, 0.00090239109704270959, 0.0014611737569794059, 0.00046404130989685655, 1.4538925825036131e-05, 0.0013816984137520194, 3.4203803807031363e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 67, -37, 16, 
  /* [0][2][][] */ 32, 127, 18, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -93, -79, 
  /* [3][0][][] */ 120, 125, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 23, -58, 3, 
  /* [4][1][][] */ 22, -127, 5, 
  /* [4][2][][] */ 13, -81, -10, 
  /* [5][0][][] */ -63, 28, 2, 
  /* [5][1][][] */ -127, 33, 6, 
  /* [5][2][][] */ -86, 26, 3, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -36, -52, -89, 
  /* [7][0][][] */ 47, 37, -10, 
  /* [7][1][][] */ 127, 72, -6, 
  /* [7][2][][] */ 29, 1, -26, 
  /* [8][0][][] */ -21, -30, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -21, 53, -10, 
  /* [9][1][][] */ -15, 127, -12, 
  /* [9][2][][] */ -6, 88, -7, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 64, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 87, 26, -8, 
  /* [13][1][][] */ 127, 108, -8, 
  /* [13][2][][] */ 74, 107, 34, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -84, -22, 27, 
  /* [15][1][][] */ -127, -126, 24, 
  /* [15][2][][] */ -28, -83, -8, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.087625987827777863, 0.42483541369438171, 0.1350012868642807, 0.069669522345066071, 0.005503989290446043, 0.0078042573295533657, 0.057636845856904984, 0.006025153212249279, 0.043404608964920044, 0.0086594484746456146, 0.23010972142219543, 0.3725992739200592, 0.11833052337169647, 0.0037074259016662836, 0.35233306884765625, 0.0087219690904021263, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11953844130039215, } };
const TfArray<1, int> quant46_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.074895046651363373, } };
const TfArray<1, int> quant50_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.067973040044307709, } };
const TfArray<1, int> quant53_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091986864805221558, } };
const TfArray<1, int> quant54_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.054964244365692139, } };
const TfArray<1, int> quant58_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.02310636080801487, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.064990967512130737, } };
const TfArray<1, int> quant61_zero = { 1, { -41 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.077484071254730225, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040259052067995071, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.08809768408536911, } };
const TfArray<1, int> quant66_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.047964561730623245, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.087995320558547974, } };
const TfArray<1, int> quant69_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
