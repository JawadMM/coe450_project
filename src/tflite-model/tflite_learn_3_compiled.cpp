/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.12.2024 15:22:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 18698, -25710, -27670, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00026850122958421707, 0.00021187720994930714, 0.00021346785069908947, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 69,54,108,-57,-56,-2,-10,15,-21,65,14,6,-29,-76,73,5,-63,47,127,95,-54,-35,44,-60,-89,118,-67,3,103,27,-18,22, 
  /* [1][0][][] */ 62,-44,-69,13,-14,127,-15,-9,121,-70,-2,-107,-63,108,31,-53,91,-45,-43,-94,-111,22,105,60,18,-13,4,-11,-99,-58,-1,-59, 
  /* [2][0][][] */ -30,72,-79,73,83,-41,-31,111,93,14,127,-52,-95,-82,79,117,-81,-50,-22,-110,73,117,-58,-101,84,-78,-17,-116,-9,-85,86,-60, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0041854730807244778, 0.0033028016332536936, 0.0033275971654802561, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 255, 106, 75, -241, -28, 0, -114, 24, 1, 829, -5, 1180, -306, -90, -542, -13, -114, -386, 1598, -274, -223, 3, -525, 79, -333, 1217, -396, -262, 1732, 134, -144, 1388, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4243141019251198e-05, 4.2663181375246495e-05, 4.1039300413103774e-05, 4.3672644096659496e-05, 4.3072803237009794e-05, 6.2338353018276393e-05, 4.0990580600919202e-05, 4.2249441321473569e-05, 5.1923827413702384e-05, 5.4578824347117916e-05, 4.4225645979167894e-05, 6.6616696130950004e-05, 4.5674223656533286e-05, 4.5056254748487845e-05, 4.3573294533416629e-05, 4.4183092541061342e-05, 4.1699084249557927e-05, 4.2641713662305847e-05, 7.1632697654422373e-05, 4.3212101445533335e-05, 4.3155960156582296e-05, 4.5284348743734881e-05, 4.3878480937564746e-05, 4.7366836952278391e-05, 4.2077106627402827e-05, 5.8553414419293404e-05, 4.4013126171194017e-05, 4.0468941733706743e-05, 5.2407965995371342e-05, 4.699311830336228e-05, 4.038068072986789e-05, 5.8041496231453493e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -30,-53,108,8,75,-6,-80,-99,54,-106,-99,-1,77,13,-34,44,-50,-27,-78,-42,-60,-96,10,111,-110,16,83,-43,111,5,-19,-92,90,-61,-84,60,-110,-74,-106,37,77,-74,-101,101,39,-105,109,-15,25,-47,-26,100,-81,-54,-84,110,29,69,127,-108,-69,68,-36,49,-21,15,73,102,38,79,94,-102,107,-108,39,88,-96,18,-52,31,55,23,97,-2,-57,-32,-83,101,34,116,-5,-120,15,51,29,7, 
  /* [1][0][][] */ -61,23,-70,4,-24,81,41,-1,91,-109,-104,105,23,-18,25,70,103,-35,42,127,-50,-4,37,28,20,22,-36,108,1,13,107,-64,59,111,-8,15,43,65,-10,-63,-61,10,-21,-101,-35,41,-30,-59,-25,-95,111,66,13,93,-78,-51,27,90,53,84,-49,100,-80,-63,-54,38,79,35,104,31,-6,5,-110,100,-54,47,89,-48,-40,70,-77,89,-61,-112,33,118,-68,-64,78,85,85,27,88,87,33,-2, 
  /* [2][0][][] */ 39,48,-51,96,19,-65,91,100,-106,113,-40,124,78,-21,89,-108,-54,-31,57,49,-111,-15,120,21,22,78,108,20,-70,76,81,96,-76,-27,-101,-106,-59,94,117,-33,-127,-84,12,-4,-84,116,-33,-81,104,38,82,-101,-28,55,21,11,-77,89,-41,9,-30,120,-46,68,85,46,53,86,-85,72,8,-86,28,-78,51,39,-64,-20,4,17,37,-109,-21,-51,2,-105,-22,-39,86,115,-15,4,-57,-86,-57,-69, 
  /* [3][0][][] */ 72,-16,34,-21,-77,35,-111,29,49,3,64,1,103,98,67,1,98,97,-63,21,119,-88,-69,-115,-39,-103,-79,103,44,-91,84,4,-57,-38,-10,-32,-99,-27,31,51,-26,-89,-100,-8,65,28,-50,-87,65,-75,50,2,89,23,85,-92,-121,-117,-127,-63,-85,19,-32,75,39,-35,-62,-26,-45,-76,3,107,23,-117,37,-53,39,91,95,-74,-89,-113,45,95,26,43,-44,-116,-77,41,-7,-121,100,-98,-88,31, 
  /* [4][0][][] */ 58,89,-11,58,-23,-34,36,-5,68,78,-5,40,7,-26,-17,-64,-31,7,-75,28,117,-88,88,26,-51,10,70,-61,-54,59,-57,-52,84,127,35,-114,-71,2,-127,56,-43,-54,-70,-103,30,111,41,56,29,-41,-6,-61,-102,66,-89,26,45,-86,-18,19,26,-114,-32,-33,-23,56,3,-31,17,-100,-107,-70,-39,31,104,46,77,-23,-3,-64,11,-29,-88,-10,3,73,94,4,-107,-68,19,45,45,80,-87,-16, 
  /* [5][0][][] */ 73,-66,50,58,5,-78,20,40,73,-127,1,-50,34,69,22,17,41,39,-60,62,27,36,11,-17,-97,-39,-12,-63,35,11,10,-83,-27,3,-46,11,-92,-25,22,20,-60,-33,28,65,-30,18,26,-33,-73,79,23,20,19,11,24,-10,76,42,-37,-31,27,-64,32,-71,-31,68,-18,27,41,-6,79,-43,-29,32,-34,-51,10,-36,10,56,74,32,26,78,-58,57,-3,26,52,-69,81,54,-8,13,53,-62, 
  /* [6][0][][] */ 14,-43,126,78,-74,-62,-2,71,-17,-81,5,-92,84,55,121,-121,47,1,22,104,-85,-123,117,61,-27,-86,-10,-52,-26,-122,48,-83,-94,-127,-49,-105,5,39,-108,83,88,57,25,-15,-117,107,-96,-47,-88,21,-33,-72,76,-60,99,-31,5,-11,-57,121,-105,34,66,-72,-54,67,106,-53,87,-3,-111,-9,57,-69,-79,-38,-87,-101,-59,-27,34,-32,41,-31,-75,-93,-42,-102,85,96,110,16,-59,-69,75,-28, 
  /* [7][0][][] */ 122,59,-44,-38,-72,111,-17,-12,126,-12,-97,7,29,-82,44,75,47,23,-17,125,61,37,-5,88,-100,114,46,55,-85,117,-13,37,34,34,80,91,-127,93,-22,-22,100,-73,89,63,49,2,108,-114,58,-57,-108,-62,-38,101,18,36,122,-89,-26,-58,20,-40,81,-94,-62,-55,70,29,-117,20,55,94,97,32,54,56,-57,53,-98,42,96,-27,-14,-68,91,36,-108,97,89,9,64,67,-47,-57,4,-66, 
  /* [8][0][][] */ 17,19,-42,-71,30,23,-59,-20,9,-2,39,73,16,-32,-72,-63,-60,82,-69,20,33,-19,67,92,-127,85,41,62,-56,21,-71,93,85,-21,47,-11,79,6,-29,65,70,89,-89,-103,-13,-19,-16,92,20,-68,-45,3,-65,3,-26,-83,44,98,-90,86,103,9,41,101,-24,-37,-17,90,-78,39,31,7,71,56,-5,15,-32,85,72,58,32,75,-84,-63,21,37,64,-33,38,-29,-75,81,-58,-92,-32,48, 
  /* [9][0][][] */ -2,5,118,58,68,-69,-21,-67,49,52,5,68,-50,-49,-52,-1,32,3,-55,-46,-3,98,-70,-63,120,7,3,46,16,-49,-56,80,37,-3,27,-18,-20,14,9,-24,42,-46,57,-45,77,20,-82,61,41,2,-84,-44,91,-72,-36,89,57,-54,17,12,-78,127,39,-52,-69,22,105,43,-8,100,81,-78,5,74,-52,-52,-69,-74,-17,90,40,13,68,25,-14,-69,43,-5,77,37,2,85,80,33,49,-15, 
  /* [10][0][][] */ -58,68,83,-61,-18,90,107,14,44,6,24,-77,75,87,-38,11,-42,84,-112,-51,-12,29,55,-69,2,62,-110,-112,-55,86,-86,-82,92,106,127,60,-61,10,-46,40,-32,117,-108,-47,-99,-53,-1,-59,1,0,40,17,47,34,-65,-29,-95,-12,0,-44,10,41,109,61,122,-75,-95,-17,10,-24,-102,-58,94,70,-89,100,-7,59,67,16,78,9,59,108,-97,68,101,-24,41,11,-28,-73,-42,-71,-38,-66, 
  /* [11][0][][] */ 72,30,11,80,119,31,54,33,81,127,-29,82,-35,-41,57,-9,1,-48,66,14,16,72,41,-48,-8,-55,4,54,68,-6,30,19,-57,-37,46,46,17,69,11,-32,5,81,-30,47,-1,-23,-38,-40,57,62,67,54,-17,-45,22,16,-25,-34,-10,-22,-66,106,62,8,73,91,-11,20,96,62,-41,-47,35,80,-10,52,-30,55,-14,64,-59,-13,-61,-29,56,-34,26,17,-64,23,34,-30,-56,8,-19,16, 
  /* [12][0][][] */ 5,63,-58,-8,97,0,-41,27,-80,74,-21,12,-47,4,39,-81,-100,-39,-45,-83,17,-18,9,84,-32,-55,85,-101,79,5,-42,105,-90,-75,-53,15,-1,-78,-15,31,101,30,-112,-41,-25,-85,-44,102,-49,-120,-79,91,32,-9,-84,73,-26,-64,57,55,46,127,-12,38,96,24,-51,101,47,89,32,59,70,101,-20,-12,-42,27,-118,-94,-62,89,35,5,-41,23,42,101,-96,-110,81,37,87,-14,18,64, 
  /* [13][0][][] */ 117,-54,90,92,65,113,79,66,65,-127,15,-31,122,68,59,-58,-109,-73,-80,19,76,-24,111,-41,-82,46,2,17,-78,-93,73,28,42,98,-15,40,-97,-28,15,73,-58,78,-50,9,-49,27,2,-22,38,109,-21,-103,-104,26,93,-68,-38,46,-14,-74,-20,92,-57,-9,-55,-63,-87,96,-40,-18,112,10,-81,22,-85,-43,-96,61,82,-57,51,-86,104,22,-84,-93,91,111,0,-52,-69,48,115,-51,65,-11, 
  /* [14][0][][] */ -59,-106,73,55,67,-39,-29,-122,-90,-44,56,70,-29,-90,-103,-96,-64,-71,2,17,-51,20,-14,47,-122,-81,-47,18,-124,-121,-87,28,92,-33,-44,-1,82,106,28,-121,-16,-123,29,76,55,-118,57,-94,102,32,76,45,84,-23,-27,2,-59,3,49,85,-17,-92,-32,63,-98,-25,63,-114,-95,-95,-98,83,-6,71,40,-85,44,-118,41,24,33,-25,-122,-44,-127,-100,-120,95,99,-3,75,-54,80,90,-19,61, 
  /* [15][0][][] */ 17,-37,-31,77,104,-88,64,-110,67,-7,-67,4,62,14,-89,-104,78,20,-88,36,51,20,73,105,56,78,46,88,9,70,74,-94,15,19,-49,-16,-80,116,106,-61,21,116,-44,-33,25,-69,-38,-83,-3,-84,-1,42,-98,-81,-47,-3,69,47,-66,111,-27,-92,-4,127,-20,98,-68,0,-57,9,35,-66,29,-1,60,-109,10,53,106,71,-74,68,-107,-52,-112,-32,-85,40,87,75,-123,-37,65,98,-94,114, 
  /* [16][0][][] */ -59,7,101,-61,17,121,-53,49,45,32,-106,73,27,-52,-57,-73,116,74,62,59,127,84,-41,59,-40,64,-73,67,-95,5,35,8,-106,76,63,69,-49,54,-60,-62,24,-42,75,93,59,105,109,-5,-55,-99,19,108,-50,113,64,59,32,113,72,10,122,95,52,40,48,11,-36,110,39,97,-10,3,35,82,48,89,-10,100,-108,-8,15,-82,76,13,6,107,107,8,92,11,-9,114,78,-30,-86,22, 
  /* [17][0][][] */ 27,-116,23,76,-46,-122,-75,-104,37,-81,78,44,92,54,-123,45,24,45,103,109,-103,-21,5,-60,54,57,-87,18,100,-59,-41,74,-43,-32,23,3,-56,94,-92,-39,-104,-50,-24,-15,1,6,79,-119,78,95,-22,19,-25,70,95,-83,-127,79,-89,-122,24,-101,66,85,-93,-81,36,-113,-114,-12,103,21,8,-125,-76,59,111,-57,35,-62,2,-23,-86,-102,-122,65,74,-40,12,71,-105,-120,-21,91,6,8, 
  /* [18][0][][] */ -72,96,109,-4,20,-49,-38,28,11,93,-38,5,-62,41,100,2,56,-10,56,-19,53,8,35,-8,73,-59,12,85,37,-4,10,64,2,-23,-81,-37,47,30,30,39,-8,17,2,56,-20,25,25,18,8,-27,16,5,-29,-37,43,57,-55,-6,22,-55,37,127,-11,-12,-66,-13,22,41,81,-6,-46,59,-66,-25,-25,-20,24,66,18,-31,-25,-24,-33,-47,95,-2,56,82,-72,-15,16,88,34,16,31,28, 
  /* [19][0][][] */ 18,34,75,38,94,-89,92,90,91,-59,26,-6,-95,30,-57,61,69,-106,111,55,-25,77,-57,10,127,-80,26,-67,-93,-119,-66,44,79,-84,29,15,10,-71,-54,-102,41,-116,-83,8,-87,27,73,-95,-29,35,-43,41,-32,11,4,-12,18,96,-1,-28,50,9,95,60,-71,-5,-28,-4,-14,53,70,-52,-65,-120,-58,-80,-26,-113,12,121,54,-116,-33,75,-88,-10,7,-7,85,26,-5,63,-36,112,65,-50, 
  /* [20][0][][] */ -15,61,64,89,-58,91,16,48,14,57,-90,1,-28,85,36,-65,-55,-26,-62,-15,18,-48,-76,-74,87,-76,-101,39,16,43,-36,124,107,50,-13,46,45,-28,-11,-114,-82,-37,-91,-107,-24,-64,-68,98,60,-127,-104,52,50,127,47,-7,95,64,88,91,108,-51,-71,6,-8,-67,-55,5,-78,-71,-79,73,-64,-61,49,12,109,75,105,99,84,7,76,-25,60,112,-19,74,15,96,23,72,21,27,-3,10, 
  /* [21][0][][] */ 94,59,60,-94,83,-76,72,4,3,-83,-67,31,1,42,-55,-88,-106,-22,4,-4,108,-46,66,-80,21,-71,-27,66,6,14,-2,-26,17,28,-75,-120,83,96,-127,-25,-4,11,27,-25,-99,-75,-73,87,-18,-65,0,90,17,80,-96,30,-44,55,-75,113,64,-109,16,10,85,28,-35,-60,-118,-8,50,82,41,-12,59,57,-97,-32,61,94,15,104,39,-61,24,-89,63,-80,-92,76,85,-118,-33,-99,70,-32, 
  /* [22][0][][] */ 19,-66,-83,-103,79,-60,96,43,-101,72,-86,-112,109,-121,-125,-95,26,73,-110,-64,75,-84,19,19,79,-15,-122,91,-69,-77,-76,-118,57,48,11,0,-9,-28,-71,-123,-10,-24,-10,81,43,-127,78,-34,-66,-82,-3,-29,-72,-102,-59,22,-25,-41,-29,-42,97,-87,-87,-122,-77,7,-123,-52,98,90,-36,-14,-77,-4,51,-101,37,-63,52,81,94,-107,-85,-126,66,71,85,-43,-66,20,-70,57,9,9,-40,86, 
  /* [23][0][][] */ 50,-68,4,46,81,-99,4,-103,46,-55,76,64,31,-103,20,-44,86,-29,-115,106,85,-76,95,-29,0,-15,75,18,67,53,62,-16,-25,39,18,47,97,-5,-127,1,-94,-1,1,-95,-60,-85,100,25,79,-95,-73,-41,66,-56,-36,86,-60,-21,93,36,-107,-82,-34,-13,35,34,-107,-103,47,-24,112,-65,-8,-27,-14,-88,51,-18,85,109,-48,-53,24,-100,84,6,97,-17,-80,43,98,28,91,-38,-26,70, 
  /* [24][0][][] */ -86,-58,-114,-78,-92,-119,-78,-101,61,113,77,40,112,56,-48,-127,-91,36,20,-58,91,-90,-65,-46,47,-36,68,52,102,53,-4,-70,-2,2,45,22,-62,-95,59,-28,-83,-109,98,-3,14,-45,38,67,-94,-53,-27,10,65,54,65,-82,-12,73,23,-7,86,-13,32,89,-104,92,-55,-98,-110,46,-65,-34,-46,35,90,96,58,-85,-115,-91,-89,-102,-71,-125,-5,58,-21,-108,20,-118,1,-81,-25,24,-101,25, 
  /* [25][0][][] */ -48,-5,-22,9,74,-32,-60,79,39,-50,-6,38,51,5,-22,1,-16,44,39,-87,50,85,12,-10,56,-49,-69,42,78,-88,35,120,61,-83,15,81,122,-33,4,-11,-46,82,-61,53,113,45,66,54,-69,67,-47,-4,58,-32,-6,17,-14,37,-31,67,71,86,37,2,-13,87,12,-7,-34,19,7,-85,21,-85,73,49,38,82,25,38,44,32,-35,58,-35,-20,-63,-43,-18,-14,127,61,-95,33,-21,-29, 
  /* [26][0][][] */ 59,-117,-38,-25,-101,0,-15,-18,-113,-88,100,67,-12,-52,2,-20,108,29,-90,-64,17,63,94,9,44,62,7,31,8,16,-95,-1,-18,-60,-91,-100,-73,85,-26,101,-96,96,53,24,-75,68,-37,97,-22,31,7,103,0,-39,-9,-106,105,77,39,26,0,-106,80,-17,127,-24,-63,54,-80,79,99,99,76,-91,-64,-6,48,-109,-98,0,-29,78,86,-75,72,0,-49,12,-78,109,-6,18,-49,116,49,84, 
  /* [27][0][][] */ 8,6,-69,-112,-115,-77,-78,-21,41,103,35,-115,-31,56,83,-35,66,-21,92,-91,-103,8,-34,-29,-95,45,-118,-4,66,27,-38,-14,61,69,-100,-93,-97,-73,-122,89,-104,15,26,15,100,22,68,105,91,70,59,-83,-95,-95,-10,-40,104,-30,-102,-87,-64,-53,-40,56,39,-53,-122,107,51,9,-127,5,61,-59,-11,-95,47,-73,89,105,86,-32,119,-63,-82,-92,-38,29,-55,-8,-41,-57,55,15,88,57, 
  /* [28][0][][] */ 65,17,119,69,-45,-32,-47,-26,-10,-17,76,95,-104,-51,60,120,127,98,-31,56,-34,54,-58,-18,-36,62,-42,-16,-18,-57,9,39,-93,12,78,70,81,-81,14,36,97,45,-62,97,-58,4,13,67,23,-47,-89,-20,-16,0,82,25,60,-21,97,74,-26,26,-85,6,55,109,24,69,-29,49,-70,-52,63,44,42,-36,-80,-11,-45,51,-44,-80,64,-31,87,-73,75,-28,-95,-14,20,34,-50,82,-59,-33, 
  /* [29][0][][] */ 42,61,68,-47,-50,23,-104,13,89,14,-80,-71,88,-96,-34,-34,-77,93,57,-60,-73,-26,56,10,6,2,-37,-10,-80,-9,94,1,42,-3,-77,-37,19,92,9,84,44,97,-39,85,8,94,-51,-19,17,1,48,-89,89,-100,107,40,-85,43,-21,104,-115,127,-87,-53,-61,-54,54,77,105,-69,35,-72,97,73,77,35,102,-47,-25,37,-4,-81,-12,-75,62,108,40,73,-38,90,85,76,-100,29,-5,63, 
  /* [30][0][][] */ 28,-74,-71,35,-105,24,-73,-18,119,-18,-5,-46,-107,18,56,11,-8,35,98,-110,42,-111,-123,10,-119,22,-78,120,-15,-115,-101,5,-89,-77,-127,-60,13,-22,-7,22,91,-84,-17,101,105,-48,107,59,-77,79,18,-111,99,-55,-15,104,-86,-59,-87,-60,-111,-6,-80,-30,-115,-96,-104,94,-66,113,50,-38,-95,108,39,-95,-63,-79,-84,-64,28,28,-112,-24,-117,26,-116,113,-42,-127,80,57,-36,-6,8,-76, 
  /* [31][0][][] */ 71,-29,68,98,69,58,-18,-32,-8,36,-31,-36,70,-70,14,113,-4,-48,66,34,52,58,9,114,84,-85,52,53,-26,-49,51,115,16,23,-67,28,127,-1,1,-75,69,-32,7,73,41,-19,-7,44,65,14,80,-7,-34,-48,-32,28,-68,52,26,116,-41,52,81,-64,76,118,1,-57,79,-33,-62,11,-68,-14,42,42,-37,5,60,91,-38,-22,38,58,72,98,-48,43,16,-9,-23,-7,14,118,10,41, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018803335260599852, 0.0018131851684302092, 0.0017441702075302601, 0.001856087357737124, 0.0018305940320715308, 0.0026493798941373825, 0.0017420996446162462, 0.0017956012161448598, 0.0022067625541239977, 0.0023195999674499035, 0.0018795898649841547, 0.002831209683790803, 0.0019411544781178236, 0.0019148908322677016, 0.001851864974014461, 0.0018777814693748951, 0.001772211049683392, 0.0018122728215530515, 0.0030443896539509296, 0.0018365143332630396, 0.0018341282848268747, 0.0019245847361162305, 0.001864835387095809, 0.0020130905322730541, 0.0017882769461721182, 0.0024885199964046478, 0.0018705578986555338, 0.0017199299763888121, 0.0022273384965956211, 0.0019972075242549181, 0.0017161788418889046, 0.0024667636025696993, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2280, 2786, 8854, 2555, -2797, -3611, 19006, 2604, 2678, -1533, 9480, -248, -7696, 2327, 12385, 6445, 11472, 5465, -3809, -5844, 4322, 34892, 14289, 21807, 1503, 755, 4581, 3041, 1796, -4815, 8074, -2676, -247, 3848, 53, 902, 7994, 4135, -1878, 5299, 7725, 6743, 3990, 11878, 2816, 4546, 1844, 7995, 4077, -5109, -5996, 446, -203, -1070, 2080, -22, 186, -942, -3728, 11203, -1013, 1553, -1344, -2507, -3046, 8667, 21148, 1917, -2065, 664, 1050, 2505, 1302, -915, 606, 9067, -547, 11302, 18786, -791, 8064, 1644, -566, 1398, 12904, 8932, 4206, 1613, 6159, 3640, -419, -7935, 751, -1649, -1819, -2109, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00027167514781467617, 0.00056159490486606956, 0.00027225786470808089, 0.0003414216625969857, 0.0003891520609613508, 0.00040900640306062996, 0.00017426692647859454, 0.00027305813273414969, 0.00022948537662159652, 0.00035375566221773624, 0.00020694632257800549, 0.00030471428181044757, 0.0003282712132204324, 0.001184397260658443, 0.0002496018132660538, 0.00018372788326814771, 0.00016309886996168643, 0.00026588025502860546, 0.000503336894325912, 0.0002902493579313159, 0.0001434685691492632, 7.8222066804300994e-05, 0.00021489060600288212, 7.6656237069983035e-05, 0.00017985535669140518, 0.00064731575548648834, 0.00064747699070721865, 0.00035744882188737392, 0.00028391927480697632, 0.00040587608236819506, 0.00018351597827859223, 0.0002828883589245379, 0.00020447904535103589, 0.00030089530628174543, 0.00047667164471931756, 0.00029104287386871874, 0.00024432764621451497, 0.00026244527543894947, 0.00029002878000028431, 0.00033133511897176504, 0.00016600247181486338, 0.00038568524178117514, 0.00038167316233739257, 0.00019751890795305371, 0.00068729626946151257, 0.00022240575344767421, 0.00027113570831716061, 0.00026918022194877267, 0.00033305221586488187, 0.00025240861577913165, 0.00026738707674667239, 0.00017597487021703273, 0.00057505926815792918, 0.00028862216277047992, 0.00038184048025868833, 0.00047261288273148239, 0.00055303965928032994, 0.00029826973332092166, 0.00040537310997024179, 0.00016620484529994428, 0.00075737264705821872, 0.00048651397810317576, 0.00020117269014008343, 0.00032018017373047769, 0.00061578425811603665, 0.00022963144874665886, 0.00010334423132007942, 0.00020359491463750601, 0.00054798700148239732, 0.00047185219591483474, 0.00036262109642848372, 0.00018805635045282543, 0.0010333539685234427, 0.00045803445391356945, 0.00031449855305254459, 0.00023902649991214275, 0.00025420315796509385, 0.00016616935317870229, 9.7079842817038298e-05, 0.00022589384752791375, 0.00018127646762877703, 0.00020130773191340268, 0.00017891563766170293, 0.0001654538355069235, 0.00014426020788960159, 0.00026612478541210294, 0.00055370049085468054, 0.00017667464271653444, 0.00011428938887547702, 0.00056482781656086445, 0.00020028561993967742, 0.00025020958855748177, 0.00025887769879773259, 0.00062483933288604021, 0.00035286150523461401, 0.00019571390294004232, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -22,101,-7,-127,-43,-38,-43,-61,-23,8,-7,75,23,-55,7,61, 
  /* [1][0][][] */ -29,26,-60,6,-27,-29,18,-89,59,49,-49,15,6,-6,38,-127, 
  /* [2][0][][] */ 15,4,-48,26,63,7,-65,-51,127,-51,-21,20,-19,110,-81,34, 
  /* [3][0][][] */ 39,-78,19,-104,25,-15,8,-10,127,12,90,54,-18,54,-2,111, 
  /* [4][0][][] */ -87,63,26,35,31,-13,6,53,12,17,24,-13,-127,-6,-30,15, 
  /* [5][0][][] */ 14,90,116,-7,18,78,-93,104,-75,69,-43,-45,48,-61,-127,37, 
  /* [6][0][][] */ 35,-57,110,-112,27,-15,-71,92,-86,-127,54,-46,13,80,12,110, 
  /* [7][0][][] */ 32,127,-31,-60,78,10,10,-20,123,96,-35,27,22,-25,73,44, 
  /* [8][0][][] */ 18,-87,3,-90,20,-64,9,-72,21,54,68,-14,21,127,92,69, 
  /* [9][0][][] */ 18,-46,-19,127,17,-41,30,-44,-102,95,10,-37,0,-96,-12,15, 
  /* [10][0][][] */ 3,34,-43,-127,20,1,-4,45,37,-35,6,-13,-22,-33,7,23, 
  /* [11][0][][] */ 16,22,26,-20,80,-31,75,-56,-77,29,-1,26,2,127,-60,-24, 
  /* [12][0][][] */ 45,4,-127,-10,24,-74,-5,31,8,28,-79,-53,-44,116,16,59, 
  /* [13][0][][] */ -14,16,-22,18,18,-127,3,25,13,-2,10,-1,9,-22,-1,-4, 
  /* [14][0][][] */ 19,-34,126,-34,90,24,-127,-125,-6,-35,55,34,-4,-72,-53,-62, 
  /* [15][0][][] */ -54,9,-13,-50,11,3,127,28,-21,42,71,-18,10,63,34,-8, 
  /* [16][0][][] */ 30,49,127,95,30,20,97,49,-75,14,-62,-7,-3,25,-7,-78, 
  /* [17][0][][] */ -34,-102,-20,26,-68,-28,-66,20,-127,-37,8,-50,1,38,68,-31, 
  /* [18][0][][] */ -4,30,9,52,29,8,23,-9,66,40,-17,-14,12,127,59,16, 
  /* [19][0][][] */ 22,-14,35,9,104,13,-127,-51,-100,-93,-47,-127,-31,-32,13,-24, 
  /* [20][0][][] */ 82,-13,-69,-31,6,-127,-5,36,-31,18,-94,-26,32,-8,43,21, 
  /* [21][0][][] */ 104,-11,81,-42,20,11,61,96,20,-86,75,78,-24,127,33,53, 
  /* [22][0][][] */ -11,45,-49,127,-63,-8,56,80,-19,9,-33,18,8,10,51,21, 
  /* [23][0][][] */ 107,11,105,-107,58,-39,-59,58,6,-14,-45,-40,8,-15,-127,57, 
  /* [24][0][][] */ -127,47,9,-34,-13,90,27,-12,-10,4,115,-10,-71,18,71,-5, 
  /* [25][0][][] */ 28,24,6,18,5,4,54,-41,-6,-127,-17,-18,-6,-25,28,27, 
  /* [26][0][][] */ -40,3,2,12,-49,-5,-34,-37,-102,-31,2,-27,7,127,-33,46, 
  /* [27][0][][] */ -1,27,7,64,37,-31,-19,-36,53,2,-27,-8,6,127,-12,18, 
  /* [28][0][][] */ 9,65,65,63,127,1,42,22,-73,-9,-36,-18,10,81,29,-44, 
  /* [29][0][][] */ -4,-6,3,15,22,-5,-8,33,-29,-12,-14,-127,5,-15,-11,16, 
  /* [30][0][][] */ -24,76,-41,67,-32,-10,46,-127,-35,59,-9,4,48,35,64,68, 
  /* [31][0][][] */ -47,-30,-6,-69,-12,4,-41,-118,20,82,-12,-127,-42,-50,-4,14, 
  /* [32][0][][] */ -127,-81,-19,60,43,27,-27,9,-14,-57,-116,35,80,-8,75,91, 
  /* [33][0][][] */ -4,-32,-32,-8,-86,-18,-97,13,58,9,3,-63,39,-108,127,44, 
  /* [34][0][][] */ 47,-10,55,20,36,11,-51,69,-83,-50,58,14,16,-11,-8,127, 
  /* [35][0][][] */ -43,46,-85,10,-22,-30,23,-127,78,90,-105,-4,9,-11,78,-118, 
  /* [36][0][][] */ -13,8,-3,112,14,5,127,-16,-17,48,-27,-23,-17,-2,-94,-39, 
  /* [37][0][][] */ -3,-22,17,-59,-9,-11,-58,-53,-89,-20,13,-27,16,-127,69,-23, 
  /* [38][0][][] */ 39,107,-12,-73,127,-4,24,-23,110,64,-18,2,35,-31,58,24, 
  /* [39][0][][] */ -21,79,-7,-127,-2,11,-50,38,54,-85,-36,-8,8,89,43,29, 
  /* [40][0][][] */ 5,-28,8,-95,-1,-27,-6,-54,-127,-11,-7,-34,-5,-121,82,-54, 
  /* [41][0][][] */ -1,-18,-49,-21,2,-40,13,-1,-36,11,-55,-17,-127,4,30,40, 
  /* [42][0][][] */ 127,85,-21,-28,-65,-54,-19,-38,-1,17,68,-42,-50,49,96,-101, 
  /* [43][0][][] */ 1,123,-70,-20,72,-13,127,-22,70,54,-62,16,13,-106,-98,-75, 
  /* [44][0][][] */ -13,-23,17,-39,59,2,-75,-127,-22,-6,3,-1,-3,-37,33,-62, 
  /* [45][0][][] */ -13,57,-127,-60,38,-57,40,-74,25,42,9,-60,18,-18,57,-41, 
  /* [46][0][][] */ 16,7,-26,-100,-7,10,22,-25,-119,-28,1,25,-14,-127,79,-31, 
  /* [47][0][][] */ 25,46,19,-19,127,-23,-36,21,-68,38,-11,13,8,-11,118,-23, 
  /* [48][0][][] */ -127,-75,-13,39,57,21,11,-26,-3,-13,-91,26,56,10,67,46, 
  /* [49][0][][] */ 21,16,96,62,122,-7,45,46,-127,-49,-42,-65,19,124,16,-57, 
  /* [50][0][][] */ 42,-15,-85,-22,50,-127,-21,-21,-19,-16,-9,-38,26,-13,-36,-12, 
  /* [51][0][][] */ 7,28,30,12,14,-12,-15,18,-127,48,5,-107,10,-117,-8,100, 
  /* [52][0][][] */ -2,45,12,54,37,9,25,25,73,87,-16,-37,29,127,71,12, 
  /* [53][0][][] */ 8,-42,-16,-10,-85,-21,-96,8,38,11,-3,-70,29,-118,127,38, 
  /* [54][0][][] */ 43,-15,-37,13,127,86,-101,-48,-72,-6,-27,-66,-6,-39,-26,-49, 
  /* [55][0][][] */ 38,-16,15,8,46,-29,-57,-127,-26,-56,-46,15,-10,-19,1,-18, 
  /* [56][0][][] */ -13,13,20,-25,-12,-33,-108,68,-16,127,-11,-22,33,3,7,19, 
  /* [57][0][][] */ 6,30,-47,-22,-47,-51,125,99,-24,24,-21,4,23,39,127,-10, 
  /* [58][0][][] */ 21,4,-127,36,75,99,-22,42,-85,-31,17,17,-45,10,2,-25, 
  /* [59][0][][] */ -119,66,117,31,-91,-73,125,127,16,6,41,-31,23,6,74,4, 
  /* [60][0][][] */ 11,2,-62,9,29,-127,-37,7,-7,-18,-25,-23,31,-27,-1,13, 
  /* [61][0][][] */ 24,-24,30,127,64,17,19,-2,-110,-9,14,59,-19,38,37,-57, 
  /* [62][0][][] */ -40,127,10,-52,-36,-17,-81,61,-27,-75,-96,-58,-5,-88,-44,-28, 
  /* [63][0][][] */ -40,32,-27,127,-74,11,-67,-27,-60,-28,-30,-37,20,65,42,44, 
  /* [64][0][][] */ 0,2,5,43,1,13,-13,61,26,8,-15,-38,-10,-127,47,-3, 
  /* [65][0][][] */ -13,-58,21,-127,52,-18,76,-49,10,50,26,-90,-20,6,0,-72, 
  /* [66][0][][] */ 18,-18,74,-12,15,19,22,69,23,-49,58,41,-1,127,-10,50, 
  /* [67][0][][] */ 8,61,-15,-127,-5,0,-50,42,84,-92,-38,-1,24,83,64,27, 
  /* [68][0][][] */ -29,39,127,11,7,8,2,4,-33,-16,-9,-30,10,-14,89,-33, 
  /* [69][0][][] */ 127,84,-12,-6,-77,-31,-14,-26,8,20,76,-44,-64,57,74,-92, 
  /* [70][0][][] */ 48,20,-59,-17,-21,22,46,127,-34,82,-47,12,9,67,-15,24, 
  /* [71][0][][] */ 2,-5,-10,13,-2,-86,0,19,-39,20,-72,-6,-127,-11,51,57, 
  /* [72][0][][] */ 13,27,-127,13,7,8,22,99,-40,-34,4,-9,26,27,6,16, 
  /* [73][0][][] */ -40,20,33,1,44,-43,-82,-127,17,-81,27,-16,17,-51,51,-8, 
  /* [74][0][][] */ -17,21,26,127,9,-10,-87,71,-71,13,-42,38,24,-125,31,-86, 
  /* [75][0][][] */ -5,22,-61,10,7,-18,4,-17,113,11,-19,-17,21,127,-43,15, 
  /* [76][0][][] */ -5,-17,2,22,6,-9,-6,53,18,-23,-14,-127,-8,-8,1,7, 
  /* [77][0][][] */ -2,42,-29,127,-60,8,66,110,0,28,-22,27,-9,-27,-2,3, 
  /* [78][0][][] */ 14,3,17,-121,39,-53,-72,40,12,-78,-7,-65,43,127,53,81, 
  /* [79][0][][] */ -4,-106,-87,-72,-98,-14,21,-88,127,9,35,55,27,34,63,-40, 
  /* [80][0][][] */ -20,22,83,-97,5,-54,-11,-69,-71,22,-67,-90,30,94,127,-16, 
  /* [81][0][][] */ -40,39,-124,27,61,-127,-22,46,-10,-51,55,-8,29,1,14,7, 
  /* [82][0][][] */ 127,0,-1,16,19,-101,-7,24,-12,-2,-102,3,95,10,-12,15, 
  /* [83][0][][] */ -27,91,-127,-103,-26,-19,61,-119,75,51,-56,-110,6,54,58,97, 
  /* [84][0][][] */ -40,6,74,-31,-4,-22,56,-127,-49,58,8,-71,40,42,30,-17, 
  /* [85][0][][] */ -80,127,21,-127,-82,-40,-36,-1,-64,-8,-74,16,11,-17,-91,-20, 
  /* [86][0][][] */ -2,7,-32,-3,-20,-33,127,30,4,-30,-6,14,9,35,85,-17, 
  /* [87][0][][] */ -28,-36,5,-125,12,-33,59,-17,-3,24,-11,-127,-25,3,6,-49, 
  /* [88][0][][] */ 101,6,25,-21,14,-123,-13,24,-35,12,-109,-38,36,39,127,39, 
  /* [89][0][][] */ 16,-31,-36,-44,19,-6,-25,-17,-48,9,43,-79,127,0,27,-45, 
  /* [90][0][][] */ -6,-54,41,-51,66,3,-63,79,64,-77,-33,-21,-20,114,8,-127, 
  /* [91][0][][] */ -51,-8,-21,-40,16,-11,-26,-106,16,65,-3,-127,-36,-12,8,5, 
  /* [92][0][][] */ -23,26,43,16,4,-127,17,1,0,-19,-7,-13,-1,-25,22,2, 
  /* [93][0][][] */ 35,-23,127,-9,-48,57,40,-37,-18,32,-64,-17,-27,4,25,-2, 
  /* [94][0][][] */ 32,11,-9,-26,32,0,-11,6,-25,-22,16,-56,127,-18,34,-41, 
  /* [95][0][][] */ 127,108,5,41,-87,-8,-58,-7,-21,-9,97,-41,-48,32,70,-84, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00074769265484064817, 0.0015455973334610462, 0.00074929639231413603, 0.00093964597908779979, 0.0010710075730457902, 0.0011256497818976641, 0.00047960993833839893, 0.00075149879558011889, 0.00063157978001981974, 0.00097359111532568932, 0.00056954874889925122, 0.00083862151950597763, 0.00090345391072332859, 0.0032596471719443798, 0.00068694335641339421, 0.00050564797129482031, 0.00044887370313517749, 0.00073174422141164541, 0.0013852621195837855, 0.00079881178680807352, 0.00039484802982769907, 0.00021527940407395363, 0.00059141265228390694, 0.00021096999989822507, 0.00049499014858156443, 0.0017815146129578352, 0.0017819582717493176, 0.00098375522065907717, 0.00078139040851965547, 0.0011170346988365054, 0.00050506478874012828, 0.00077855319250375032, 0.00056275841780006886, 0.00082811107859015465, 0.0013118751812726259, 0.00080099562183022499, 0.00067242799559608102, 0.00072229059878736734, 0.00079820473911240697, 0.00091188622172921896, 0.00045686485827900469, 0.0010614662896841764, 0.0010504244128242135, 0.00054360303329303861, 0.0018915472319349647, 0.0006120955222286284, 0.00074620801024138927, 0.00074082618812099099, 0.00091661198530346155, 0.00069466815330088139, 0.0007358912262134254, 0.00048431043978780508, 0.001582653378136456, 0.00079433346400037408, 0.0010508849518373609, 0.001300704781897366, 0.0015220518689602613, 0.00082088512135669589, 0.0011156504042446613, 0.00045742181828245521, 0.0020844084210693836, 0.0013389628147706389, 0.0005536588141694665, 0.00088118604617193341, 0.0016947349067777395, 0.00063198176212608814, 0.00028441954054869711, 0.00056032516295090318, 0.0015081461751833558, 0.0012986112851649523, 0.00099799013696610928, 0.00051756057655438781, 0.0028439522720873356, 0.0012605827068910003, 0.00086554937297478318, 0.00065783842001110315, 0.00069960701512172818, 0.00045732414582744241, 0.00026717895525507629, 0.00062169530428946018, 0.00049890129594132304, 0.00055403047008439898, 0.00049240392399951816, 0.00045535492245107889, 0.00039702674257569015, 0.00073241716017946601, 0.0015238706255331635, 0.00048623635666444898, 0.00031454232521355152, 0.0015544947236776352, 0.00055121746845543385, 0.00068861601175740361, 0.00071247201412916183, 0.0017196559347212315, 0.00097113021183758974, 0.00053863535868003964, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -11385, 16115, -14931, 4079, -6656, 14300, 35512, -44862, -6140, 17153, 25159, 17970, -11770, 24576, -10507, 10717, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00076487258775159717, 0.00045643196790479124, 0.00018998386804014444, 0.00026608523330651224, 0.00032273252145387232, 0.00032736812136135995, 0.00032221368746832013, 0.00034551447606645525, 0.00035266519989818335, 0.00023658234567847103, 0.00061742443358525634, 0.0006527251098304987, 0.00036716173053719103, 0.00022250173788052052, 0.00049943843623623252, 0.00060521368868649006, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -15,-14,-6,-39,18,-5,-39,6,12,7,-6,6,-2,-7,-32,5,2,10,-14,1,8,-40,5,2,11,20,-5,127,35,-31,50,-7,0,7,3,0,-11,12,-26,1,-15,7,5,40,11,12,20,1,30,-8,7,22,13,-24,-11,84,22,3,-26,-40,-6,25,8,-20,-43,-60,-9,40,14,10,16,-16,-6,-42,-2,-9,-28,28,-10,9,-9,-20,30,24,0,-7,-8,-80,6,-6,9,0,47,-36,-40,-3, 
  /* [1][0][][] */ 24,-79,-81,-71,127,-13,62,55,-27,-96,-50,-10,8,-8,-61,22,-62,16,31,54,27,18,-30,-61,8,6,-28,-60,21,-13,-36,25,-35,30,6,7,8,0,31,24,-33,33,-47,-5,-38,92,26,21,30,-81,46,-9,-28,39,43,21,-21,-23,-50,-45,21,-17,5,-33,-78,97,-8,-17,8,-22,-22,18,49,-126,-39,24,30,-35,27,2,16,-22,38,-4,-54,47,-15,62,37,-26,-4,1,27,4,33,125, 
  /* [2][0][][] */ 22,61,-99,-7,57,111,34,62,-2,-115,-2,-10,6,7,36,61,23,-19,-48,65,17,29,99,23,62,36,5,-60,45,-33,64,-68,38,74,-33,36,-127,-89,39,4,7,-32,20,-7,66,-45,6,64,-23,28,-51,-55,111,-8,-14,43,11,20,47,9,28,32,21,-25,12,8,-20,-20,-63,-33,-15,-50,-15,-75,11,67,46,36,30,-14,23,-68,8,9,-29,20,30,40,-21,20,19,-22,10,-46,-62,-16, 
  /* [3][0][][] */ 60,6,109,13,32,-14,18,-33,-6,-66,14,-48,7,20,47,81,26,-11,40,-5,120,12,50,23,27,-22,-2,14,26,12,-39,53,-96,33,22,-1,-20,-34,-18,18,-58,-25,67,18,40,43,-40,-85,-46,-8,-88,14,15,-109,1,17,-127,75,39,42,12,60,-40,-48,26,58,-3,-65,4,-30,9,-55,46,2,38,-24,-6,-24,59,47,-29,-82,12,14,-15,-1,10,30,15,-4,13,17,24,102,54,-53, 
  /* [4][0][][] */ 56,-12,23,-27,123,81,5,-47,-69,-71,-51,-18,-57,25,-3,101,45,-127,-71,105,-31,33,58,-39,15,14,10,-74,25,-22,96,-49,116,42,-54,6,46,6,38,13,-23,-5,-27,-13,45,-94,-4,7,61,1,-59,36,-18,-59,-9,-58,34,-2,-35,46,2,100,63,63,62,70,-5,-20,-68,-22,77,75,60,-83,-49,-26,2,60,96,-56,-17,-52,21,8,-78,12,79,97,-54,47,9,-56,13,3,27,-24, 
  /* [5][0][][] */ 24,-10,-24,0,-5,-2,33,-36,-28,-44,-15,24,7,20,-2,34,-1,-7,15,-14,32,29,-25,54,17,8,15,-113,-4,13,28,22,-15,22,1,-68,29,17,13,-2,-10,1,28,-10,22,-22,15,-18,-8,-19,1,-29,3,-32,-8,-55,-5,22,-12,11,57,24,-2,46,-12,56,17,55,-1,71,16,21,31,20,-11,51,-46,-18,4,-9,-4,-19,11,30,5,12,-1,127,0,23,3,-11,15,-2,-61,14, 
  /* [6][0][][] */ 26,-87,3,-53,-57,11,39,19,1,-12,-12,-49,-38,5,-34,26,34,-13,-18,-1,-29,47,5,1,-9,23,-27,-24,-16,5,64,-15,49,1,53,-5,-12,-9,52,-100,-25,96,7,-30,42,-37,5,36,-10,28,-11,90,-17,-67,-23,-28,20,-63,-18,-8,-15,70,35,-59,40,-34,26,-35,9,-10,127,-3,-25,-8,-18,35,-94,15,9,-9,42,39,41,-7,-20,15,61,66,31,1,63,-43,-13,-15,-37,5, 
  /* [7][0][][] */ -21,112,49,24,127,28,43,-16,-13,-34,26,-29,-35,1,26,-6,-4,-15,9,28,30,-61,22,19,-28,-13,15,20,4,-6,2,9,25,-20,-32,18,29,25,-26,73,-37,18,1,3,-47,-3,-5,-19,-39,-20,28,-1,21,-32,-39,48,42,4,-33,3,-8,-48,-6,-15,-41,57,-37,-67,-10,-15,-13,56,-45,-29,2,8,62,45,43,-25,-40,-31,-20,-19,-26,36,-16,-20,-43,26,-46,-38,-43,1,34,2, 
  /* [8][0][][] */ 18,4,40,-4,-127,-4,39,-18,18,86,67,33,-3,29,20,33,-34,-3,0,2,-37,21,-96,54,31,-16,53,-23,13,11,13,56,81,7,-4,-17,-31,-19,28,37,13,-25,52,27,-5,-23,64,2,-87,4,31,49,-68,-41,-23,26,24,-45,-70,-25,19,-20,-21,16,-1,80,10,-48,24,-26,-35,-28,55,44,55,1,-26,-31,-29,22,-83,14,0,3,27,34,67,58,40,-33,54,50,5,-19,33,34, 
  /* [9][0][][] */ 29,-113,-19,12,53,108,-20,-33,26,-44,81,101,-7,11,102,-64,6,-28,-24,22,-43,-12,45,-14,-22,29,4,16,-30,-15,27,-23,2,48,-91,41,-2,7,13,49,31,-54,-6,80,59,-29,-52,-17,38,3,-6,-71,48,44,-24,-65,15,92,4,12,20,-24,-49,127,-74,-12,15,-24,-13,10,-42,-88,65,5,-4,18,32,-64,4,-23,5,-25,29,31,2,-42,49,28,9,-45,-39,30,-44,-20,2,-41, 
  /* [10][0][][] */ -40,-23,-26,-49,-35,6,59,-28,34,19,21,45,27,-4,-9,5,-7,15,-21,-26,1,43,28,15,-7,0,14,-127,29,-51,53,-33,3,33,-4,-13,-11,22,8,-10,6,-31,28,-39,34,-19,37,21,1,34,-31,-26,-30,-22,-6,-55,11,18,-4,-44,24,19,-5,19,-36,82,-7,-37,9,-36,11,-17,-18,3,21,49,-13,36,-21,8,-16,-5,17,34,14,-6,1,113,4,-6,13,10,25,-46,37,-37, 
  /* [11][0][][] */ -76,13,-5,-3,-3,-52,-7,-2,-46,-10,-4,25,25,25,-26,1,50,0,-72,-45,29,7,-5,2,73,19,58,-4,-16,16,-36,13,-9,35,-9,-8,-7,4,35,3,-5,1,6,17,95,13,92,27,45,24,-1,42,11,-60,19,-9,-60,-16,-36,-43,-10,2,-10,26,-5,-27,36,-6,26,4,-1,28,-18,8,28,9,-41,71,-127,57,-26,-16,-53,-58,119,24,47,3,14,41,-27,-58,-26,40,-24,3, 
  /* [12][0][][] */ -5,5,-36,5,77,18,3,-19,-15,22,27,-4,5,-25,30,-8,-31,-11,26,-26,-15,-16,-37,41,-30,34,-17,93,-16,41,-50,7,-12,20,5,24,-18,-17,0,9,-9,-27,-2,0,-28,-3,11,14,-1,0,-12,-30,-28,9,-5,-22,-24,-7,21,28,-6,-28,9,44,46,-71,12,61,-31,-127,-4,43,1,15,4,81,20,-21,-5,8,-7,33,-51,6,11,-23,-9,-57,-6,14,11,5,-37,39,-17,17, 
  /* [13][0][][] */ -92,48,-32,-31,-75,-16,13,29,-53,-27,45,41,67,4,-60,-8,-14,45,-54,-12,18,-21,63,-58,59,69,-21,-17,5,-31,-49,-109,-105,-60,-8,-12,-11,37,59,-16,-34,97,-5,5,10,-1,2,12,67,-15,49,92,55,-82,78,-16,-7,35,20,-26,23,47,-13,27,2,-26,17,6,10,14,35,-127,5,-44,-85,9,54,52,-67,-47,99,-27,-8,-24,45,-48,90,19,-18,-18,2,33,55,-47,-50,35, 
  /* [14][0][][] */ -49,24,-15,-48,60,-12,-19,46,-87,-4,18,3,-32,-59,-85,-57,-88,-2,80,10,36,-25,3,-102,-34,13,-53,-7,8,-13,-19,-28,-64,-45,25,19,-13,7,-2,5,0,68,-75,-21,-85,33,2,15,127,-14,37,-21,36,58,-97,35,-12,24,-115,9,1,22,54,14,9,28,-9,8,-42,37,53,35,5,-20,-26,14,73,-80,-28,-91,25,-27,5,29,28,-76,-54,-6,-44,27,28,54,8,45,15,-1, 
  /* [15][0][][] */ -54,-65,1,-21,22,-7,-17,-51,-9,12,1,-44,32,-21,50,-30,-84,11,-6,12,-23,-12,-73,-36,-22,-22,-3,27,-24,6,56,-72,-8,11,14,14,-2,39,-106,5,17,-68,-13,13,-60,-28,27,17,37,29,-9,-127,-9,48,3,41,23,-11,-23,39,7,-19,45,-17,10,-6,-18,5,-20,39,-6,33,-62,2,-4,-31,-5,1,10,22,-16,51,-16,48,-24,-52,-46,-54,-47,51,15,74,-29,9,11,-9, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032507084310054779, 0.019398357719182968, 0.0080743143334984779, 0.011308622546494007, 0.013716131448745728, 0.013913145288825035, 0.013694081455469131, 0.014684365130960941, 0.014988270588219166, 0.010054749436676502, 0.02624053880572319, 0.027740815654397011, 0.015604373067617416, 0.0094563234597444534, 0.021226134151220322, 0.025721581652760506, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 23056, 62801, -1369, 274, 16482, -6588, -658, 101, 5090, 10850, -4625, -111, 748, 5175, 5093, -9400, -4018, -328, -159, 16424, -10813, 18096, -2971, 6729, 28886, 532, -5381, 19814, 14139, -19766, 2024, 23671, 24357, -12138, 1911, -368, -260, -1004, 5412, -8246, -6701, -1525, -8390, 39, 29222, -2599, 13312, -1848, -14184, 997, 140, 778, -2538, 25022, -3856, 15166, 25884, 172, 35897, 282, -10119, -499, 1591, -477, -1486, 15003, -1832, -4898, -4600, 4609, 173, -4620, 1487, 296, -2149, -8201, -796, -2627, 47925, -8459, -5692, -10974, -398, 12, 57668, -12741, -12440, -28857, -5394, 8887, -2636, 33968, 241, -2254, -3742, 702, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00010016817395808175, 9.1465073637664318e-05, 0.00011193062528036535, 0.00019735464593395591, 0.00021296222985256463, 0.00011479018576210365, 7.2305650974158198e-05, 8.4511877503246069e-05, 0.00021417575771920383, 0.00022069018450565636, 0.00023475657508242875, 0.00011151075159432366, 0.00023447860439773649, 0.00019145786063745618, 0.00038924068212509155, 0.00015565019566565752, 0.00021520616428460926, 0.00017615480464883149, 0.00015893524687271565, 6.7575849243439734e-05, 6.7600973125081509e-05, 4.8509558837395161e-05, 0.0001329758670181036, 0.00010767511412268505, 9.0418659965507686e-05, 0.00011355143215041608, 0.00016542513913009316, 0.00015197659377008677, 6.957166624488309e-05, 0.00044371889089234173, 0.00036650511901825666, 0.00024110368394758552, 0.00012630043784156442, 0.00012841599527746439, 0.00021206085511948913, 0.00044967187568545341, 0.00036072352668270469, 0.00018927697965409607, 0.00021522845781873912, 0.00010762368037831038, 0.0001889878767542541, 0.00021290183940436691, 0.00036672447458840907, 7.7031494583934546e-05, 0.00036361129605211318, 9.0389869001228362e-05, 0.00011409478611312807, 0.00029756160802207887, 0.00066328718094155192, 9.039064752869308e-05, 0.00039199762977659702, 0.00017651505186222494, 0.00021723120880778879, 0.00011134146916447207, 0.00023591234639752656, 0.00011714669381035492, 0.00010670108167687431, 0.0004264981544110924, 4.3279800593154505e-05, 0.00015096405695658177, 0.00025801287847571075, 0.00028470595134422183, 0.0001070381113095209, 0.00014771377027500421, 0.00012534909183159471, 0.0001188969035865739, 0.00023693087860010564, 0.00045898312237113714, 0.00017478906374890357, 9.8229356808587909e-05, 0.00017068455053959042, 9.3303446192294359e-05, 0.00024807991576381028, 0.00013984699035063386, 0.00037328264443203807, 0.00023071796749718487, 0.00012864616292063147, 9.7333715530112386e-05, 5.3963805839885026e-05, 0.00014486524742096663, 0.00022706582967657596, 0.00022362323943525553, 0.00016923417570069432, 0.00024768884759396315, 6.151386332930997e-05, 0.00012554397108033299, 7.5372416176833212e-05, 0.00047767351497896016, 0.00031151148141361773, 0.00011764453665819019, 0.00032215128885582089, 3.2872012525331229e-05, 0.00014888781879562885, 0.00010002300405176356, 0.00029689195798709989, 0.00031414625118486583, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-70,-11,127,22,69,75,-62,-15,-18,-16,-4,-29,0,37,-2,-10,-45,26,21,14,-127,127,6,-83,9,49,-30,-127,-127,39,22,13,32,60,-17,-31,-10,29,-7,-12,28,-107,69,26,-67,36,48,-18,54,-22,18,3,-9,14,47,-91,-49,-61,-18,-12,-1,7,40,69,-25,78,15,-6,18,19,127,23,22,25,-2,-11,17,127,-8,-16,14,-26,20,127,19,-69,-15,0,-29,-16,-43,1,-24,-15,26, 127,-127,76,105,-44,127,37,-120,71,4,-18,127,127,-101,-13,10,11,127,127,-113,127,-74,81,67,-127,-120,-68,-37,-56,46,-57,-23,-86,65,-127,-82,-44,-15,-55,61,0,127,127,78,-51,-109,-111,-51,-15,-127,48,82,67,-33,43,83,-49,43,-83,-114,-43,-43,-63,68,74,-61,29,31,-81,34,-19,93,115,127,13,17,3,57,-30,51,63,123,127,-23,-7,72,-103,127,-122,-97,5,-127,-92,-127,-38,109, -77,-13,31,-83,15,-26,61,-9,82,-33,-28,22,-19,-5,-7,-13,-9,-16,6,-5,-29,-93,31,-2,-121,97,7,-57,116,50,-14,8,5,20,13,-30,-9,33,16,12,24,13,-117,63,18,-16,36,14,-15,12,-15,4,-9,0,-3,24,-66,8,-33,51,4,41,34,1,-6,-39,-30,25,10,4,-4,36,10,-25,-6,5,-12,-7,-82,1,-22,-22,-18,3,-113,6,-32,-20,-52,25,-26,-35,28,-25,-14,1, 
  /* [0][1][][] */ -66,-74,74,-37,-50,98,19,127,-51,-20,-1,-116,25,-117,77,33,-4,-61,-19,89,58,-73,48,49,-95,-9,127,-22,-24,64,119,-107,-127,97,-85,-53,-36,34,-28,97,-48,-26,-4,49,-47,127,-26,67,15,98,21,-3,13,-57,25,32,127,120,-71,-83,127,-35,-37,127,72,-37,-15,-2,127,38,127,97,-40,100,-4,13,15,13,-28,8,-43,127,-78,109,2,34,-50,30,75,-127,-32,-9,127,-67,-21,1, 67,125,57,-117,127,82,87,38,-127,127,127,-36,-66,-127,-127,127,127,-63,-125,-51,111,82,-116,127,-106,-94,-44,127,-127,109,-127,-127,-89,127,108,127,127,-127,-109,127,-62,-94,113,-127,-127,-33,-127,-127,127,-111,87,41,127,127,127,-127,99,-127,-127,127,20,-80,-127,-100,-127,127,-127,127,-124,-127,-108,-85,-127,-78,127,127,-127,127,-74,127,127,33,-40,-127,60,127,91,47,127,12,127,3,-69,37,127,-127, -55,-13,-48,39,-58,-97,32,-28,20,-33,-29,92,2,94,14,10,-6,64,-8,127,3,-81,-39,8,-76,108,-70,-20,-68,-16,16,-64,-69,40,6,-15,-29,44,-69,44,127,-4,-38,29,-39,-56,15,46,8,120,-9,6,-36,-73,3,21,95,4,1,20,-33,127,95,-51,-42,12,38,-11,-73,124,-20,-86,0,-54,-16,-18,27,15,77,-36,-70,-40,56,14,-47,-18,68,24,15,62,-44,20,-44,96,-25,-4, 
  /* [0][2][][] */ -68,3,-3,-21,13,-40,65,24,55,-28,-37,-2,17,16,-27,7,-8,64,9,1,-53,-80,2,-10,-21,-58,36,-70,89,39,25,24,14,-5,-10,-45,-7,37,-3,0,-15,-6,-68,103,3,33,11,38,-17,-29,9,-22,19,-5,7,14,-71,22,-10,15,15,-1,-21,-6,-1,-47,-47,17,-31,11,25,30,11,-19,26,8,18,5,-74,-11,-8,-12,18,15,-126,10,17,-42,-59,-50,-28,-46,9,58,-17,-9, 122,34,-127,-37,-74,-25,36,33,-65,-28,-20,-103,-78,114,-12,44,5,-52,-8,-127,99,-54,-39,0,-112,127,-51,20,-35,-22,-10,-7,-66,20,28,6,-23,-28,127,53,12,-13,68,-35,-39,77,-66,-43,-33,-4,-127,-127,-52,-29,1,40,-66,-9,16,38,-6,-19,11,-47,-54,32,64,-21,111,109,-25,-71,9,-57,3,5,103,5,50,23,13,-101,-46,3,2,12,127,41,-62,37,-19,-107,41,81,-9,26, -55,13,-16,27,15,-67,-127,3,-11,-8,-16,4,14,-28,19,4,-7,-17,6,17,-50,-58,12,0,16,-99,20,3,-48,-40,-7,14,41,-19,-5,-23,-36,5,42,-40,23,-2,-48,-34,3,68,22,17,-10,-4,10,-9,18,3,-5,-6,-61,-11,7,-39,-11,9,86,-12,35,-3,-3,29,-2,5,-5,20,-18,15,-1,16,37,0,73,-11,4,-14,-4,-17,74,3,46,-36,59,38,-17,-49,-8,1,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0042571472004055977, 0.0038872654549777508, 0.0047570513561367989, 0.0083875721320509911, 0.0090508945286273956, 0.0048785828985273838, 0.0030729901045560837, 0.0035917547065764666, 0.0091024693101644516, 0.0093793328851461411, 0.0099771544337272644, 0.004739206749945879, 0.0099653406068682671, 0.0081369588151574135, 0.016542728990316391, 0.0066151334904134274, 0.0091462619602680206, 0.0074865790084004402, 0.0067547480575740337, 0.0028719734400510788, 0.0028730412013828754, 0.0020616562105715275, 0.0056514744646847248, 0.0045761922374367714, 0.0038427929393947124, 0.0048259356990456581, 0.0070305685512721539, 0.0064590051770210266, 0.0029567957390099764, 0.018858052790164948, 0.015576467849314213, 0.01024690642952919, 0.0053677684627473354, 0.0054576797410845757, 0.0090125864371657372, 0.019111054018139839, 0.015330749563872814, 0.0080442717298865318, 0.0091472091153264046, 0.0045740064233541489, 0.0080319847911596298, 0.0090483278036117554, 0.015585789456963539, 0.0032738384325057268, 0.015453479252755642, 0.0038415694143623114, 0.0048490283079445362, 0.012646368704736233, 0.028189703822135925, 0.0038416024763137102, 0.016659898683428764, 0.0075018894858658314, 0.0092323264107108116, 0.0047320122830569744, 0.010026274248957634, 0.0049787345342338085, 0.004534795880317688, 0.018126171082258224, 0.0018393915379419923, 0.0064159720204770565, 0.010965547524392605, 0.012100002728402615, 0.004549119621515274, 0.0062778349965810776, 0.005327336024492979, 0.0050531183369457722, 0.010069562122225761, 0.019506782293319702, 0.0074285347945988178, 0.0041747475042939186, 0.0072540929540991783, 0.0039653964340686798, 0.010543395765125751, 0.0059434967115521431, 0.015864511951804161, 0.0098055135458707809, 0.0054674618877470493, 0.0041366829536855221, 0.0022934617009013891, 0.0061567728407680988, 0.0096502974629402161, 0.009503987617790699, 0.0071924524381756783, 0.010526775382459164, 0.0026143391150981188, 0.0053356187418103218, 0.0032033275347203016, 0.020301124081015587, 0.013239237479865551, 0.0049998927861452103, 0.013691429048776627, 0.0013970605796203017, 0.0063277324661612511, 0.0042509776540100574, 0.012617907486855984, 0.013351215049624443, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1839, 9642, 12619, 17226, 14412, -4179, -1994, 4566, 35350, -4869, 12148, 3274, 8331, 10623, 32079, 1653, 2545, 11140, 10914, 6734, -238, 571, 14052, -1370, 4892, 114, 13454, 6435, 8790, 41582, 51732, 19306, 10781, -886, 11194, 2448, 1432, 3644, 20343, -990, 14193, 8375, 35477, -3265, 24951, 8965, 8313, 22983, 60059, 13785, -776, 6047, -2492, 28, -2562, 6282, -483, 16041, 5819, 9071, 6668, 16023, 7205, 4969, 10577, 10586, 7033, -6389, 6415, -2303, 4873, 8406, 16755, 4901, -6678, -3683, 7247, 511, 2771, -1737, 18156, 12731, 4575, 18974, 4329, 276, 7797, 63821, 10289, 9586, 7278, -409, 5511, 7742, 4315, 10561, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00020661699818447232, 0.00015008391346782446, 0.00014804255624767393, 0.00013276308891363442, 0.00020318965835031122, 0.0002465899451635778, 0.00041543904808349907, 0.00036512181395664811, 6.6988759499508888e-05, 0.00027787446742877364, 0.00022274295042734593, 0.00026608459302224219, 0.0001511710142949596, 0.00021798329544253647, 7.3728362622205168e-05, 0.00033702937071211636, 0.00019191000319551677, 0.00011300884216325358, 0.00020361470524221659, 0.00017535504593979567, 0.00030701863579452038, 0.00050265318714082241, 0.00014431604358833283, 0.00044885076931677759, 0.00053505669347941875, 0.00019517476903274655, 0.00016548206622246653, 0.00021660553466062993, 0.00018523358448874205, 8.4754166891798377e-05, 5.4112853831611574e-05, 0.00012927601346746087, 0.00015491528029087931, 0.00026320095639675856, 0.00017876429774332792, 0.00021984912746120244, 0.00036438312963582575, 0.00040900293970480561, 0.00013340100122150034, 0.00055675412295386195, 0.00013554339238908142, 0.00019255590450484306, 7.5854826718568802e-05, 0.00032228679629042745, 0.00012772766058333218, 0.0001706896728137508, 0.00020692327234428376, 0.00011820861982414499, 6.9085086579434574e-05, 0.00015439442358911037, 0.00019644976418931037, 0.00029055864433757961, 0.00042726195533759892, 0.00021805371216032654, 0.00039762895903550088, 0.00017663944163359702, 0.00019861543842125684, 0.00011790839926106855, 0.00034599695936776698, 0.00015840152627788484, 0.00024079924332909286, 8.7555148638784885e-05, 0.00020463085093069822, 0.00019961374346166849, 0.0002323956141481176, 0.00018324065604247153, 0.00018038335838355124, 0.00020341605704743415, 0.00025988783454522491, 0.00029507037834264338, 0.00023661441809963435, 0.00019033126591239125, 0.0001205280059366487, 0.00020763213979080319, 0.00023142121790442616, 0.00036590517265722156, 0.00022552548034582287, 0.00026988115860149264, 0.00026914608315564692, 0.00021532706159632653, 0.00011158257984789088, 0.00012867539771832526, 0.0001841938792495057, 0.00010560249938862398, 0.00026970950420945883, 0.0002382325183134526, 0.00029229430947452784, 5.9125246480107307e-05, 0.00013957405462861061, 0.0002362462691962719, 0.00017569771443959326, 0.0003159134357701987, 0.00027049143682233989, 0.00020011489687021822, 0.00025530366110615432, 0.00015452250954695046, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 17,74,-40,77,-7,36,-12,-28,38,14,-62,108,-7,-127,50,-88, 
  /* [1][0][][] */ 31,68,-5,-38,18,-37,127,-125,-6,94,-9,-29,8,-46,10,27, 
  /* [2][0][][] */ -127,14,-52,-6,-17,-16,40,87,-61,52,119,-53,-65,10,22,-81, 
  /* [3][0][][] */ -78,27,30,70,-28,28,62,97,7,48,-127,40,25,-50,-44,-35, 
  /* [4][0][][] */ 12,-23,27,58,-22,93,7,36,8,7,22,-9,29,-13,-127,-32, 
  /* [5][0][][] */ 11,-19,56,-32,-11,-48,-20,32,-96,85,-64,-127,-28,24,-45,-10, 
  /* [6][0][][] */ 12,1,31,-15,38,52,-86,-73,-9,-2,38,-27,127,-17,-18,-30, 
  /* [7][0][][] */ 33,-3,127,-5,-8,-23,29,-13,-57,42,-82,-26,6,-9,47,-21, 
  /* [8][0][][] */ 44,14,89,69,-58,63,3,51,23,0,14,-85,-41,16,-127,-60, 
  /* [9][0][][] */ 55,-80,59,62,7,-31,-19,-2,99,3,64,-20,-39,-9,-127,-53, 
  /* [10][0][][] */ -6,-77,46,-31,-74,6,-2,80,127,119,54,-28,-35,78,106,11, 
  /* [11][0][][] */ 44,-18,25,-103,30,-41,-119,-127,-70,81,25,-10,44,-19,22,-91, 
  /* [12][0][][] */ 6,-6,28,-20,-39,-10,-110,-11,-52,-59,-19,0,11,127,58,22, 
  /* [13][0][][] */ -66,-127,-42,36,8,-54,0,-41,92,-2,12,-39,57,35,91,22, 
  /* [14][0][][] */ -12,-65,56,37,39,39,14,127,39,68,-3,-33,15,66,-70,100, 
  /* [15][0][][] */ -7,-41,-9,33,2,-21,111,2,-10,-127,14,-56,-9,-32,-19,-33, 
  /* [16][0][][] */ 57,-72,-36,31,4,14,26,-39,124,61,91,7,16,100,66,127, 
  /* [17][0][][] */ -94,-80,65,114,122,56,41,-1,127,-54,21,-54,81,106,-71,40, 
  /* [18][0][][] */ -34,0,-3,34,-79,-2,1,43,-46,-12,-11,-42,2,-127,83,-42, 
  /* [19][0][][] */ 103,-91,79,-64,127,33,-115,93,88,-75,83,29,-13,38,21,123, 
  /* [20][0][][] */ 29,-7,59,-68,-1,-2,-43,23,-17,-58,95,-3,18,26,-21,127, 
  /* [21][0][][] */ -60,-7,12,-5,28,27,-73,-55,-20,46,-9,41,-127,-7,32,-43, 
  /* [22][0][][] */ 26,-19,23,-31,10,-73,14,-21,-127,33,-11,-42,-17,-10,66,-12, 
  /* [23][0][][] */ 12,3,25,-6,1,15,-7,-6,-9,-6,43,-19,127,8,12,-36, 
  /* [24][0][][] */ 9,18,5,-29,13,-1,64,1,-55,9,-12,-124,-32,-127,14,-27, 
  /* [25][0][][] */ -99,60,-63,-33,46,-41,-50,-127,-30,45,-3,-3,-37,-80,89,-26, 
  /* [26][0][][] */ 31,-8,35,-96,107,-11,1,3,127,-44,59,-6,-11,103,12,79, 
  /* [27][0][][] */ 95,-30,25,-30,-34,-51,5,-23,-26,28,-127,9,12,-17,-11,33, 
  /* [28][0][][] */ -112,-16,-127,-78,51,-14,65,-73,-4,35,-70,17,19,-12,-41,64, 
  /* [29][0][][] */ -48,-27,6,127,-13,10,-8,-30,-12,-14,-73,35,15,-57,16,-28, 
  /* [30][0][][] */ 86,-12,127,9,69,55,-45,55,-38,-74,99,-52,-19,23,-84,30, 
  /* [31][0][][] */ 18,-87,-5,-50,-14,-68,16,-42,7,37,97,26,-21,90,77,127, 
  /* [32][0][][] */ -11,88,-36,33,-127,22,-80,-52,-52,-28,3,65,18,60,47,63, 
  /* [33][0][][] */ 8,-33,11,90,-12,-15,28,-50,-127,49,47,-47,-9,-10,-4,97, 
  /* [34][0][][] */ 49,-24,15,7,76,-29,-115,-27,-51,127,-36,-19,-46,14,-29,14, 
  /* [35][0][][] */ 48,3,-28,-50,15,-127,-13,11,-39,10,-52,13,62,23,-7,62, 
  /* [36][0][][] */ 11,-1,-127,10,51,14,-28,27,-27,-21,7,-3,-4,19,-14,9, 
  /* [37][0][][] */ 16,-12,127,-12,-81,26,13,-77,-18,7,-56,33,35,-22,31,25, 
  /* [38][0][][] */ -127,33,5,32,51,86,5,-31,42,-40,104,-36,-45,4,-13,-25, 
  /* [39][0][][] */ -16,-7,18,35,33,-13,-127,32,12,26,-1,-36,-3,-24,-3,-5, 
  /* [40][0][][] */ -3,118,-32,127,32,48,78,50,-103,-37,-44,104,-14,40,-90,-41, 
  /* [41][0][][] */ 15,53,-54,-27,-49,10,127,89,-31,108,-38,7,9,66,59,-16, 
  /* [42][0][][] */ -8,-29,-45,-23,-10,-34,-108,61,45,-127,43,18,-37,36,-51,61, 
  /* [43][0][][] */ -55,0,45,-27,46,22,-77,-90,-23,35,-17,-9,-127,-1,16,-8, 
  /* [44][0][][] */ 40,47,-10,14,10,-17,-3,-18,127,2,12,55,33,67,12,43, 
  /* [45][0][][] */ -55,-114,41,-93,6,-15,-14,27,-38,-65,4,0,33,127,-50,124, 
  /* [46][0][][] */ -42,32,-13,110,-86,-16,10,-102,-127,45,-29,-18,-5,31,9,-56, 
  /* [47][0][][] */ -10,10,-122,127,-15,77,-18,-45,5,46,77,74,-23,-27,51,-20, 
  /* [48][0][][] */ 8,30,67,-103,55,-14,-34,-38,-57,38,58,-9,-36,79,127,16, 
  /* [49][0][][] */ -64,2,52,87,-43,-17,-73,12,-7,-79,-95,-71,7,-31,-121,-127, 
  /* [50][0][][] */ -9,98,-9,-127,57,-12,-36,66,119,-46,-63,11,-8,-67,49,-23, 
  /* [51][0][][] */ 7,-2,13,-21,40,-9,-51,-127,16,-69,19,14,0,2,-6,5, 
  /* [52][0][][] */ 10,-11,-19,21,33,-29,-69,88,-101,127,-24,-65,99,90,11,-37, 
  /* [53][0][][] */ -12,97,17,-103,-44,-5,33,-27,-80,-57,-44,36,9,-121,-127,-18, 
  /* [54][0][][] */ 7,4,26,37,43,-26,-2,-28,-1,32,-9,-24,-7,127,-44,-17, 
  /* [55][0][][] */ -105,127,64,-26,38,-6,-34,15,-45,-1,92,2,2,-10,116,-1, 
  /* [56][0][][] */ 41,3,15,-127,66,3,-11,38,56,-59,23,103,-47,14,84,51, 
  /* [57][0][][] */ -50,-31,1,104,-32,39,60,127,2,30,15,-63,8,47,-10,-9, 
  /* [58][0][][] */ 32,127,16,-97,31,54,-28,7,125,14,-7,108,1,-75,20,41, 
  /* [59][0][][] */ 42,47,54,-127,-44,3,17,-13,5,14,45,-39,-8,-101,-86,40, 
  /* [60][0][][] */ 53,3,125,-100,-81,127,74,-41,-44,47,-48,-42,65,3,51,3, 
  /* [61][0][][] */ -60,64,-53,-86,-84,-21,126,127,-44,70,-32,27,11,82,23,-15, 
  /* [62][0][][] */ 17,-2,-3,-3,-80,17,-67,19,-14,-44,-18,-42,40,-127,108,41, 
  /* [63][0][][] */ 13,-30,-7,-73,28,-17,-127,-120,-80,81,-16,-2,44,13,2,-30, 
  /* [64][0][][] */ -45,-24,36,68,94,-4,-36,-127,24,-121,-17,-58,-8,-30,-7,-11, 
  /* [65][0][][] */ -127,18,24,-69,15,72,49,-56,-81,30,41,4,9,11,5,-23, 
  /* [66][0][][] */ 111,29,111,37,-38,39,-28,44,-42,-26,52,-75,-37,56,-127,-30, 
  /* [67][0][][] */ 24,-49,-32,64,60,-39,-91,-117,41,-127,-53,-20,-92,34,-82,5, 
  /* [68][0][][] */ 53,-23,-91,70,-47,-77,1,-82,-29,-4,88,-99,-18,70,127,-39, 
  /* [69][0][][] */ -36,23,-53,59,-27,-107,34,76,12,15,50,-27,127,27,-35,-8, 
  /* [70][0][][] */ 22,16,-44,-35,-48,-7,127,105,-33,44,-38,15,7,40,25,-10, 
  /* [71][0][][] */ -4,-31,-28,-11,36,19,0,43,-16,-45,-22,4,5,-127,85,-8, 
  /* [72][0][][] */ 6,12,-11,26,21,-35,-41,-127,-3,55,-25,18,29,46,37,47, 
  /* [73][0][][] */ -38,-127,-22,-32,-96,-32,18,1,-38,-7,-48,-49,8,-53,45,-38, 
  /* [74][0][][] */ -38,30,74,119,3,13,-127,112,42,-26,-35,-41,-6,2,-21,-12, 
  /* [75][0][][] */ -42,37,-45,-14,-52,67,97,127,-9,41,11,-47,-94,39,1,19, 
  /* [76][0][][] */ 21,-22,-49,-39,49,-111,-127,-115,-15,-19,24,4,84,26,127,-9, 
  /* [77][0][][] */ -44,-3,-39,-21,-63,-2,-27,-41,127,11,-70,2,2,46,22,-87, 
  /* [78][0][][] */ -92,-119,14,104,101,35,-37,43,3,-83,-127,83,80,-21,89,71, 
  /* [79][0][][] */ 61,-10,42,-78,127,-4,61,40,95,20,7,28,8,-20,7,-25, 
  /* [80][0][][] */ -1,-57,63,-87,-19,-54,6,12,-76,-34,-10,-67,-2,127,-55,-1, 
  /* [81][0][][] */ -7,-10,34,27,-7,22,-11,-12,-1,-33,-31,-55,-31,56,-127,34, 
  /* [82][0][][] */ -63,3,70,-127,7,-4,-31,-32,11,-44,-29,-112,10,-64,-127,-8, 
  /* [83][0][][] */ 1,-5,-22,-49,-49,11,-27,45,-84,7,37,-64,10,-127,33,54, 
  /* [84][0][][] */ 127,27,21,71,-62,8,-84,29,-10,-37,113,-8,-73,20,89,-87, 
  /* [85][0][][] */ -13,-2,6,-53,36,-16,-37,127,-84,-111,-95,-27,-21,70,98,-112, 
  /* [86][0][][] */ 25,-11,28,2,-20,59,-29,63,-52,-49,26,-46,-6,-127,-47,-2, 
  /* [87][0][][] */ 120,-27,-5,-26,-62,-63,32,29,-41,41,-127,42,59,4,43,97, 
  /* [88][0][][] */ -22,41,-18,-2,10,-63,-32,22,127,-38,77,8,-39,7,110,-86, 
  /* [89][0][][] */ 43,58,-69,-20,-25,-7,22,-65,56,52,25,-25,-39,18,-35,-127, 
  /* [90][0][][] */ -14,-26,13,-91,-65,15,127,-57,90,-79,5,-68,36,-11,-41,-6, 
  /* [91][0][][] */ 14,-20,3,-127,-56,6,26,-30,-57,26,37,3,8,-33,-31,97, 
  /* [92][0][][] */ 8,-7,-8,20,36,-17,-62,-127,19,-59,0,-28,-40,-30,1,-23, 
  /* [93][0][][] */ 74,10,34,-127,-33,5,-16,17,39,-44,78,-3,-6,93,-21,48, 
  /* [94][0][][] */ -74,32,-65,1,44,-127,-22,22,-26,-55,89,-11,-13,-5,-12,4, 
  /* [95][0][][] */ -59,87,-13,-127,-14,-12,-30,-3,26,-44,-32,-35,7,13,-33,-8, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00071036088047549129, 0.00051599694415926933, 0.00050897861365228891, 0.00045644698548130691, 0.00069857749622315168, 0.00084779009921476245, 0.0014283028431236744, 0.0012553093256428838, 0.00023031112505123019, 0.00095534807769581676, 0.00076580280438065529, 0.0009148137760348618, 0.00051973445806652308, 0.00074943882646039128, 0.00025348225608468056, 0.0011587259359657764, 0.0006597973988391459, 0.00038853075238876045, 0.00070003879955038428, 0.00060288049280643463, 0.0010555473854765296, 0.0017281499458476901, 0.00049616670003160834, 0.0015431741485372186, 0.0018395549850538373, 0.00067102181492373347, 0.0005689366371370852, 0.00074470200343057513, 0.00063684349879622459, 0.00029138958780094981, 0.00018604303477331996, 0.00044445818639360368, 0.00053260743152350187, 0.00090489973081275821, 0.00061460171127691865, 0.00075585365993902087, 0.0012527697253972292, 0.0014061750844120979, 0.00045864016283303499, 0.0019141520606353879, 0.00046600581845268607, 0.00066201802110299468, 0.00026079316739924252, 0.0011080401018261909, 0.00043913489207625389, 0.00058684067334979773, 0.00071141385706141591, 0.00040640789666213095, 0.00023751841217745095, 0.00053081673104315996, 0.00067540531745180488, 0.00099895696621388197, 0.0014689506497234106, 0.00074968091212213039, 0.0013670707121491432, 0.00060729635879397392, 0.00068285106681287289, 0.00040537570021115243, 0.0011895570205524564, 0.00054459337843582034, 0.00082788133295252919, 0.00030101952143013477, 0.00070353236515074968, 0.00068628328153863549, 0.00079898920375853777, 0.00062999170040711761, 0.00062016810989007354, 0.00069935584906488657, 0.00089350895723327994, 0.0010144686093553901, 0.00081349367974326015, 0.00065436959266662598, 0.00041438205516897142, 0.00071385095361620188, 0.00079563917824998498, 0.0012580025941133499, 0.00077536929165944457, 0.00092786661116406322, 0.0009253394091501832, 0.00074030656833201647, 0.00038362719351425767, 0.00044239326962269843, 0.00063326890813186765, 0.00036306734546087682, 0.00092727644369006157, 0.00081905681872740388, 0.0010049242991954088, 0.00020327592210378498, 0.00047986343270167708, 0.0008122279541566968, 0.00060405861586332321, 0.0010861281771212816, 0.00092996482271701097, 0.00068800628650933504, 0.00087774835992604494, 0.00053125707199797034, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -1059, 2029, -12561, 29817, 21409, -119, -9816, -4197, 17368, -1019, 25250, 21529, -10109, 13344, 37430, -18978, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00045517183025367558, 0.00024756486527621746, 0.00028815277619287372, 0.00023530400358140469, 0.00036289030686020851, 0.00029222178272902966, 0.00029290345264598727, 0.0004348421934992075, 0.00016910424164962023, 0.00019875550060532987, 0.00037075596628710628, 0.00066011410672217607, 0.00040998662007041276, 0.000422413315391168, 0.00043022102909162641, 0.00035170730552636087, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 4,29,-9,11,38,84,-44,-30,44,-1,-4,3,0,5,19,63,8,-11,-13,-5,94,-52,-3,-23,-20,-49,-29,-100,2,-5,54,47,114,-10,25,-5,1,-10,-7,-3,-42,19,16,-22,22,-20,-10,18,-17,25,-12,-11,-31,-19,-3,6,55,30,-12,-23,-60,24,-24,-2,15,4,55,10,8,9,0,-32,-69,-14,-20,-1,6,-73,2,-19,33,9,-62,-41,26,-17,9,8,-9,-10,11,-38,32,21,0,127, 
  /* [1][0][][] */ 74,-92,44,76,-35,-50,-18,-27,-11,-103,-22,18,29,-69,-24,-29,-65,-6,-4,23,-31,-123,-39,35,127,-99,-68,22,-9,94,-9,67,28,23,-59,19,-7,-32,67,-23,-6,-65,63,-33,-49,13,72,-4,35,34,-19,-71,77,-80,37,-36,47,13,-15,-94,25,-57,32,-77,-25,-86,20,37,39,65,-61,17,-108,24,-35,75,37,97,-8,-30,55,-5,-83,5,-89,78,-6,48,-23,4,25,1,9,-33,34,-8, 
  /* [2][0][][] */ 22,13,8,-11,22,-10,-5,30,62,-10,13,58,1,7,44,-4,-19,-27,12,0,-5,-44,19,-35,1,-1,-25,21,-2,22,91,-55,11,-57,-17,44,14,127,-29,-20,2,-11,2,29,-37,-47,-60,25,28,25,-19,-27,20,11,14,-9,-29,3,0,24,8,7,54,87,17,-68,18,-64,-5,-21,-7,-5,-22,9,-10,11,13,53,16,12,17,79,35,-5,-10,-1,7,7,18,-2,-2,-44,-34,-2,3,58, 
  /* [3][0][][] */ -22,-47,-29,47,43,-35,3,-14,-7,24,14,1,-3,-7,42,-16,29,-46,42,22,-2,1,8,13,-21,41,4,-2,21,-31,48,-16,21,-6,-30,38,-8,0,-18,19,19,-74,27,-50,-33,-11,-10,14,-127,21,8,35,-119,-52,-16,-47,20,25,-6,50,-1,22,15,27,-9,-87,-41,15,55,-3,6,18,-42,22,3,-46,-44,-53,42,-38,13,-36,25,71,45,62,32,16,22,1,-10,7,-36,-7,-20,-29, 
  /* [4][0][][] */ -11,-34,7,-56,11,-15,-41,15,-5,-37,-32,-10,14,72,6,1,44,-10,6,4,-4,32,50,-2,5,2,24,3,19,-5,-2,-12,-38,10,10,9,29,-14,12,-5,5,16,-89,-25,33,-1,-13,-1,5,81,-3,-23,-18,10,22,1,-5,-16,28,32,6,1,2,-3,36,-112,22,-21,-56,14,-16,-7,-19,15,-10,27,-22,50,63,9,27,2,127,-42,31,-25,-14,-10,66,-3,-9,21,-23,29,-5,-37, 
  /* [5][0][][] */ -10,-10,-16,15,0,-6,-8,120,74,-17,-25,-40,-5,39,42,23,-22,-17,4,-36,-41,-5,27,-40,23,26,27,70,78,6,67,42,-61,29,-10,-13,-59,-41,-19,-25,-39,-8,-10,-7,68,10,16,18,14,8,-3,7,-33,2,17,8,-9,-12,-5,36,-56,18,-25,-46,10,16,-28,3,-16,13,9,-10,24,13,26,-12,-3,16,24,127,10,-70,40,33,-3,-14,28,-23,2,-40,12,-127,-38,-25,-3,-108, 
  /* [6][0][][] */ -25,-3,-11,-59,-1,-15,-29,10,3,30,-41,-1,45,-59,12,-8,3,-77,21,20,22,10,8,29,83,-4,5,2,31,-5,14,1,-25,0,-18,-10,30,19,45,28,-11,-19,-59,-24,2,-23,27,-127,17,33,8,10,15,8,-8,-27,64,-8,-8,16,23,18,6,4,34,71,27,-18,-44,-7,13,-14,15,-4,51,-2,-22,37,13,-2,-17,-8,47,-31,2,41,37,-47,35,-20,-38,-9,-10,14,1,20, 
  /* [7][0][][] */ 14,0,33,-37,-4,8,-3,-9,-18,-12,-14,-18,-2,-77,37,20,9,-18,-16,-9,4,-27,-33,5,-25,-5,8,-13,-3,4,7,2,-2,1,-23,-15,2,-24,-34,31,17,-22,-21,22,-17,9,-7,70,-4,13,-9,-21,-29,0,-15,-73,34,-10,-2,-1,-3,8,-4,-14,-32,48,8,-24,-1,1,-6,51,1,-5,-21,12,34,7,-4,-17,-2,-44,27,-4,-32,127,0,3,-38,-8,0,15,-25,-9,-11,1, 
  /* [8][0][][] */ -70,41,-67,6,34,18,-12,36,1,70,-68,1,52,59,64,-20,9,40,-87,5,6,22,-20,-10,-40,-23,37,-1,74,-117,21,-15,30,8,29,9,-31,23,-41,36,-7,25,-3,-122,-33,10,86,-22,-37,50,5,55,-127,91,23,1,37,-20,-19,-16,-8,-36,7,20,-37,44,45,-15,-15,3,47,95,-30,40,54,12,-2,-101,8,-45,9,-44,38,3,-89,5,45,-54,18,27,-37,13,43,1,-14,-2, 
  /* [9][0][][] */ 31,-77,-26,-23,23,41,-24,-1,41,-15,-4,19,-36,-9,5,22,-4,16,54,-22,3,16,-14,-36,36,23,33,-20,-33,-10,-33,5,-12,19,19,26,13,71,-20,6,5,11,-26,-105,23,-8,24,-127,-36,-11,-11,31,-6,11,-9,8,-33,37,-11,24,26,13,5,33,38,126,29,43,-3,-15,13,-22,-28,4,-19,7,74,2,28,18,-3,23,20,-45,9,24,4,-13,-62,22,-38,3,15,17,16,-17, 
  /* [10][0][][] */ 22,53,-25,45,61,-127,-11,-25,8,58,47,3,-25,24,12,-93,7,34,-25,46,-77,3,9,-19,-56,-18,-65,51,10,7,-5,41,-11,-10,18,-23,79,-15,-21,-8,-19,63,39,-18,-53,-19,-40,25,-23,-12,-29,-6,-12,3,17,1,-7,18,-30,-5,3,12,-15,20,7,50,52,17,8,1,24,42,-59,-16,-31,-5,5,7,-16,13,40,-29,-60,-34,61,-52,92,3,-21,12,27,-12,72,43,-19,-115, 
  /* [11][0][][] */ 53,36,-34,25,-17,29,56,-8,-6,-24,-29,-14,17,2,35,2,1,-10,-102,-9,9,10,20,-13,-47,-20,-11,2,9,13,13,-6,-3,11,2,19,12,8,-7,16,8,36,57,-102,24,-38,19,-3,-127,21,5,-54,33,19,-14,11,10,-7,5,6,12,-16,-9,6,-54,64,-25,15,10,-8,34,15,-58,-26,19,26,8,-38,-58,13,19,-10,95,47,10,-2,-16,-17,16,23,-13,-5,-9,16,-26,13, 
  /* [12][0][][] */ -34,-13,13,13,-11,41,24,-13,126,5,-13,5,-12,7,-48,-48,24,23,20,73,56,36,-18,-25,-1,19,20,-35,-127,6,31,-48,-7,-23,1,-13,16,4,38,-17,-49,-31,0,13,2,34,14,-12,16,0,-49,16,-3,0,19,-15,55,-25,12,11,16,-20,2,-16,6,40,-42,4,18,16,-8,-41,9,18,-76,15,17,-5,14,-64,-15,11,58,50,-24,-14,-22,-24,2,33,2,55,-11,-17,19,13, 
  /* [13][0][][] */ 27,-5,-37,32,25,5,5,-11,-14,6,-4,7,16,-16,12,-4,17,-74,-42,11,-10,-22,14,-2,7,12,-2,-9,-16,-36,-1,15,-7,8,18,48,14,2,5,3,1,8,19,44,19,19,-1,-127,17,-5,10,7,-18,0,20,2,-20,12,27,12,-5,16,-15,2,-4,-16,-20,-59,10,21,-9,-30,-20,31,-10,23,-26,-9,12,5,35,-17,-9,23,10,31,19,14,-4,4,31,-5,0,20,-10,-2, 
  /* [14][0][][] */ -107,-63,18,46,22,-31,-23,34,-43,11,-8,1,56,1,-125,6,86,-16,-15,27,-29,-27,36,19,-117,7,19,-18,-53,-87,-28,-2,7,7,5,-48,34,12,-20,31,33,32,-13,-38,-5,124,81,58,-127,61,15,29,-62,-24,46,-14,-11,3,57,61,33,57,22,43,-15,-16,-50,48,-2,90,-58,-76,-73,17,-3,59,-5,40,77,-3,69,-31,30,22,39,16,49,42,44,72,73,-16,-23,31,16,-31, 
  /* [15][0][][] */ 82,-5,41,-12,0,86,37,-27,-25,54,11,21,-87,-35,-14,39,23,33,28,-15,-3,6,-127,63,24,3,54,2,6,45,-55,-84,9,-64,38,-1,32,-53,-76,-104,8,2,1,61,-11,42,-12,-48,94,-49,-53,33,50,-122,48,-119,-22,-75,21,16,-123,4,13,6,77,-14,-55,40,-10,88,-35,21,42,18,-8,19,18,-54,56,-21,-23,1,38,95,-17,2,4,-55,0,18,76,-9,-69,53,21,-19, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.01934480294585228, 0.010521505959331989, 0.012246493250131607, 0.010000419802963734, 0.015422837808728218, 0.012419424951076508, 0.012448396533727646, 0.018480792641639709, 0.0071869301609694958, 0.0084471087902784348, 0.015757128596305847, 0.028054848313331604, 0.017424430698156357, 0.017952565103769302, 0.018284393474459648, 0.014947559684514999, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11521, -8681, 3400, 50003, -1874, -4314, -11112, 2550, -2902, 592, 2957, -1916, 984, -6668, 6332, -7152, -986, 16119, 25996, 2606, 3257, -2876, 357, -100, 19641, -1425, -845, -3383, -5613, -8128, 6857, -9286, -145, -2067, -118, 18170, 1675, -3610, 19698, 616, -530, 1868, -9840, -7431, -7396, 67522, -1070, 21241, 33833, -11926, -255, 7040, 8751, -107, -5738, 2003, -10322, 1199, 2037, -7315, -1216, -1233, -13262, -365, 1104, 16691, 28800, 28876, -11922, 269, -9611, -784, 53859, 9470, -170, 1079, 19695, 33443, -321, -3774, -1285, -5322, 385, -3177, 514, 1424, 989, -1070, 2079, -3786, -693, 182, -432, -516, 240, 50716, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001598730159457773, 0.00012317112123128027, 0.00022228287707548589, 4.1851548303384334e-05, 0.00013948790729045868, 0.00015334389172494411, 0.00030265309032984078, 8.0539721238892525e-05, 0.00011994288070127368, 0.00040855552651919425, 0.00016115378821268678, 0.00030894152587279677, 9.6257470431737602e-05, 0.00041170945041812956, 0.00016304236487485468, 0.0001070166690624319, 8.4124418208375573e-05, 0.00027309721917845309, 5.9595029597403482e-05, 0.00022698820976074785, 4.3794087105197832e-05, 0.00016994601173792034, 0.00011725089279934764, 0.00034760971902869642, 0.00018090501544065773, 0.00024890428176149726, 0.0001173810160253197, 0.00017266380018554628, 0.00012328092998359352, 8.637689461465925e-05, 0.00012404874723870307, 0.00016132567543536425, 0.00012306399003136903, 0.00010528031998546794, 0.00019946246175095439, 0.00012902758317068219, 0.00041077355854213238, 0.00012436017277650535, 6.3252446125261486e-05, 0.00013829083763994277, 0.00023269167286343873, 0.00029940839158371091, 0.00034425730700604618, 0.00015494110994040966, 0.0001726052287267521, 5.2674131438834593e-05, 0.00018790835747495294, 0.00016335003601852804, 7.7643380791414529e-05, 0.0001884803205030039, 0.00019771860388573259, 0.00017166405450552702, 0.0002087130123982206, 0.00033840176183730364, 0.00026586628518998623, 0.00037057904410175979, 0.0003828333574347198, 0.00019388090004213154, 9.5136150775942951e-05, 7.9390774772036821e-05, 0.00030499501735903323, 0.00012795731890946627, 0.0002640934253577143, 0.00013071090506855398, 0.00021355762146413326, 0.00017114297952502966, 8.0348982010036707e-05, 6.1703351093456149e-05, 0.00030832630000077188, 0.00023711648827884346, 0.0001929806312546134, 0.00010256403766106814, 0.00010768347419798374, 0.00014611176447942853, 0.00012593914289027452, 0.00022476937738247216, 0.00056825001956894994, 4.7493140300503001e-05, 0.0002581362787168473, 0.00049823435256257653, 0.00015811507182661444, 0.00039394985651597381, 0.00015985751815605909, 0.00014283934433478862, 0.00011904681741725653, 9.1121837613172829e-05, 0.00011721262126229703, 0.00015212102152872831, 0.00019119233184028417, 8.7080356024671346e-05, 0.00018321012612432241, 0.0001091466547222808, 0.00013312033843249083, 0.00040072263800539076, 0.0052322051487863064, 7.4215269705746323e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,2,-22,107,-16,20,-63,-55,17,-6,99,-9,5,-9,-5,55,4,16,-29,2,72,3,32,-35,1,19,44,48,23,13,23,49,-8,29,8,-14,3,49,-65,-26,23,9,27,18,-83,-55,27,-6,-12,-21,-9,-5,50,6,-8,3,-5,-34,26,-29,27,-4,127,28,-13,-11,10,-53,63,35,2,-8,76,-33,71,3,16,-126,29,67,1,13,127,-15,38,30,-25,-18,35,-4,-13,79,1,19,-2,12, -50,12,-9,11,53,-6,-10,-127,39,14,-127,-5,-15,-12,4,97,17,-30,-14,-15,77,-96,127,25,-62,-30,-103,-15,27,36,-49,17,114,14,-15,0,-24,127,-70,-127,11,-19,-30,12,46,-127,127,-46,-77,48,48,8,39,-64,31,58,37,45,-99,85,127,34,5,-20,44,-39,-95,-1,36,-30,-19,44,-46,-48,105,-5,-30,-59,-32,67,-68,59,-14,9,-11,49,57,-41,-29,55,-12,72,-127,-33,24,-127, 0,-4,-23,-76,9,21,36,19,-2,-1,5,63,3,-11,-11,8,-14,16,-14,15,6,26,27,-35,1,-30,11,9,-7,5,45,-79,46,21,6,-22,10,5,-33,-20,10,2,-16,9,22,-33,23,-1,6,-10,5,-4,5,6,-3,7,-10,46,4,2,9,-15,3,-17,-26,-17,33,-50,-105,-6,40,-22,-127,-25,-9,15,10,-11,5,11,-14,20,-38,-3,-42,20,25,37,-26,-13,26,-13,17,5,-3,-47, 
  /* [0][1][][] */ -42,56,-18,39,-86,-16,-11,-44,25,97,-45,-22,-31,-26,-7,63,127,-24,-91,-14,59,-127,-32,16,-35,-45,-127,-4,40,37,-50,27,-127,-76,-58,4,65,-5,-53,45,-17,87,0,-3,35,-49,-10,-32,127,44,-3,22,43,9,-38,-18,30,10,-124,127,-36,-89,20,127,-59,-35,-83,124,-38,127,-16,53,-35,-55,38,8,-35,-70,127,47,127,35,7,-2,127,28,-97,47,-38,-35,-100,39,98,104,28,-59, 127,127,127,127,-47,-127,127,23,127,-127,15,-127,-103,127,127,127,-15,-127,-64,-127,127,23,-66,127,127,127,-56,-127,127,127,-127,127,-7,-127,-121,127,-127,-44,95,111,-127,-127,127,127,127,-114,-104,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-109,-28,-70,-66,127,127,-69,127,127,-105,-127,127,-42,127,-127,-127,-127,127,-76,127,-44,127,79,127,-39,-127,-24,-107,-127,-124,-21,-127,-19,-127,-127,118, -25,65,-37,1,127,73,-22,49,5,26,-12,-4,-27,-29,-13,-6,-105,-21,-127,37,33,78,-14,-116,-34,-38,124,74,10,33,71,10,119,-48,127,-3,54,5,-89,14,36,22,-23,1,-23,-52,-11,-44,81,11,-12,41,-8,-5,-77,-14,23,21,127,-90,4,127,0,-36,-110,-29,-72,99,14,-15,112,24,-18,-59,13,46,-30,-9,-44,-5,-46,8,47,25,-91,33,127,-46,31,-21,127,-11,-111,35,33,17, 
  /* [0][2][][] */ -5,-38,-22,-62,-5,14,41,31,-1,11,-16,52,25,-35,-9,2,41,3,13,19,-12,30,-17,-25,2,-22,7,2,-6,-6,48,-75,-37,67,-27,-25,31,-34,-68,17,10,11,-34,20,12,-76,-12,-1,-10,5,16,-7,8,0,-21,6,-6,46,-50,34,-7,-10,4,18,-4,-9,22,-56,-58,12,-19,-12,-116,-31,1,16,14,-11,57,18,23,22,-38,17,11,26,-20,11,3,23,25,-5,21,41,-7,-28, -28,-10,-27,25,-43,78,-24,63,7,-4,55,-12,127,-6,-20,-20,1,-40,-56,21,-21,79,-42,-110,-50,-46,96,68,16,46,52,0,-118,64,-11,-23,-28,-26,-127,-3,44,-13,-15,37,-27,-45,-16,-49,-62,27,68,26,-11,-81,31,52,19,27,72,-57,20,-56,-8,1,20,-26,-127,-56,-12,-27,-63,22,34,-46,-30,-10,-46,23,-56,1,48,32,18,10,5,60,-96,127,16,127,-30,-17,116,-21,46,80, -9,-33,-26,28,15,63,-42,14,4,-4,1,13,12,-48,-10,-19,-44,-4,15,18,-25,4,-22,4,-5,20,-5,50,0,-6,33,31,20,40,22,-22,-5,-26,-32,9,11,-12,21,9,-73,-34,-13,3,-2,-18,-1,-4,-8,9,-17,-5,-2,-50,12,-30,-22,50,9,-28,-9,-1,35,-55,46,8,52,-20,26,-55,-19,20,9,11,-4,23,-30,29,87,-14,-18,54,40,-8,109,12,3,-20,10,-22,-7,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0067946030758321285, 0.0052347728051245213, 0.0094470223411917686, 0.0017786907264962792, 0.0059282360598444939, 0.0065171155147254467, 0.012862755917012691, 0.0034229380544275045, 0.0050975722260773182, 0.017363609746098518, 0.0068490360863506794, 0.013130014762282372, 0.0040909424424171448, 0.017497651278972626, 0.0069293002597987652, 0.0045482083223760128, 0.0035752877593040466, 0.011606631800532341, 0.002532788785174489, 0.009646998718380928, 0.0018612486310303211, 0.0072227055206894875, 0.0049831629730761051, 0.014773412607610226, 0.0076884627342224121, 0.010578432120382786, 0.0049886931665241718, 0.0073382114060223103, 0.0052394391968846321, 0.0036710179410874844, 0.0052720718085765839, 0.0068563409149646759, 0.0052302195690572262, 0.0044744135811924934, 0.0084771541878581047, 0.005483672022819519, 0.017457876354455948, 0.0052853072993457317, 0.0026882288511842489, 0.0058773602358996868, 0.0098893959075212479, 0.012724855914711952, 0.014630935154855251, 0.0065849972888827324, 0.0073357219807803631, 0.0022386505734175444, 0.0079861050471663475, 0.0069423764944076538, 0.0032998437527567148, 0.0080104134976863861, 0.0084030404686927795, 0.0072957221418619156, 0.0088703026995062828, 0.0143820745870471, 0.011299316771328449, 0.015749609097838402, 0.016270417720079422, 0.0082399379462003708, 0.0040432862006127834, 0.0033741078805178404, 0.012962288223206997, 0.0054381862282752991, 0.011223970912396908, 0.0055552134290337563, 0.0090761985629796982, 0.0072735766880214214, 0.0034148315899074078, 0.0026223924942314625, 0.013103867881000042, 0.010077450424432755, 0.0082016764208674431, 0.0043589714914560318, 0.0045765475369989872, 0.0062097497284412384, 0.00535241374745965, 0.0095526985824108124, 0.024150624871253967, 0.0020184584427624941, 0.010970791801810265, 0.02117495983839035, 0.0067198905162513256, 0.016742868348956108, 0.0067939446307718754, 0.0060706720687448978, 0.0050594895146787167, 0.0038726781494915485, 0.0049815364181995392, 0.0064651430584490299, 0.0081256739795207977, 0.0037009150255471468, 0.0077864304184913635, 0.0046387328766286373, 0.0056576142087578773, 0.017030712217092514, 0.22236871719360352, 0.0031541488133370876, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 18443, 1222, 8872, -661, 5248, 6332, 20576, 6628, -1730, 20384, 7612, 1603, 6978, 32752, -489, -2195, 11111, 9288, 2350, -188, -674, 16017, 6368, 5238, 10590, 8169, 4871, 5448, -29, -27, 9081, 8345, 14037, 1979, 7004, -508, 16275, 8543, 926, 6998, 1072, 14212, 19120, 5676, 3171, 14207, 19304, 5291, 5672, 4638, 336, -1235, 14085, 7488, 9098, 13454, -415, 7825, 3241, 4415, 16794, 9549, 3814, 7606, 9713, 4187, 7782, -1098, 19125, 6696, 11797, -1146, -1589, 3361, 2921, 3931, 25211, 16537, 20744, -3370, 6584, -5988, -2434, 693, 9058, 5629, 7457, 5323, 11292, 5968, 10061, 4100, 17521, 24599, -13029, 17967, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00014133079093880951, 0.00023913512995932251, 0.00015245542454067618, 0.00084010499995201826, 0.00030739681096747518, 0.00014404300600290298, 0.00015241117216646671, 0.0005341246142052114, 0.00028235718491487205, 8.9704808488022536e-05, 0.00019343820167705417, 0.00051610858645290136, 0.00038720565498806536, 0.00014530390035361052, 0.00022027784143574536, 0.00030169135425239801, 0.0002033773489529267, 0.0002485011937096715, 0.00019614450866356492, 0.00059217854868620634, 0.0003816361422650516, 0.00015425596211571246, 0.00023520417744293809, 0.00015033103409223258, 0.00017043521802406758, 0.00025069116964004934, 0.00029023911338299513, 0.00016494609008077532, 0.00058710837038233876, 0.00027677352773025632, 0.00015742231335025281, 0.0002198369475081563, 0.00013987169950269163, 0.00055823172442615032, 0.00023685954511165619, 0.00050666701281443238, 0.00013936527830082923, 0.00029806263046339154, 0.00051205535419285297, 0.00013795176346320659, 0.00048078459803946316, 0.00013193418271839619, 0.00011265390639891848, 0.00013141952513251454, 0.00033983244793489575, 0.00023160487762652338, 0.00014547680621035397, 0.00027413363568484783, 0.00027151618269272149, 0.00019279039406683296, 0.00028642499819397926, 0.00055437599075958133, 0.00018882258154917508, 0.00021195881708990782, 0.0002550878853071481, 0.00013743808085564524, 0.00036724808160215616, 0.00022079897462390363, 0.0002354034804739058, 0.00035655774991028011, 0.00010368536459282041, 0.00014592630031984299, 0.00027986036729998887, 0.00036051016650162637, 0.00010759558063000441, 0.00027289753779768944, 0.00024425677838735282, 0.00032886245753616095, 0.00014140755229163915, 0.00016189966117963195, 0.00016554468311369419, 0.00038619514089077711, 0.00022223369160201401, 0.00039605551864951849, 0.00014448378351517022, 0.00031556317117065191, 9.6260431746486574e-05, 0.00027202270575799048, 7.9942030424717814e-05, 0.00036541727604344487, 0.00017290774849243462, 0.00034881816827692091, 0.00016819236043374985, 0.0003606494574341923, 0.00017706590006127954, 0.00027727830456569791, 0.00022032807464711368, 0.00026143013383261859, 0.00014750451373402029, 0.00026446345145814121, 0.00013397583097685128, 0.00042356568155810237, 0.00012198630429338664, 0.00011234758858336136, 0.00022615795023739338, 0.00018267678387928754, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,-40,127,70,51,-23,31,-26,110,9,-57,-70,42,48,-27,-77, 
  /* [1][0][][] */ 53,67,-24,-6,51,-11,4,38,53,86,-51,127,2,-22,99,-60, 
  /* [2][0][][] */ 32,-86,40,-12,-67,35,-62,95,-104,-117,0,51,-39,-127,79,-108, 
  /* [3][0][][] */ 119,127,-7,38,-101,-18,-61,-36,-20,1,97,-62,-65,76,-30,-14, 
  /* [4][0][][] */ -24,-19,27,-4,-43,33,-27,47,-83,-55,3,-18,-6,-127,49,7, 
  /* [5][0][][] */ 127,-46,-15,-5,-37,-117,-21,9,-10,2,-118,-19,45,-19,-6,73, 
  /* [6][0][][] */ -104,-77,1,115,-56,-2,-60,9,-127,-56,-85,-32,12,34,-29,99, 
  /* [7][0][][] */ -20,44,-82,30,65,-127,-11,43,22,-14,36,-5,-8,-1,-48,27, 
  /* [8][0][][] */ 28,-50,-9,-7,3,34,-46,-62,-15,24,-66,1,-127,-11,-7,16, 
  /* [9][0][][] */ 30,-69,26,127,-31,-14,-5,-65,110,-80,-22,-41,5,40,-51,23, 
  /* [10][0][][] */ -96,-33,-1,-55,124,62,36,97,127,-89,-86,12,74,-117,-91,97, 
  /* [11][0][][] */ 37,-18,-127,9,51,21,-28,37,-16,-47,-17,0,-9,18,-33,14, 
  /* [12][0][][] */ 127,-101,38,20,14,-34,-42,-34,44,25,-106,-9,-49,-27,30,38, 
  /* [13][0][][] */ 87,-73,-34,-87,8,-37,-102,-60,-12,-127,-17,8,27,-54,-40,43, 
  /* [14][0][][] */ -62,23,-105,-56,80,-127,68,-58,74,65,-5,-110,31,108,-13,32, 
  /* [15][0][][] */ 32,27,61,26,65,-54,-32,-7,20,-59,-85,23,-127,-49,24,77, 
  /* [16][0][][] */ -111,60,17,23,-5,85,59,70,-15,44,127,7,30,-15,25,-45, 
  /* [17][0][][] */ -32,-8,-34,-26,-21,20,44,59,-14,127,-6,9,-3,63,46,-9, 
  /* [18][0][][] */ 1,121,-50,-7,10,19,34,-61,20,127,-39,101,24,-31,23,-74, 
  /* [19][0][][] */ 2,-24,32,13,5,41,-19,12,14,4,-46,-5,-127,8,-10,26, 
  /* [20][0][][] */ 83,-37,-18,-82,-16,7,27,-69,-39,24,-127,-10,24,4,58,25, 
  /* [21][0][][] */ 44,13,127,35,5,52,44,0,32,48,-23,-2,-7,64,17,14, 
  /* [22][0][][] */ 75,-2,20,25,-14,0,30,127,26,15,-14,61,-11,24,64,26, 
  /* [23][0][][] */ -33,11,-78,10,17,-127,16,36,-12,-31,-23,-24,-92,3,-33,43, 
  /* [24][0][][] */ 34,-60,-4,-76,37,4,-20,-16,36,35,71,97,-40,86,127,46, 
  /* [25][0][][] */ -109,-108,-32,18,-3,-27,14,-47,-113,14,-127,7,30,-1,14,50, 
  /* [26][0][][] */ 14,-5,28,-8,-27,-1,-45,41,-91,-61,-13,2,5,-127,33,-6, 
  /* [27][0][][] */ -118,29,-24,37,47,2,14,29,46,-19,127,20,-29,4,-9,-41, 
  /* [28][0][][] */ -23,-22,16,28,-2,1,-2,75,22,12,-25,-3,-127,-14,-12,30, 
  /* [29][0][][] */ -11,46,24,-36,30,-16,15,-38,-127,29,-37,6,-11,19,-74,11, 
  /* [30][0][][] */ -3,4,-127,-37,41,-76,4,20,-29,-22,-20,-29,-57,-30,5,5, 
  /* [31][0][][] */ 111,-9,-127,-11,49,4,-51,85,1,5,-81,-35,28,-3,-89,34, 
  /* [32][0][][] */ -127,50,9,37,28,62,8,7,20,-12,105,6,-44,-8,-10,-13, 
  /* [33][0][][] */ 10,-34,127,-28,-75,4,23,-35,-8,21,-17,11,-12,6,70,21, 
  /* [34][0][][] */ 9,-47,-15,-86,-1,-24,23,21,-12,-45,-20,-127,21,4,51,11, 
  /* [35][0][][] */ -2,-57,33,43,43,-24,14,-18,-127,40,-13,35,-17,124,-30,-35, 
  /* [36][0][][] */ -127,21,-43,22,-30,26,30,58,4,51,87,7,3,-8,0,-48, 
  /* [37][0][][] */ -33,-6,127,-46,-90,-66,32,-23,4,13,14,2,-4,-51,68,20, 
  /* [38][0][][] */ 9,-13,6,49,22,-31,-55,-6,-25,-20,67,-7,127,21,-15,-2, 
  /* [39][0][][] */ -48,25,-18,-67,-44,-127,60,104,-40,-31,-9,-51,1,36,48,99, 
  /* [40][0][][] */ 59,5,-34,-11,-4,93,-7,5,11,4,26,11,127,4,-23,-11, 
  /* [41][0][][] */ -6,17,-41,-127,20,-18,-39,-95,4,-50,6,-64,-8,-8,-20,27, 
  /* [42][0][][] */ 41,42,18,116,-95,3,-126,-5,-67,-71,71,-79,-34,127,-41,3, 
  /* [43][0][][] */ 30,127,-30,116,21,10,48,-72,-40,63,-14,23,9,-46,52,42, 
  /* [44][0][][] */ -19,-31,-127,19,45,60,-47,40,-28,-33,27,-24,0,-33,-60,7, 
  /* [45][0][][] */ -11,6,-15,-127,-30,1,40,2,-24,28,-15,10,11,-69,13,-20, 
  /* [46][0][][] */ 13,33,51,-23,9,23,-47,36,31,-50,-18,6,20,127,33,-21, 
  /* [47][0][][] */ 30,-33,30,-46,-45,1,-72,67,-19,-44,11,29,3,-127,32,18, 
  /* [48][0][][] */ 24,-21,13,-127,-12,-13,-8,14,16,-36,15,-19,11,42,3,65, 
  /* [49][0][][] */ 27,-46,0,127,73,7,-21,43,-57,-8,33,32,-11,45,122,-1, 
  /* [50][0][][] */ 0,-44,80,-44,-3,124,-33,-53,52,-40,127,16,117,14,-16,-61, 
  /* [51][0][][] */ 26,34,29,31,12,-1,-47,15,50,-1,-2,127,6,27,29,-66, 
  /* [52][0][][] */ -33,78,100,15,27,-32,20,-52,-25,11,22,35,-6,60,-127,-8, 
  /* [53][0][][] */ -5,-1,-39,-127,-44,-6,-1,-18,-3,5,1,-3,30,3,47,20, 
  /* [54][0][][] */ 27,17,-47,-54,26,-12,-4,32,48,-35,-12,-31,-15,127,48,63, 
  /* [55][0][][] */ -14,-41,-29,-13,26,-21,-4,-127,25,-64,6,-12,-43,-69,-28,-35, 
  /* [56][0][][] */ 39,48,21,46,-4,-26,11,127,22,-20,-8,-32,65,-20,-36,34, 
  /* [57][0][][] */ 74,-49,127,-8,-44,-28,10,-20,31,14,-81,30,29,-30,50,-2, 
  /* [58][0][][] */ 68,81,2,109,-127,0,-7,17,-17,53,112,-27,-93,-67,-57,-112, 
  /* [59][0][][] */ 108,-53,0,23,-30,-3,-26,-3,-38,27,-127,-26,-1,0,-25,-8, 
  /* [60][0][][] */ -127,19,-14,6,6,37,20,32,15,33,94,-6,-55,13,43,-41, 
  /* [61][0][][] */ -72,67,25,69,33,12,-127,-65,124,-123,95,14,70,-53,-91,-79, 
  /* [62][0][][] */ -3,-43,-126,68,73,127,27,125,35,-46,59,-24,-67,-9,-112,-47, 
  /* [63][0][][] */ -40,16,127,-55,-59,-62,40,-20,11,16,10,15,-3,-41,77,18, 
  /* [64][0][][] */ 18,62,-23,24,54,-2,103,-127,-17,113,11,-12,-26,-119,-18,60, 
  /* [65][0][][] */ 5,8,27,-20,70,15,0,-127,-13,-54,-29,-60,4,-36,47,10, 
  /* [66][0][][] */ -127,3,-16,8,-41,21,8,-51,-74,-41,-80,40,54,28,55,85, 
  /* [67][0][][] */ 6,-47,19,127,16,-5,-35,33,65,14,-16,-14,-24,-26,-83,-34, 
  /* [68][0][][] */ 22,-14,2,127,-46,-14,-4,-18,-53,23,8,-17,-11,-70,-17,-34, 
  /* [69][0][][] */ 48,59,48,95,50,30,44,-127,32,75,35,16,2,-2,57,-12, 
  /* [70][0][][] */ -37,-74,17,-67,127,-26,59,-9,82,-7,116,-63,31,96,71,124, 
  /* [71][0][][] */ 2,36,5,79,39,-127,-33,77,35,-93,16,6,12,-67,-58,32, 
  /* [72][0][][] */ -127,-44,-35,36,7,19,-35,37,-42,-28,-114,68,61,14,20,120, 
  /* [73][0][][] */ -5,-13,-25,47,13,-35,-15,-16,63,1,-3,-22,14,127,-33,-40, 
  /* [74][0][][] */ 118,-34,31,-52,-82,-10,51,6,-73,-5,-127,52,-116,-12,33,78, 
  /* [75][0][][] */ -26,-5,-13,127,-31,24,-3,-34,-62,16,-6,-32,-3,-61,-33,-44, 
  /* [76][0][][] */ -2,-25,-8,37,24,11,-25,-126,9,-127,7,27,-33,-20,28,-32, 
  /* [77][0][][] */ 127,-6,33,40,-41,-38,-45,-6,39,-28,-46,42,44,6,-70,56, 
  /* [78][0][][] */ -11,-11,60,8,22,-14,-64,39,59,-11,-46,-32,17,127,59,-47, 
  /* [79][0][][] */ -4,15,46,17,42,58,-59,-59,8,-52,70,-14,127,-21,-19,-33, 
  /* [80][0][][] */ -111,-83,-49,127,9,34,16,-23,-63,19,-58,24,35,-64,-9,11, 
  /* [81][0][][] */ 26,-6,-65,37,127,73,-63,-31,-10,-125,6,-89,-56,1,-100,12, 
  /* [82][0][][] */ 127,115,-20,33,-122,-27,-57,-12,-73,-17,81,-58,-49,71,-9,-27, 
  /* [83][0][][] */ 127,45,6,-25,9,-18,-8,18,28,17,99,-44,-47,-30,-19,-76, 
  /* [84][0][][] */ 32,-95,-113,-44,18,6,6,-127,-65,-86,17,17,-7,-11,-24,-14, 
  /* [85][0][][] */ -27,4,-80,-72,-4,-1,72,91,-16,127,5,-34,52,86,85,-10, 
  /* [86][0][][] */ 62,-31,-3,2,-17,-29,-20,-26,1,-11,-127,3,11,35,-19,11, 
  /* [87][0][][] */ -46,35,35,-68,-41,72,-33,68,-28,-52,24,11,30,-127,6,6, 
  /* [88][0][][] */ 11,-54,-115,-67,73,-24,-44,-127,18,-38,-46,-24,-19,8,32,-26, 
  /* [89][0][][] */ -14,-13,10,-127,34,-3,-88,84,100,-122,30,13,3,77,43,40, 
  /* [90][0][][] */ -50,-4,-60,80,51,9,90,-121,82,127,-40,36,-8,-15,-40,-57, 
  /* [91][0][][] */ 30,-17,-36,-8,4,-127,-22,3,-17,-12,-46,4,33,-10,0,22, 
  /* [92][0][][] */ 24,-8,127,69,49,10,7,31,-14,26,-55,4,19,63,-3,-16, 
  /* [93][0][][] */ 127,-28,-22,-13,-27,-63,-17,20,-11,24,-126,-26,19,63,9,44, 
  /* [94][0][][] */ 26,-17,49,85,126,-35,-5,61,3,-10,-1,65,-12,127,-30,-93, 
  /* [95][0][][] */ -97,14,51,55,9,62,9,12,17,6,127,-2,-31,48,-22,-56, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00052792730275541544, 0.00089326582383364439, 0.00056948227575048804, 0.0031381298322230577, 0.0011482506524771452, 0.00053805852076038718, 0.0005693169659934938, 0.0019951700232923031, 0.0010547175770625472, 0.0003350835177116096, 0.00072256941348314285, 0.0019278730032965541, 0.0014463687548413873, 0.00054276845185086131, 0.00082282628864049911, 0.0011269384995102882, 0.0007596961222589016, 0.00092825182946398854, 0.00073267857078462839, 0.0022120249923318624, 0.0014255644055083394, 0.00057620799634605646, 0.00087858212646096945, 0.00056154682533815503, 0.00063664402114227414, 0.00093643227592110634, 0.00108415971044451, 0.00061613996513187885, 0.0021930858492851257, 0.0010338603751733899, 0.0005880356184206903, 0.00082117936108261347, 0.00052247702842578292, 0.0020852198358625174, 0.000884765584487468, 0.0018926048651337624, 0.00052058533765375614, 0.0011133836815133691, 0.0019127324922010303, 0.0005153052625246346, 0.0017959236865863204, 0.00049282721010968089, 0.00042080762796103954, 0.00049090472748503089, 0.0012694108299911022, 0.00086513732094317675, 0.00054341432405635715, 0.0010239992989227176, 0.0010142220417037606, 0.00072014960460364819, 0.0010699124541133642, 0.0020708171650767326, 0.00070532824611291289, 0.00079175137216225266, 0.00095285580027848482, 0.00051338644698262215, 0.0013718191767111421, 0.00082477292744442821, 0.0008793266024440527, 0.0013318865094333887, 0.00038730649976059794, 0.00054509338224306703, 0.0010453909635543823, 0.0013466504169628024, 0.00040191275184042752, 0.0010193820344284177, 0.0009123972849920392, 0.001228433451615274, 0.00052821403369307518, 0.00060476030921563506, 0.00061837595421820879, 0.0014425941044464707, 0.00083013216499239206, 0.001479426515288651, 0.00053970498265698552, 0.0011787553085014224, 0.00035957139334641397, 0.0010161141399294138, 0.00029861560324206948, 0.0013649803586304188, 0.00064587994711473584, 0.0013029760448262095, 0.00062826607609167695, 0.001347170677036047, 0.00066141231218352914, 0.0010357459541410208, 0.00082301389193162322, 0.00097654666751623154, 0.00055098865414038301, 0.00098787725437432528, 0.00050045357784256339, 0.0015821880660951138, 0.00045566787593998015, 0.00041966341086663306, 0.00084479083307087421, 0.00068237120285630226, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -40292, 5148, 2742, -6237, 2089, -5296, -8264, -44299, 217, 28494, 30923, -5839, -2846, -20719, 32462, -42640, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00079649803228676319, 0.00086004816694185138, 0.0010524273384362459, 0.001028437283821404, 0.0010066620307043195, 0.0012298603542149067, 0.00092130131088197231, 0.00053120922530069947, 0.00058106327196583152, 0.00051279243780300021, 0.00078732927795499563, 0.00060562480939552188, 0.0010708968620747328, 0.0013241011183708906, 0.00069601688301190734, 0.00054754153825342655, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -19,1,-35,15,31,-1,3,112,-49,15,40,4,16,-15,-3,14,7,-10,-13,-5,61,-1,13,127,-21,88,-1,-11,32,-17,22,-33,-17,50,18,-53,12,35,23,-8,-110,-21,21,36,30,23,-122,-61, 
  /* [1][0][][] */ -30,-12,13,17,-29,7,-1,44,-54,-38,2,-42,-17,-17,-1,-9,-23,123,-15,24,3,5,-22,-12,16,-42,15,22,-26,-81,-37,22,-16,-3,25,-3,-5,-40,-1,23,-13,-27,127,13,23,-8,19,-5, 
  /* [2][0][][] */ -21,-7,-12,-36,-1,-65,10,-21,3,11,9,31,14,12,-10,13,-5,-22,-20,-13,-1,0,-1,-127,-8,75,-17,2,0,-17,-1,-7,-11,54,13,0,19,9,25,3,-41,4,-19,-12,-5,-6,15,0, 
  /* [3][0][][] */ -7,30,9,-32,-1,1,0,-8,-17,-3,-1,31,-127,5,-8,0,2,-3,-16,-2,-28,8,5,14,1,-12,-1,20,-9,19,1,18,3,1,20,21,-7,28,36,8,9,4,26,-26,5,0,3,20, 
  /* [4][0][][] */ 31,-29,11,9,22,31,19,-28,-26,-2,-11,-16,-1,14,5,17,18,-9,-78,6,-4,5,12,67,1,-27,6,41,9,-70,13,9,16,-38,35,-127,13,35,-5,24,-20,21,12,-21,-18,-18,11,7, 
  /* [5][0][][] */ 28,0,-18,61,3,-7,8,22,5,-1,27,16,3,47,0,-1,-30,22,28,-1,11,-3,3,-25,1,-52,-6,-19,-4,-8,8,14,53,-127,3,34,-19,-11,12,2,-88,56,17,-3,-13,3,-99,-13, 
  /* [6][0][][] */ 21,-7,5,12,-12,-6,0,-15,1,9,-3,14,-11,6,9,4,-3,-5,127,8,5,14,15,-33,3,1,23,-15,-11,-6,-1,6,2,-10,26,-38,-4,-49,65,17,3,-8,-8,8,-19,2,8,-14, 
  /* [7][0][][] */ -45,-21,-14,34,-15,83,-12,51,-6,35,-2,127,85,-6,-14,-7,2,-23,-13,-16,-33,-7,-21,74,-19,-38,-56,-29,-10,-14,-13,-11,4,3,-31,1,9,-60,107,5,27,25,-74,-71,27,-8,3,22, 
  /* [8][0][][] */ -51,-36,-10,5,-5,6,-2,29,-3,-67,7,46,43,4,4,4,-16,55,-36,14,-47,14,-7,-15,-3,2,9,44,-13,112,-14,18,0,-3,-11,-127,-101,55,36,35,16,0,104,-28,3,22,22,27, 
  /* [9][0][][] */ -23,5,5,33,20,-33,-3,-6,69,-38,-3,62,-56,0,8,-1,-20,27,-35,-24,52,6,-16,-18,2,4,49,-31,13,10,15,1,0,18,78,-101,-14,-127,-105,3,-30,26,61,14,-7,12,-15,-51, 
  /* [10][0][][] */ -22,-6,-29,-127,43,87,8,-9,0,32,17,10,46,-45,-47,23,30,-44,52,-31,33,-31,43,49,-39,-94,1,-33,41,33,43,-35,-33,-83,26,-4,12,-39,8,-35,-35,-59,-12,5,13,13,4,-36, 
  /* [11][0][][] */ 2,60,-14,63,28,-67,-72,-20,-1,64,-20,12,-9,59,3,-75,24,44,-4,-12,-54,-102,8,4,-3,-35,17,-23,48,-30,22,-80,36,-17,-36,-82,91,17,-2,-127,-3,57,97,-74,-4,-46,27,28, 
  /* [12][0][][] */ 127,-7,-15,9,3,20,11,105,20,-15,-63,-33,-2,12,-28,0,-9,9,0,-7,6,-5,4,17,-10,13,-6,11,-6,11,2,6,4,-69,-9,13,-22,-11,-24,-6,-20,-80,8,-124,-55,-5,85,-9, 
  /* [13][0][][] */ 9,4,-4,4,9,-10,1,1,1,4,2,23,-6,4,3,2,6,2,8,6,10,-13,7,-4,-1,2,13,127,12,-4,6,-3,3,-2,-36,19,5,-5,6,-20,-15,-3,4,2,-1,-2,-8,-15, 
  /* [14][0][][] */ 60,-20,28,-63,41,24,41,-82,-54,-46,-5,109,-65,0,54,16,62,28,-53,58,17,0,71,-14,5,64,-36,-89,19,-36,60,42,-11,68,-127,-46,-41,39,93,-9,-33,6,44,-11,14,-11,12,-26, 
  /* [15][0][][] */ -5,-53,-88,-34,55,26,75,-55,-11,2,-12,-40,84,22,-88,75,76,54,83,-76,-104,-21,58,-15,-107,39,34,52,59,45,52,-56,19,63,103,116,-17,-111,-8,-33,94,60,127,-48,0,-43,-12,71, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.033851165324449539, 0.036552045494318008, 0.04472815990447998, 0.043708585202693939, 0.042783137410879135, 0.052269063889980316, 0.039155304431915283, 0.022576391696929932, 0.02469518780708313, 0.021793678402900696, 0.033461492508649826, 0.025739055126905441, 0.04551311582326889, 0.056274294853210449, 0.029580717906355858, 0.023270515725016594, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2172, 34376, -1232, 37588, 4404, 131037, -2521, 43315, 2073, 35101, 22070, -378, -896, 29443, -834, -1205, -497, -1576, 1949, -1787, 445, -897, 934, -17531, -5109, 40954, 129879, 101273, 3971, 2707, -3602, -82, 22628, 1085, 40789, -4035, 44973, -288, 51476, 1252, 2951, 59738, 663, 4452, 49719, -985, 1194, 50756, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1943217082880437e-05, 3.7475048884516582e-05, 0.00015110663662198931, 5.7694305723998696e-05, 0.00015349387831520289, 6.186158861964941e-05, 0.00016910022532101721, 0.0001362157054245472, 9.1167603386566043e-05, 3.8249472709139809e-05, 4.4178705138619989e-05, 0.0001044085729517974, 4.3706499127438292e-05, 3.3808493753895164e-05, 0.00014938072126824409, 0.00022240186808630824, 0.00014214903058018535, 0.00012847033212892711, 0.00010439432662678882, 0.00013012903218623251, 7.3152237746398896e-05, 0.00019128176791127771, 9.594571019988507e-05, 0.00010543276584940031, 9.2378395493142307e-05, 0.00010845935321412981, 2.9736707801930606e-05, 7.1440605097450316e-05, 0.00011576811812119558, 0.00010851165279746056, 0.00010611931065795943, 0.00013461003254633397, 5.2016737754456699e-05, 0.00014454805932473391, 2.876917460525874e-05, 6.0586160543607548e-05, 0.00012990859977435321, 0.000103313650470227, 0.00011302343773422763, 9.8417316621635109e-05, 8.9134038717020303e-05, 9.83183563221246e-05, 8.0053447163663805e-05, 8.7003281805664301e-05, 3.4186443372163922e-05, 0.00013018926256336272, 0.00010898888285737485, 2.8252319680177607e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 68,-91,97,73,51,-35,105,-65,61,-87,-79,49,52,-43,-71,-91,102,79,51,79,65,-77,-81,50,-33,-40,-67,-67,-67,60,-60,-113,-14,42,67,66,-65,53,-51,-19,52,-71,57,63,-92,10,75,-36, 80,-95,127,88,-76,-67,-55,-85,97,-99,-62,75,79,-110,-96,92,-41,98,84,127,83,-119,50,71,-51,-78,-71,-82,55,78,-30,-127,-85,78,79,84,-83,83,-84,-13,76,-95,83,89,-72,-127,92,-101, 33,-44,70,39,18,-42,-45,-39,43,-28,6,34,28,-81,-54,0,-52,41,35,68,34,-58,31,27,-27,-46,-44,-24,31,32,88,-87,-81,44,35,33,-30,39,-38,-7,41,-41,33,43,-8,-10,37,-77, 
  /* [0][1][][] */ 91,-109,-40,92,53,-83,127,-87,89,-112,-70,82,84,-111,-14,-127,127,108,75,-39,83,108,-127,73,72,-76,-94,-100,-127,86,-66,-8,-88,72,107,98,-84,78,-81,89,85,-99,88,89,-88,104,93,-91, 127,-127,-62,127,-127,-127,-89,-127,127,-127,-127,127,127,-127,-22,97,-66,127,127,-51,127,127,68,127,127,-127,-127,-127,52,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 63,-77,-34,70,36,-63,-47,-63,59,-40,-61,58,48,-54,-16,12,-63,51,58,-29,57,63,49,64,65,-67,-60,-45,35,56,127,15,-58,71,49,50,-49,61,-61,57,61,-57,54,61,-63,-67,59,-57, 
  /* [0][2][][] */ 44,-48,-45,51,27,-53,62,-41,40,-72,-4,40,54,-71,83,-78,75,50,35,-32,26,-11,-77,30,-24,-44,-47,-50,-73,32,-38,91,-72,38,49,44,-27,40,-44,-85,47,-48,41,45,-23,15,41,-74, 70,-72,-46,85,-57,-64,-72,-68,51,-77,-65,60,73,-46,127,33,-48,59,62,-45,54,-20,40,67,-49,-66,-76,-62,32,61,-21,118,-53,66,57,58,-48,63,-67,-103,70,-64,60,63,-88,49,63,-52, 41,-40,-27,50,28,-20,-16,-35,17,-27,-52,28,31,5,67,25,-35,23,30,-31,27,-2,37,43,-24,-30,-45,-24,33,35,61,66,1,36,17,23,-22,33,-30,-53,29,-31,24,29,-65,8,31,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034825867041945457, 0.0015926895430311561, 0.0064220321364700794, 0.0024520079605281353, 0.006523489486426115, 0.0026291173417121172, 0.0071867592632770538, 0.0057891672477126122, 0.003874623216688633, 0.0016256025992333889, 0.0018775948556140065, 0.0044373641721904278, 0.0018575262511149049, 0.0014368608826771379, 0.0063486802391707897, 0.0094520794227719307, 0.006041333544999361, 0.0054599889554083347, 0.0044367588125169277, 0.0055304835550487041, 0.0031089698895812035, 0.0081294747069478035, 0.0040776925161480904, 0.004480892326682806, 0.003926081582903862, 0.0046095224097371101, 0.0012638100888580084, 0.0030362256802618504, 0.0049201450310647488, 0.00461174501106143, 0.004510070662945509, 0.0057209259830415249, 0.0022107113618403673, 0.0061432924121618271, 0.0012226898688822985, 0.0025749118067324162, 0.005521115381270647, 0.0043908301740884781, 0.0048034959472715855, 0.0041827359236776829, 0.0037881964817643166, 0.0041785300709307194, 0.0034022713080048561, 0.0036976393312215805, 0.0014529238687828183, 0.0055330432951450348, 0.0046320273540914059, 0.001200723578222096, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 641, 981, 2081, 583, 8140, 16043, 2807, -110, -770, -776, 1156, 980, 3197, 1197, 25826, 3339, 1737, -1776, -221, 3241, -1357, 11345, 9804, 10474, 5885, 251, 3432, 4114, 8161, -433, 8080, 5398, 502, -403, 5002, 3076, -1817, 402, -654, 4995, 614, -526, -1104, -142, 1145, 3193, 769, 987, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0003667691198643297, 0.00071070244302973151, 0.00026272414834238589, 0.00030734899337403476, 0.00027224852237850428, 0.00025420638849027455, 0.00040184982935898006, 0.00023258839792106301, 0.00038796561420895159, 0.00058512692339718342, 0.00082947354530915618, 0.00030175712890923023, 0.00040344378794543445, 0.00063356314785778522, 0.00013934630260337144, 0.0003754163917619735, 0.00027194668655283749, 0.00026986227021552622, 0.00021700141951441765, 0.0002815964980982244, 0.00039548659697175026, 0.00022983457893133163, 0.00037661852547898889, 0.00015061510202940553, 0.00027318895445205271, 0.00028456078143790364, 0.0020347267854958773, 0.00045888387830927968, 0.00021717214258387685, 0.00040812473162077367, 0.00031817922717891634, 0.00021938361169304699, 0.00074054562719538808, 0.00022427777003031224, 0.00073538045398890972, 0.00058272358728572726, 0.00074686028528958559, 0.00028871453832834959, 0.00023991017951630056, 0.00037090241676196456, 0.00019408359366934747, 0.00024775063502602279, 0.00027888224576599896, 0.00025908416137099266, 0.0017024069093167782, 0.00043513774289749563, 0.00031730151386000216, 0.0012160196201875806, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,2,-5,70,-31,42,22,-31, 
  /* [1][0][][] */ 38,85,64,16,18,-39,108,127, 
  /* [2][0][][] */ -20,-3,13,1,-127,-11,14,2, 
  /* [3][0][][] */ 85,18,6,-118,-127,7,41,-25, 
  /* [4][0][][] */ -127,32,-2,-30,54,-18,17,9, 
  /* [5][0][][] */ -96,-31,14,-5,-127,6,7,84, 
  /* [6][0][][] */ -13,-127,29,-19,17,7,-1,34, 
  /* [7][0][][] */ -72,-7,7,104,127,-41,-38,10, 
  /* [8][0][][] */ 61,13,1,-127,-2,-31,-47,-34, 
  /* [9][0][][] */ 4,-127,-11,-17,11,109,-56,99, 
  /* [10][0][][] */ -103,-14,-11,36,-127,74,77,-3, 
  /* [11][0][][] */ 108,13,41,15,-53,-38,-34,-127, 
  /* [12][0][][] */ 4,19,52,-6,9,-67,127,51, 
  /* [13][0][][] */ 73,-26,5,-30,127,125,121,-44, 
  /* [14][0][][] */ 127,45,-24,15,-122,-13,-38,-13, 
  /* [15][0][][] */ -21,-127,9,-12,3,1,2,33, 
  /* [16][0][][] */ -48,-3,2,-5,-127,-4,19,0, 
  /* [17][0][][] */ -42,117,-101,-11,-7,-127,108,-105, 
  /* [18][0][][] */ 127,-22,-37,7,-61,17,16,108, 
  /* [19][0][][] */ 127,-52,-24,1,46,-3,30,13, 
  /* [20][0][][] */ 127,23,-22,105,-18,31,14,-57, 
  /* [21][0][][] */ 5,26,-84,4,-38,81,-127,-75, 
  /* [22][0][][] */ -127,29,13,-7,-32,-5,-40,-17, 
  /* [23][0][][] */ -42,-59,8,20,-127,69,80,-20, 
  /* [24][0][][] */ 127,-16,-19,-7,-107,6,9,1, 
  /* [25][0][][] */ 22,-13,-1,-25,127,52,56,-35, 
  /* [26][0][][] */ 18,-83,17,-36,4,-127,82,-52, 
  /* [27][0][][] */ -19,-127,25,-12,-6,-60,38,-5, 
  /* [28][0][][] */ -108,29,-11,21,-18,-24,127,77, 
  /* [29][0][][] */ -11,47,17,-2,1,43,-104,-127, 
  /* [30][0][][] */ 127,-44,-17,-15,-57,10,-60,-25, 
  /* [31][0][][] */ -29,-45,72,-8,22,-102,127,76, 
  /* [32][0][][] */ -41,14,12,8,-127,-89,-92,41, 
  /* [33][0][][] */ -27,12,0,20,-127,-51,-42,21, 
  /* [34][0][][] */ 12,-127,47,-16,-3,68,-61,60, 
  /* [35][0][][] */ -28,-47,-127,-7,-5,-66,43,-50, 
  /* [36][0][][] */ -7,127,52,10,-23,3,-14,-30, 
  /* [37][0][][] */ -127,27,29,-23,63,-24,-19,-117, 
  /* [38][0][][] */ -127,-21,-53,-17,44,30,27,97, 
  /* [39][0][][] */ 4,-13,62,-4,22,-76,127,67, 
  /* [40][0][][] */ -40,-22,-20,-33,-127,102,115,-12, 
  /* [41][0][][] */ -127,47,2,-68,-83,-87,-84,51, 
  /* [42][0][][] */ -30,-127,-109,1,5,72,-121,-86, 
  /* [43][0][][] */ -63,-8,-13,-127,105,79,75,7, 
  /* [44][0][][] */ 127,-13,10,-118,42,-32,-18,40, 
  /* [45][0][][] */ -15,-127,-20,-12,2,-62,71,11, 
  /* [46][0][][] */ 103,4,2,-21,127,-30,-29,-2, 
  /* [47][0][][] */ 127,6,8,104,-6,30,17,-54, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00068392156390473247, 0.0013252607313916087, 0.00048990687355399132, 0.00057311967248097062, 0.00050766713684424758, 0.00047402363270521164, 0.00074933725409209728, 0.00043371214997023344, 0.00072344706859439611, 0.001091097597964108, 0.0015467355260625482, 0.00056269241031259298, 0.00075230951188132167, 0.0011814176104962826, 0.00025984179228544235, 0.00070004630833864212, 0.00050710432697087526, 0.00050321745220571756, 0.00040464679477736354, 0.00052509852685034275, 0.00073747162241488695, 0.00042857704102061689, 0.00070228794356808066, 0.00028085493249818683, 0.00050942081725224853, 0.00053062604274600744, 0.0037941948976367712, 0.00085568975191563368, 0.00040496516157872975, 0.0007610381580889225, 0.00059331505326554179, 0.0004090889124199748, 0.0013809099327772856, 0.00041821514605544508, 0.0013712783111259341, 0.0010866160737350583, 0.0013926849933341146, 0.00053837167797610164, 0.00044736522249877453, 0.00069162901490926743, 0.00036191148683428764, 0.00046198547352105379, 0.00052003719611093402, 0.0004831193364225328, 0.0031745114829391241, 0.00081140990369021893, 0.00059167837025597692, 0.0022675355430692434, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -38793, 27660, -10091, -9818, 17358, 214, 32102, 44149, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045970332575961947, 0.00074002263136208057, 0.0015831482596695423, 0.0017057243967428803, 0.00080183730460703373, 0.00052784715080633759, 0.00074638141086325049, 0.0009274162002839148, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -49,-12,-26,9,9,-19,3,-16,-93,127,-30,108,118,17,60,-24,-4,-29,-1,-4,-14,-14,-21,-33,27,-87,9,56,-16,0,18,-35,-14,-72,124,42,-7,4,-21,-32,111,14,41,-23,-28,32,-14,-19, 
  /* [1][0][][] */ 7,30,127,-11,-6,-28,-5,-91,33,-2,22,6,-26,3,-3,-122,5,-63,7,2,-25,39,19,-28,-20,-11,21,-3,5,-10,8,6,-2,25,14,23,-9,-30,73,-63,5,52,-15,26,-18,9,26,-9, 
  /* [2][0][][] */ 8,-54,13,-39,35,24,-6,-34,17,-2,-6,18,-7,62,12,-1,-37,125,-28,-32,-14,20,-41,-8,127,-6,2,-8,-27,-15,2,-45,-13,-17,4,11,-9,-6,-14,4,11,-15,-16,-10,3,29,-21,-34, 
  /* [3][0][][] */ -6,-80,-2,2,4,-9,-13,-4,-2,-15,14,20,17,-11,49,-3,-3,-22,4,18,-2,21,-20,3,7,48,-3,8,-5,10,127,-3,8,0,-3,-4,-24,-15,-8,14,-7,11,-6,23,-10,1,-1,32, 
  /* [4][0][][] */ -103,12,11,8,4,-36,4,-8,49,-42,24,-14,-24,2,-13,-19,13,16,-2,24,19,-36,14,10,-6,39,11,100,2,3,-4,-25,-2,-127,-33,23,2,3,0,5,-50,-5,-9,8,-50,9,8,11, 
  /* [5][0][][] */ -28,24,14,8,-42,4,-3,47,35,-4,6,15,0,-37,19,33,-4,-89,18,-2,49,-47,5,39,16,0,-71,-39,-26,-32,18,-5,-1,-72,3,-65,60,11,-43,6,10,-35,7,-5,127,-4,-37,0, 
  /* [6][0][][] */ -34,-37,-7,-15,34,-25,0,-26,-23,-2,38,-28,-20,42,-8,-49,-4,6,0,-20,-44,59,-10,-84,-2,-9,-64,-78,24,45,-20,9,5,-58,-26,66,-66,-47,20,-53,2,0,13,51,127,-39,44,1, 
  /* [7][0][][] */ 14,35,-74,36,-17,8,10,60,-3,-4,61,-30,18,-24,7,-6,-15,-127,33,-42,64,36,21,-61,28,-28,26,8,-10,29,-10,0,-1,29,-4,-27,-10,-59,-37,-70,-19,-29,50,62,-30,-18,3,11, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019537391141057014, 0.031450960785150528, 0.067283801734447479, 0.072493284940719604, 0.03407808393239975, 0.022433502599596977, 0.031721208244562149, 0.039415188133716583, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52108, -213, 9679, -270, 5362, -5475, 1836, 21518, 1233, 36984, -2317, 23650, -6837, -924, 28362, 3339, 662, 18874, 33349, 10975, -97, -513, -370, 11603, -7998, 29522, 46695, 37050, 4526, 729, -1316, 1268, 658, 17562, -6571, 17553, -11382, 20512, -21760, 109895, 22253, 18653, 13093, -2038, 16043, 3880, 2293, 223, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032778998138383031, 0.00029995973454788327, 0.00017477884830441326, 0.00024018435215111822, 0.00012700942170340568, 9.310999303124845e-05, 0.00065537687623873353, 0.00016177672659978271, 0.00011743542563635856, 0.00013475523155648261, 9.0592438937164843e-05, 0.00018253589223604649, 0.00024260114878416061, 0.00022260770492721349, 9.0442554210312665e-05, 0.00047106287092901766, 0.00015395533409900963, 0.00020487207802943885, 7.1588983701076359e-05, 0.00015863325097598135, 0.00018399943655822426, 0.00019243588030803949, 0.0001537716161692515, 0.00017933732306119055, 0.00017316083540208638, 0.00012188178516225889, 0.00052726856665685773, 8.7569351308047771e-05, 0.00014130804629530758, 0.0010220971889793873, 0.00010915061284322292, 0.00017601702711544931, 0.0013154095504432917, 0.00016471381240990013, 0.00018803557031787932, 0.00014629648649133742, 0.00034212693572044373, 0.00012610864359885454, 0.00027192567358724773, 2.2185266061569564e-05, 0.00014729420945513994, 5.1441824325593188e-05, 0.00012512414832599461, 0.00015163309581112117, 0.00014761908096261322, 9.9499375210143626e-05, 0.0001405881776008755, 0.00010499842755962163, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,19,109,4,82,-1,27,16,8,7,8,-9,-9,-46,8,-3,8,-22,-113,-7,-23,127,-10,-1,7,-5,8,-7,4,17,97,19,28,40,-28,1,34,-2,3,18,-69,-8,-8,16,2,-7,-10, 127,10,14,-127,28,87,11,10,127,127,6,43,-49,-24,5,7,127,-56,-59,-56,-101,25,-108,15,17,73,-31,-83,22,20,10,-122,5,-61,127,9,-40,-47,-6,115,-78,-99,-30,2,-35,-9,-127,21, -32,-3,7,14,0,65,4,16,30,8,-14,31,-13,-4,16,3,-105,29,-2,77,-32,-12,-18,-6,-5,-58,-3,28,-16,5,5,-22,8,-24,17,-19,0,47,40,-11,50,33,-16,11,-43,2,-4,-6, 
  /* [0][1][][] */ 123,7,0,-98,14,-27,35,-17,9,8,-13,53,-7,-1,17,-32,-1,-49,-58,-84,10,-74,-123,-18,6,100,-15,-127,-10,33,13,-107,17,-52,-1,127,-3,59,-41,43,-62,-127,39,-87,-44,-14,-13,-4, 29,-127,-127,114,-127,-127,-127,-127,-126,-96,127,-127,127,127,35,-127,-86,127,127,-104,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-28,-42,127,-127,127,127,127,-79,127,127,127,-122,99,105, 54,5,48,-13,6,-61,43,18,-23,14,-105,-8,0,-40,127,5,63,-65,-70,85,13,-45,11,-33,1,6,-39,68,21,40,1,3,33,-44,9,66,-5,64,68,-8,-82,7,-84,-31,28,-17,-11,5, 
  /* [0][2][][] */ -53,-6,25,-16,7,34,-38,21,9,-24,11,32,7,-6,-39,18,5,22,-12,105,6,-31,-16,-12,-3,23,-1,51,-10,4,47,-32,-18,-44,-32,-39,-1,30,7,-20,9,-4,43,-37,-35,17,-11,18, 69,126,74,21,16,-20,121,35,20,-3,41,26,-5,-1,-90,26,-60,-56,-34,122,-36,50,13,20,31,-63,-41,30,76,1,127,22,86,-26,7,-36,-26,-17,-14,117,-28,-9,-39,45,22,-33,6,-127, -41,-4,7,-3,5,-5,-62,8,-18,-11,-41,-40,20,-9,-9,12,33,24,-8,-127,23,-8,5,-8,-7,9,-11,-53,-14,8,7,9,-19,87,-37,-22,-5,36,23,-59,4,10,-37,6,-41,127,-6,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013931074179708958, 0.012748288922011852, 0.007428100798279047, 0.010207834653556347, 0.0053979000076651573, 0.0039571747183799744, 0.027853516861796379, 0.0068755107931792736, 0.0049910056404769421, 0.005727096926420927, 0.0038501785602420568, 0.0077577754855155945, 0.010310548357665539, 0.0094608273357152939, 0.0038438085466623306, 0.020020171999931335, 0.0065431017428636551, 0.0087070632725954056, 0.0030425318982452154, 0.0067419130355119705, 0.0078199757263064384, 0.0081785246729850769, 0.0065352935343980789, 0.0076218359172344208, 0.0073593356646597385, 0.0051799756474792957, 0.022408913820981979, 0.0037216972559690475, 0.0060055917128920555, 0.043439131230115891, 0.0046389009803533554, 0.0074807233177125454, 0.055904902517795563, 0.0070003368891775608, 0.0079915113747119904, 0.0062176007777452469, 0.014540394768118858, 0.0053596170619130135, 0.011556841433048248, 0.0009428737685084343, 0.0062600038945674896, 0.0021862774156033993, 0.0053177764639258385, 0.006444406695663929, 0.0062738107517361641, 0.0042287232354283333, 0.0059749973006546497, 0.0044624330475926399, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 52034, 8492, 6227, 8286, 1738, 11759, -1906, -294, 1004, 2497, 3958, 239, 1828, -898, 793, -2293, 3942, 10822, -295, 30439, 5105, 2954, 7492, -591, 3704, 5432, 32101, 11688, -106, -2830, 129, 2214, -2442, 10404, 3569, 7161, 8168, 4209, 31985, 2120, -832, 3018, 1076, 3903, 5066, 2397, -1424, 2889, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.256228466052562e-05, 0.00026725753559730947, 0.00025198669754900038, 0.00039043481228873134, 0.0012952270917594433, 0.00042974122334271669, 0.0010061711072921753, 0.00095970230177044868, 0.00053758168360218406, 0.00054836930939927697, 0.00057622772874310613, 0.00046106899389997125, 0.00051732320571318269, 0.00054808566346764565, 0.0005372343584895134, 0.0015858158003538847, 0.00042024333379231393, 0.00039372924948111176, 0.0017327179666608572, 8.8965251052286476e-05, 0.00024419950204901397, 0.00033211460686288774, 0.00053283659508451819, 0.00086580181960016489, 0.0003170352429151535, 0.00021687355183530599, 0.00012694964243564755, 0.00031583162490278482, 0.00081993237836286426, 0.00091568921925500035, 0.0004951620358042419, 0.00036307660047896206, 0.00080671132309362292, 0.00021291857410687953, 0.00027680484345182776, 0.00025074928998947144, 0.00045871944166719913, 0.0003265987616032362, 7.3018250986933708e-05, 0.0021166957449167967, 0.00066454918123781681, 0.00090866326354444027, 0.00041623870492912829, 0.00038009026320651174, 0.0002353479212615639, 0.00045380936353467405, 0.00078916456550359726, 0.00093502155505120754, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 68,35,-7,-19,127,27,-40,-22, 
  /* [1][0][][] */ -6,-10,-2,127,23,-11,8,28, 
  /* [2][0][][] */ 33,-127,-21,34,5,-73,82,12, 
  /* [3][0][][] */ 127,-30,-11,13,-18,-28,35,8, 
  /* [4][0][][] */ 8,-57,127,-25,-14,-62,14,-90, 
  /* [5][0][][] */ 71,-2,-1,-8,127,6,1,14, 
  /* [6][0][][] */ -17,91,-12,127,40,53,-65,-42, 
  /* [7][0][][] */ -12,127,-5,11,-6,-14,11,-8, 
  /* [8][0][][] */ 127,56,-9,7,-70,-24,-9,-44, 
  /* [9][0][][] */ -127,13,20,25,67,9,-3,10, 
  /* [10][0][][] */ -88,-2,-2,127,50,24,-26,-14, 
  /* [11][0][][] */ -127,-3,10,-67,24,6,-36,-34, 
  /* [12][0][][] */ 127,20,-4,13,-57,-8,11,-50, 
  /* [13][0][][] */ -11,72,-127,6,-7,92,-60,60, 
  /* [14][0][][] */ -44,-33,-20,127,20,-4,-7,-30, 
  /* [15][0][][] */ -5,127,1,-2,2,-15,10,-48, 
  /* [16][0][][] */ -30,-115,-21,18,-38,-127,100,-51, 
  /* [17][0][][] */ 18,127,0,-13,7,85,-83,-21, 
  /* [18][0][][] */ -5,47,-127,-2,14,52,-33,60, 
  /* [19][0][][] */ -70,11,3,5,-127,-4,44,47, 
  /* [20][0][][] */ -127,-40,-7,-12,98,-27,51,-1, 
  /* [21][0][][] */ -49,17,7,9,-127,-6,17,-4, 
  /* [22][0][][] */ -127,-11,1,-3,67,-11,30,33, 
  /* [23][0][][] */ -21,-21,-8,-5,0,74,-127,-95, 
  /* [24][0][][] */ -3,39,-127,8,10,41,-11,76, 
  /* [25][0][][] */ 103,-39,2,127,-79,-25,17,-39, 
  /* [26][0][][] */ 0,-25,2,3,-3,125,127,-30, 
  /* [27][0][][] */ 73,-11,0,13,127,46,39,-35, 
  /* [28][0][][] */ 1,127,-79,-4,-1,86,-24,114, 
  /* [29][0][][] */ -2,8,-1,-6,-6,99,-127,-83, 
  /* [30][0][][] */ 6,-4,3,-127,-5,0,-10,-16, 
  /* [31][0][][] */ -62,9,8,5,-127,1,12,3, 
  /* [32][0][][] */ -21,63,19,-109,12,37,-82,-127, 
  /* [33][0][][] */ -58,-4,-4,0,-127,38,52,-1, 
  /* [34][0][][] */ -127,115,-16,18,36,-53,49,30, 
  /* [35][0][][] */ -11,127,2,-3,20,-71,71,-25, 
  /* [36][0][][] */ -3,55,-4,-33,-14,96,-127,-38, 
  /* [37][0][][] */ 39,-58,-12,26,27,-127,98,-29, 
  /* [38][0][][] */ 21,-127,19,11,15,97,-113,79, 
  /* [39][0][][] */ 9,-127,-6,-3,1,-8,-47,-94, 
  /* [40][0][][] */ 101,56,12,3,-49,65,-127,-109, 
  /* [41][0][][] */ 15,-123,9,-7,-7,54,-46,127, 
  /* [42][0][][] */ 55,-16,-8,-127,-34,-10,6,-19, 
  /* [43][0][][] */ -86,-36,6,-127,60,10,-16,3, 
  /* [44][0][][] */ -3,-33,-6,12,-24,102,127,-3, 
  /* [45][0][][] */ -127,-36,4,5,19,8,34,-15, 
  /* [46][0][][] */ 4,89,127,17,-20,5,16,36, 
  /* [47][0][][] */ -22,14,-4,127,3,-17,-7,-5, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00021984598424751312, 0.00071165058761835098, 0.00067098753061145544, 0.0010396457510069013, 0.0034489172976464033, 0.0011443104594945908, 0.0026792220305651426, 0.0025554853491485119, 0.0014314668951556087, 0.0014601920265704393, 0.0015343732666224241, 0.0012277297209948301, 0.0013775228289887309, 0.0014594367239624262, 0.0014305420918390155, 0.0042226938530802727, 0.0011190195800736547, 0.0010484181111678481, 0.0046138633042573929, 0.00023689575027674437, 0.00065025186631828547, 0.00088435132056474686, 0.0014188317582011223, 0.002305448055267334, 0.00084419810445979238, 0.00057748862309381366, 0.00033804017584770918, 0.00084099319064989686, 0.0021833074279129505, 0.0024382877163589001, 0.0013185122516006231, 0.00096679659327492118, 0.0021481025032699108, 0.00056695734383538365, 0.00073707307456061244, 0.00066769256955012679, 0.001221473328769207, 0.00086966378148645163, 0.00019443224300630391, 0.0056363153271377087, 0.001769554684869945, 0.0024195790756493807, 0.0011083560530096292, 0.0010121003724634647, 0.00062668201280757785, 0.0012083988403901458, 0.0021013792138546705, 0.002489765640348196, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4623, -26454, 28040, 23648, 3053, 5539, 37409, 13985, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013433392159640789, 0.00059235020307824016, 0.0017273827688768506, 0.0012751813046634197, 0.0011890182504430413, 0.001222210587002337, 0.00076530873775482178, 0.00070703640813007951, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -15,0,8,-95,13,30,6,7,6,7,4,-3,95,0,-2,4,0,-6,-2,0,73,-1,3,2,31,35,11,10,4,4,5,-127,12,6,1,-3,-25,-2,-16,33,7,-24,-10,6,2,-5,3,3, 
  /* [1][0][][] */ -37,-3,1,-2,43,29,-29,83,23,7,-35,-19,11,0,21,36,0,50,17,-48,-1,26,127,25,-25,-4,57,8,22,-3,15,-10,11,-7,-12,-22,4,-56,9,2,-7,-7,-89,-4,-40,11,-47,-94, 
  /* [2][0][][] */ -70,17,0,14,45,-11,30,29,-12,53,10,-8,4,0,11,60,0,12,-127,29,3,16,6,-13,-41,3,43,5,6,31,19,5,6,-8,-6,-7,12,7,3,0,36,-10,-32,3,29,-64,28,18, 
  /* [3][0][][] */ -3,1,0,10,-3,27,6,-2,65,18,-3,-2,25,0,-26,-7,0,-3,-4,0,-3,2,6,-22,-6,-10,-13,-1,-10,-5,-3,-7,-50,43,-49,-6,8,0,-2,-127,2,8,6,-55,0,-5,-3,3, 
  /* [4][0][][] */ -2,-5,70,31,5,-15,1,-6,5,-7,1,-5,-74,0,-13,8,0,5,8,2,62,3,-3,-5,-17,39,-5,38,-13,0,2,96,5,1,-2,-3,14,-9,-2,-16,-3,-127,8,4,6,-4,-1,1, 
  /* [5][0][][] */ -14,41,8,-7,5,47,25,7,-17,28,9,52,24,0,-127,-3,0,9,-31,22,-10,7,-17,32,-24,0,25,-2,-14,25,22,-18,48,27,-35,-1,-1,20,-45,17,23,-15,-8,26,23,51,28,25, 
  /* [6][0][][] */ -20,-55,3,10,40,-49,-22,7,27,-29,-15,95,-6,0,-127,41,0,-6,46,-18,-6,-1,26,-32,31,-6,-9,-10,54,-12,-11,-5,94,-35,29,-7,2,-8,-76,-21,-8,-15,-5,-31,-17,-80,-20,-28, 
  /* [7][0][][] */ -119,-32,-17,3,127,20,65,25,15,5,31,-34,-21,0,86,104,0,8,11,57,-7,-4,-27,42,22,7,47,3,48,62,61,0,-8,-17,-22,-27,4,30,17,41,75,4,-33,-12,56,-5,62,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.057091914117336273, 0.025174882262945175, 0.073413766920566559, 0.054195202887058258, 0.050533276051282883, 0.051943950355052948, 0.032525621354579926, 0.030049046501517296, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 62120, 62458, 61744, 42218, 56, 13884, 3378, 27529, 24902, 28858, 30118, 3616, -46346, -127, 43171, 702, -204, 33899, 1490, 1525, -14725, -4369, 44446, 30072, -20766, 36655, 37710, 20720, -2631, 15613, -8495, -51084, 13362, 93922, 29759, 1836, 60758, -61, 177615, -25527, 14613, -28940, 2009, 92127, -1107, 83980, 2161, -23536, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.713061444927007e-05, 6.2121187511365861e-05, 0.0001301562151638791, 0.00013143685646355152, 0.00014675836428068578, 0.00016733519441913813, 0.00011992064537480474, 5.860824603587389e-05, 8.9546549133956432e-05, 3.3773838367778808e-05, 8.7154774519149214e-05, 2.4232613213825971e-05, 0.00017068622400984168, 0.005541567225009203, 5.9065263485535979e-05, 0.00022626246209256351, 0.0027484172023832798, 1.7918378944159485e-05, 9.6292817033827305e-05, 0.00015314329357352108, 9.8005672043655068e-05, 0.00012582205818034708, 0.00012912711827084422, 3.467106944299303e-05, 8.8540342403575778e-05, 7.781342719681561e-05, 3.6705583625007421e-05, 4.195656583760865e-05, 0.00036595342680811882, 5.0838221795856953e-05, 4.8364163376390934e-05, 0.00018197890312876552, 0.0001870423584477976, 9.6226922323694453e-06, 8.5045336163602769e-05, 0.00017917007789947093, 1.4459364138019737e-05, 0.00042232312262058258, 2.6439207431394607e-05, 9.0139881649520248e-05, 5.9647267335094512e-05, 0.00022032011474948376, 0.00010655057849362493, 1.0526720870984718e-05, 0.00015202169015537947, 6.8965557147748768e-05, 0.00016459502512589097, 0.00012345863797236234, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-21,-6,-17,7,-39,-79,-70,-27,-49,9,65,33,-71,115,-42,-113,-86,35,-7,-2,-70,-112,-78,-36,-124,-63,-21,72,16,95,28,-127,-88,-9,54,20,48,-127,78,-77,-13,106,-113,-3,-34,-88,110, 75,13,-28,-27,58,-127,-127,-82,60,-77,-117,108,38,-82,0,62,-52,-114,59,7,12,-112,-127,-69,-5,-127,-120,-41,-54,21,-56,52,27,-127,64,84,15,72,-92,127,-127,8,126,-127,1,-22,-127,98, -32,46,8,-4,-64,-107,-59,-18,87,-8,-127,38,7,-71,-101,-11,-127,-26,25,11,-16,-76,-36,-24,-11,-30,-59,-13,-11,18,-24,10,104,-88,71,30,15,36,-6,16,-78,4,7,-79,-17,6,-56,15, 
  /* [0][1][][] */ -86,-127,-43,-45,-11,54,99,-105,-26,-108,-19,112,89,-64,28,-96,-121,-94,87,-77,40,-88,-103,-127,42,-114,-78,-37,127,-60,127,88,-44,-84,-15,84,-35,-76,-109,90,43,60,104,-110,-92,-117,81,120, 127,-84,-127,-127,127,40,94,-127,100,-127,-111,127,127,-14,-5,127,-60,-127,127,-127,127,-127,-119,-117,127,-95,-127,-127,-120,-127,-70,127,26,-110,127,127,-67,-127,-96,89,61,127,127,-115,-112,-127,123,127, -53,34,-60,-85,-120,-22,31,-38,127,-19,-77,35,55,-70,-25,-44,-37,-30,52,-72,55,-82,-38,-24,47,-5,-46,-58,15,-89,-36,22,28,-98,118,25,-36,-62,1,-14,38,54,11,-74,-58,-37,64,36, 
  /* [0][2][][] */ -60,-107,-32,-35,-1,34,-5,-36,-37,-59,-18,59,77,-127,-127,-64,-43,-22,62,75,51,-34,-12,-58,34,-51,-10,-58,76,27,77,65,107,-26,-39,-8,-97,35,-19,32,8,39,16,-58,95,-77,3,32, 89,-75,-88,-85,80,18,6,-48,49,-70,-34,57,84,-26,17,92,-24,-32,76,118,82,-53,-18,-55,95,-67,-18,-99,-50,38,-45,110,-19,-49,67,8,-127,50,-16,-1,10,33,15,-67,127,-100,-12,41, -29,31,-41,-36,-81,-19,21,-12,60,-4,-16,33,31,-43,112,-29,-93,-5,29,60,73,-28,0,-2,44,1,-3,-63,-12,28,-20,41,-89,-42,66,4,-20,21,26,-38,6,37,-5,-14,62,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0041280509904026985, 0.0026401504874229431, 0.005531639326363802, 0.0055860662832856178, 0.0062372302636504173, 0.0071117454208433628, 0.0050966273993253708, 0.0024908503983169794, 0.0038057281635701656, 0.0014353881124407053, 0.003704077797010541, 0.0010298860725015402, 0.0072541646659374237, 0.23551659286022186, 0.0025102735962718725, 0.009616154246032238, 0.1168077290058136, 0.00076153106056153774, 0.0040924446657299995, 0.0065085897222161293, 0.0041652410291135311, 0.0053474372252821922, 0.0054879025556147099, 0.0014735204167664051, 0.0037629646249115467, 0.0033070705831050873, 0.0015599873149767518, 0.0017831540899351239, 0.015553020872175694, 0.0021606243681162596, 0.0020554768852889538, 0.0077341031283140182, 0.0079493001103401184, 0.0004089644062332809, 0.0036144268233329058, 0.0076147280633449554, 0.00061452295631170273, 0.017948731780052185, 0.0011236662976443768, 0.003830944886431098, 0.0025350088253617287, 0.0093636047095060349, 0.0045283995568752289, 0.0004473856242839247, 0.0064609218388795853, 0.0029310360550880432, 0.0069952886551618576, 0.0052469922229647636, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4162, 22, 9997, 6481, 8249, 6804, 10993, -37, 38, -286, 2287, 556, 12575, -86093368, 2970, 21512, -69499032, -131, -411, 11783, 4451, -17, -122, 427, 3662, -899, 69, 686, 4951, 1774, 2716, 14432, 3280, 362, 296, -1900, 371, 3311, -164, 13183, 2376, 13653, -220, -91, 12470, 110, 8597, 5353, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00049157592002302408, 0.00045789760770276189, 0.00030860418337397277, 0.00029148120665922761, 0.00024284994287882, 0.00030208486714400351, 0.00034648342989385128, 0.001415677135810256, 0.00034569724812172353, 0.0024906743783503771, 0.00063911528559401631, 0.0014534362126141787, 0.00017627701163291931, 1.8838113291508307e-09, 0.00087955530034378171, 0.00015406421152874827, 1.8838113291508307e-09, 0.0055523482151329517, 0.00040379620622843504, 0.00033057192922569811, 0.00024103166651912034, 0.0042892838828265667, 0.00030137100839056075, 0.0014601247385144234, 0.0010399989550933242, 0.00063564750598743558, 0.0021893559023737907, 0.0016964568058028817, 0.0002438786905258894, 0.0016507923137396574, 0.0010831007966771722, 0.00016155233606696129, 0.00022544710373040289, 0.0090797515586018562, 0.00046935395221225917, 0.00061801221454516053, 0.0041095367632806301, 0.00038527807919308543, 0.0022121802903711796, 0.00026098900707438588, 0.0011845536064356565, 0.00016364085604436696, 0.00052978162420913577, 0.0088977348059415817, 0.00040121865458786488, 0.00052540149772539735, 0.00032739972812123597, 0.00016915566811803728, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,51,-50,15,-29,-51,18, 
  /* [1][0][][] */ 67,65,-28,-87,11,-16,-67,127, 
  /* [2][0][][] */ 31,14,-41,127,54,104,41,92, 
  /* [3][0][][] */ 76,72,-77,127,-93,-3,-9,9, 
  /* [4][0][][] */ -32,-113,83,2,-10,33,-47,-127, 
  /* [5][0][][] */ 18,-1,-37,43,5,-36,31,127, 
  /* [6][0][][] */ 54,-22,-127,-100,77,19,58,-27, 
  /* [7][0][][] */ 127,17,10,-21,24,-6,87,-63, 
  /* [8][0][][] */ 24,-104,17,127,17,40,-8,-124, 
  /* [9][0][][] */ 100,-124,19,-15,-19,4,-127,60, 
  /* [10][0][][] */ -127,-49,-106,19,-13,3,-79,36, 
  /* [11][0][][] */ -28,-43,-13,-115,-127,-43,52,-13, 
  /* [12][0][][] */ 15,9,-43,68,-70,-19,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -10,-32,-7,13,53,127,39,45, 
  /* [15][0][][] */ 44,9,16,-127,76,47,-55,82, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 20,41,127,21,-33,-18,25,40, 
  /* [18][0][][] */ 84,-127,23,34,-2,23,-117,2, 
  /* [19][0][][] */ -127,-2,45,75,-63,-84,-107,66, 
  /* [20][0][][] */ 31,31,-50,127,-28,-122,6,62, 
  /* [21][0][][] */ 59,22,127,5,-15,-10,64,12, 
  /* [22][0][][] */ -73,-13,-127,6,9,9,-92,4, 
  /* [23][0][][] */ -95,118,-18,-26,4,-12,127,-79, 
  /* [24][0][][] */ 5,-52,-57,85,-6,-54,101,127, 
  /* [25][0][][] */ 12,37,30,24,127,105,-65,-49, 
  /* [26][0][][] */ -75,-23,-127,-4,7,12,-90,0, 
  /* [27][0][][] */ 1,-39,-44,-2,-60,127,74,56, 
  /* [28][0][][] */ -7,-9,-16,50,35,127,49,48, 
  /* [29][0][][] */ 83,25,127,-5,-4,-14,71,-11, 
  /* [30][0][][] */ -90,127,-26,-35,2,-11,104,-51, 
  /* [31][0][][] */ -46,-94,-18,-1,20,-77,127,98, 
  /* [32][0][][] */ 6,6,-40,103,3,100,74,127, 
  /* [33][0][][] */ 11,56,-6,-121,14,-5,-8,127, 
  /* [34][0][][] */ -16,73,-4,-90,35,-7,19,127, 
  /* [35][0][][] */ 127,4,-14,-42,40,49,90,-39, 
  /* [36][0][][] */ -117,2,17,60,-33,19,-127,80, 
  /* [37][0][][] */ -8,-15,-9,18,29,127,52,56, 
  /* [38][0][][] */ 11,19,7,85,127,-5,-20,32, 
  /* [39][0][][] */ 5,29,35,-127,24,1,-28,109, 
  /* [40][0][][] */ 99,16,127,-1,-14,-6,101,-16, 
  /* [41][0][][] */ 4,-26,-31,91,69,127,76,108, 
  /* [42][0][][] */ -85,-11,127,23,-33,25,-34,67, 
  /* [43][0][][] */ -7,-61,11,94,-21,2,15,-127, 
  /* [44][0][][] */ 25,3,-61,-127,44,-18,2,-91, 
  /* [45][0][][] */ -88,127,-7,-47,18,3,76,-55, 
  /* [46][0][][] */ -127,-34,43,19,-46,34,-83,41, 
  /* [47][0][][] */ 113,38,127,-5,23,-28,115,-6, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010273525258526206, 0.00095696770586073399, 0.00064495694823563099, 0.00060917134396731853, 0.00050753605319187045, 0.00063133210642263293, 0.00072412140434607863, 0.0029586467426270247, 0.00072247831849381328, 0.0052053011022508144, 0.0013356974814087152, 0.0030375600326806307, 0.00036840420216321945, 3.937008052901092e-09, 0.0018381970003247261, 0.00032198132248595357, 3.937008052901092e-09, 0.011603943072259426, 0.00084390025585889816, 0.00069086765870451927, 0.00050373602425679564, 0.0089642442762851715, 0.00062984018586575985, 0.0030515384860336781, 0.0021735108457505703, 0.0013284500455483794, 0.0045755705796182156, 0.0035454528406262398, 0.0005096860695630312, 0.0034500178880989552, 0.002263589994981885, 0.00033763085957616568, 0.00047116557834669948, 0.018975920975208282, 0.00098091049585491419, 0.0012915937695652246, 0.0085885878652334213, 0.00080519897164776921, 0.0046232715249061584, 0.00054544518934562802, 0.0024756179191172123, 0.00034199570654891431, 0.001107199233956635, 0.018595520406961441, 0.00083851342787966132, 0.0010980451479554176, 0.00068423803895711899, 0.0003535212017595768, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -2066, -44659, -8068, -13397, -32007, -4154, -26126, -27327, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021086824126541615, 0.0023096478544175625, 0.0024297446943819523, 0.0011513311183080077, 0.0012886314652860165, 0.0018882978474721313, 0.0014202359598129988, 0.0010363385081291199, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,5,-3,127,0,0,0,-1,-122,-92,-7,0,120,-1,0, 
  /* [1][0][][] */ 0,-31,-5,89,76,14,26,12,-1,-6,127,-42,0,30,-8,0, 
  /* [2][0][][] */ 0,5,-3,-10,-57,3,8,3,-1,6,-19,1,0,127,-9,0, 
  /* [3][0][][] */ 0,-12,-18,-127,78,26,72,17,-2,60,0,33,0,-2,21,0, 
  /* [4][0][][] */ 0,52,-24,32,-55,29,127,11,1,-64,20,-8,0,-6,14,0, 
  /* [5][0][][] */ 0,-13,-8,1,-25,-25,-8,17,0,9,-6,-49,0,-5,127,0, 
  /* [6][0][][] */ 0,18,0,3,51,-25,-23,-11,-1,-114,122,66,0,127,64,0, 
  /* [7][0][][] */ 0,11,-14,127,3,-3,21,9,-2,63,-50,75,0,-10,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.089619003236293793, 0.098160028457641602, 0.10326414555311203, 0.048931572586297989, 0.054766833782196045, 0.080252654850482941, 0.060360029339790344, 0.044044386595487595, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 17593, 124564, 11799, 11109, 635, 13729, 540, -5597, 6488, 29639, 14277, -445, 26296, 13305, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00014846393605694175, 3.219129575882107e-05, 0.00029742519836872816, 0.00015716502093710005, 0.0052204784005880356, 0.00037465686909854412, 0.0072239800356328487, 2.2782898668083362e-05, 0.00027374812634661794, 0.00019874660938512534, 0.00075466663111001253, 0.00072724185883998871, 0.0002511971106287092, 0.00016331643564626575, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,77,-94,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,15,-29,14,-27,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-108,-89,21,-11,-104,-127,1,23, 14,1,64,2,3,33,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-6,39,-39,52,-77,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-126,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-116,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0063097169622778893, 0.0013681300915777683, 0.012640570290386677, 0.0066795130260288715, 0.22187033295631409, 0.015922917053103447, 0.30701914429664612, 0.00096827320521697402, 0.011634294874966145, 0.0084467306733131409, 0.032073330134153366, 0.030907778069376945, 0.010675877332687378, 0.006940948311239481, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 2094, -77245, 46990, 389240, -3996, 17584, -10279, 328123, 56568, 27913, 1172096, -1073741824, 54132, 28671, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00026772473938763142, 0.00018236516916658729, 3.8247078919084743e-05, 9.3632370408158749e-06, 0.00017369196575600654, 0.00015781883848831058, 0.00024354002380277961, 4.3452232603158336e-06, 4.3995707528665662e-05, 0.0001093846294679679, 4.8177739699895028e-06, 1.1533876076441629e-09, 7.1181319071911275e-05, 0.00011068831372540444, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-3,35, 1,-23,20, -121,-127,-61, 
  /* [1][1][][] */ 7,-3,5, -15,5,2, 7,-30,12, 
  /* [1][2][][] */ 1,19,5, 1,10,5, 45,-17,18, 
  /* [2][0][][] */ 20,-9,-9, 70,116,4, 43,-31,14, 
  /* [2][1][][] */ -6,4,-9, 67,127,-21, 26,3,3, 
  /* [2][2][][] */ 36,-73,10, 71,-41,-19, 38,-47,20, 
  /* [3][0][][] */ 3,24,-2, 34,93,22, -6,2,-7, 
  /* [3][1][][] */ 28,36,7, 70,127,28, -22,-24,-2, 
  /* [3][2][][] */ 10,2,6, 28,27,11, -8,-6,1, 
  /* [4][0][][] */ 46,69,-20, 19,83,-20, -4,15,-1, 
  /* [4][1][][] */ 70,92,45, 49,119,22, 53,60,-14, 
  /* [4][2][][] */ 76,84,31, 66,127,7, -4,31,21, 
  /* [5][0][][] */ 12,5,-125, -2,-3,-109, -3,33,-26, 
  /* [5][1][][] */ 7,-43,-127, 0,-47,-117, 2,17,-22, 
  /* [5][2][][] */ -7,4,-21, 1,-6,-14, 3,16,-10, 
  /* [6][0][][] */ 26,-63,36, 50,-86,43, 13,-16,13, 
  /* [6][1][][] */ 38,-97,63, 66,-127,74, 10,-25,21, 
  /* [6][2][][] */ 21,-35,14, 15,-44,27, -10,10,2, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ -92,-98,-106, -98,-102,-112, -112,-117,-127, 
  /* [8][1][][] */ -97,-103,-108, -103,-107,-113, -115,-120,-127, 
  /* [8][2][][] */ -86,-93,-98, -90,-95,-102, -102,-108,-115, 
  /* [9][0][][] */ -12,3,15, -2,3,9, 5,4,-9, 
  /* [9][1][][] */ 80,99,-12, 73,127,22, -4,21,24, 
  /* [9][2][][] */ -30,-29,10, 0,-31,-1, 11,4,-18, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-20,1, 36,22,-11, -9,-1,7, 
  /* [11][0][][] */ -18,-33,-7, 6,-51,0, 5,-114,-63, 
  /* [11][1][][] */ -56,-54,-28, -45,-76,-48, -22,-71,-65, 
  /* [11][2][][] */ -19,-53,-96, 117,127,59, -52,5,-61, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 62,115,15, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -8,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 47,-7,-38, 80,-28,-52, 34,-10,-20, 
  /* [14][1][][] */ 88,-20,-77, 127,-44,-92, 58,-22,-39, 
  /* [14][2][][] */ 52,-14,-50, 71,-27,-58, 22,-12,-23, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.068269804120063782, 0.046503115445375443, 0.0097530046477913857, 0.0023876253981143236, 0.044291447848081589, 0.040243800729513168, 0.062102701514959335, 0.0011080318363383412, 0.011218904517591, 0.027893079444766045, 0.001228532288223505, 2.9411381774480105e-07, 0.018151234835386276, 0.028225518763065338, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.47848805785179138, } };
const TfArray<1, int> quant46_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37554600834846497, } };
const TfArray<1, int> quant50_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.55898177623748779, } };
const TfArray<1, int> quant53_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53627365827560425, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26770880818367004, } };
const TfArray<1, int> quant58_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.1812492161989212, } };
const TfArray<1, int> quant61_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29086202383041382, } };
const TfArray<1, int> quant62_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.28586632013320923, } };
const TfArray<1, int> quant65_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.36335137486457825, } };
const TfArray<1, int> quant66_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.064150750637054443, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15941236913204193, } };
const TfArray<1, int> quant69_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
